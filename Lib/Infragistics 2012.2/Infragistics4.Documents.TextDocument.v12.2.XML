<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Infragistics4.Documents.TextDocument.v12.2</name>
    </assembly>
    <members>
        <member name="T:Infragistics.InfragisticsFeatureAttribute">
            <summary>
            Indicates an exposed type or member which was added as part of a new feature.
            </summary>
        </member>
        <member name="M:Infragistics.InfragisticsFeatureAttribute.#ctor">
            <summary>
            Creates a new <see cref="T:Infragistics.InfragisticsFeatureAttribute"/> instance.
            </summary>
        </member>
        <member name="P:Infragistics.InfragisticsFeatureAttribute.Exclude">
            <summary>
            Gets or sets the value indicating whether member or type should be excluded from the internal feature documentation.
            </summary>
        </member>
        <member name="P:Infragistics.InfragisticsFeatureAttribute.FeatureName">
            <summary>
            Gets or sets a short name description of the feature.
            </summary>
        </member>
        <member name="P:Infragistics.InfragisticsFeatureAttribute.SubFeatureName">
            <summary>
            Gets or sets a more granular sub-feature name description of the feature.
            </summary>
        </member>
        <member name="P:Infragistics.InfragisticsFeatureAttribute.Version">
            <summary>
            Gets or sets the version in which the feature was added.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.CodeGeneration.LanguageGenerator">
            <summary>
            Generates code to create a
            <see cref="T:Infragistics.SyntaxParsing.LanguageBase">LanguageBase</see>
            derived class based on an existing 
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>
            instance.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.CodeGeneration.LanguageGenerator.GenerateClass(Infragistics.SyntaxParsing.Grammar,System.String,System.Boolean)">
            <summary>
            Generates code to create a
            <see cref="T:Infragistics.SyntaxParsing.LanguageBase">LanguageBase</see>
            derived class based on an existing 
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>
            instance.
            </summary>
            <param name="grammar">
            The
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>
            from which to create the LanguageBase-derived class.
            </param>
            <param name="className">The name of the class.</param>
            <param name="supportsParsing">Boolean value which indicates whether the generated language supports parsing.</param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.CodeGeneration.LanguageGenerator.GenerateClass(Infragistics.SyntaxParsing.CodeGeneration.LanguageGenerationParams)">
            <summary>
            Generates code to create a
            <see cref="T:Infragistics.SyntaxParsing.LanguageBase">LanguageBase</see>
            derived class based on an existing 
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>
            instance.
            </summary>
            <param name="parameters">
            The
            <see cref="T:Infragistics.SyntaxParsing.CodeGeneration.LanguageGenerationParams">LanguageGenerationParams</see>
            instance which defines the parameters of the language generation operation.
            </param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.CodeGeneration.LanguageGenerator.GenerateClassAsync(Infragistics.SyntaxParsing.CodeGeneration.LanguageGenerationParams,Infragistics.SyntaxParsing.CodeGeneration.LanguageGenerationProgressDelegate)">
            <summary>
            Asynchronously generates code to create a
            <see cref="T:Infragistics.SyntaxParsing.LanguageBase">LanguageBase</see>
            derived class based on an existing 
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>
            instance.
            </summary>
            <param name="parameters">
            The
            <see cref="T:Infragistics.SyntaxParsing.CodeGeneration.LanguageGenerationParams">LanguageGenerationParams</see>
            instance which defines the parameters of the language generation operation.
            </param>
            <param name="progressDelegate">
            A delegate which defines the signature of the method that is called to inform the caller of progress.
            This method is called periodically by the background worker that creates the language code.
            </param>
        </member>
        <member name="T:Infragistics.SyntaxParsing.CodeGeneration.AsyncLanguageGenerator">
            <summary>
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.CodeGeneration.LanguageGenerationProgressDelegate">
            <summary>
            Defines the signature of the method that is called during the language generation
            task to inform the caller of the progress of the task.
            </summary>
            <param name="progress">
            An instance of the
            <see cref="T:Infragistics.SyntaxParsing.CodeGeneration.LanguageGenerationProgress">LanguageGenerationProgress</see>
            class which contains information about the progress of the task.
            </param>
        </member>
        <member name="T:Infragistics.SyntaxParsing.CodeGeneration.LanguageGenerationProgress">
            <summary>
            Class which contains information about the progress of the language generation task.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.CodeGeneration.LanguageGenerationProgress.PercentComplete">
            <summary>
            Returns a value between 0 and 100 indicating the percentage of completion.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.CodeGeneration.LanguageGenerationProgress.IsComplete">
            <summary>
            Returns a boolean value indicating whether the language
            generation task is complete, or was canceled.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.CodeGeneration.LanguageGenerationProgress.Cancel">
            <summary>
            Returns a boolean value indicating whether the task is to be canceled.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.CodeGeneration.LanguageGenerationParams">
            <summary>
            Encapsulates the parameters available when generating a language class file using the
            <see cref="T:Infragistics.SyntaxParsing.CodeGeneration.LanguageGenerator">LanguageGenerator</see>.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.CodeGeneration.LanguageGenerationParams.#ctor(Infragistics.SyntaxParsing.Grammar,System.String,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the class.
            </summary>
            <param name="grammar">The grammar for which the language will be generated</param>
            <param name="className">The name of the class.</param>
            <param name="filename">The full path to the source file to be generated.</param>
            <param name="supportsParsing">A boolean value indicating whether the language supports parsing.</param>
        </member>
        <member name="P:Infragistics.SyntaxParsing.CodeGeneration.LanguageGenerationParams.Grammar">
            <summary>
            Returns a reference to the associated
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.CodeGeneration.LanguageGenerationParams.ClassName">
            <summary>
            Returns or sets the name of the class to be generated.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.CodeGeneration.LanguageGenerationParams.Summary">
            <summary>
            Returns or sets the text which appears in the summary
            tag of the documentation comments for the generated class.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.CodeGeneration.LanguageGenerationParams.Filename">
            <summary>
            Returns or sets the full path to the source file to be generated.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.CodeGeneration.LanguageGenerationParams.SupportsParsing">
            <summary>
            Returns or sets a boolean value indicating whether the language
            to be generated supports syntax parsing.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.CodeGeneration.LanguageGenerationParams.Encoding">
            <summary>
            Returns or sets the character encoding to be used when
            generating the language code file.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.CodeGeneration.LanguageGenerationParams.Conflicts">
            <summary>
            Returns a list of the parse action conflicts that were encountered
            during the parse action table generation phase.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.CodeGeneration.LanguageGenerationParams.IsSealed">
            <summary>
            Returns or sets a boolean value indicating whether the class
            to be generated will be marked as sealed.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.CodeGeneration.LanguageGenerationParams.IsPartial">
            <summary>
            Returns or sets a boolean value indicating whether the class
            to be generated will be marked as partial.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.CodeGeneration.LanguageGenerationParams.SyntaxTreePruningMode">
            <summary>
            Returns or sets the value for the language's
            <see cref="P:Infragistics.SyntaxParsing.LanguageBase.SyntaxTreePruningMode">SyntaxTreePruningMode</see>
            property.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Debugging.LALRParserDebugger.#ctor(Infragistics.SyntaxParsing.LanguageBase)">
            <summary>
            Creates a new instance of the 
            <see cref="T:Infragistics.SyntaxParsing.Debugging.LALRParserDebugger">LALRParserDebugger</see>
            class for the specified
            <see cref="T:Infragistics.SyntaxParsing.LanguageBase">language</see>.
            </summary>
            <param name="language">
            The
            <see cref="T:Infragistics.SyntaxParsing.LanguageBase">LanguageBase</see>-derived
            class for which the debugger is created.
            </param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Debugging.LALRParserDebugger.GetParseActions(Infragistics.SyntaxParsing.Debugging.State)">
            <summary>
            Returns the parse actions for the specified state.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Debugging.LALRParserDebugger.GetTransition(Infragistics.SyntaxParsing.Debugging.State)">
            <summary>
            Returns the grammar symbol from which the specified state transitions.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Debugging.LALRParserDebugger.GetTransition(Infragistics.SyntaxParsing.Debugging.State,Infragistics.SyntaxParsing.Symbol)">
            <summary>
            Returns the state to which the specified state transitions
            when the specified symbol is encountered in the input stream,
            or null if no valid transition is defined for the specified
            state and symbol.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Debugging.LALRParserDebugger.GetTransition(Infragistics.SyntaxParsing.Debugging.LRItem)">
            <summary>
            Returns the state to which the specified item transitions to,
            or null if the item has no transitioning state.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Debugging.LALRParserDebugger.GetTransitions(Infragistics.SyntaxParsing.Symbol)">
            <summary>
            Returns the states which transition from the specified symbol.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Debugging.LALRParserDebugger.GetTransitions(Infragistics.SyntaxParsing.Debugging.State)">
            <summary>
            Returns the states which transition to the specified state.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Debugging.LALRParserDebugger.ProductionFromItem(Infragistics.SyntaxParsing.Debugging.LRItem)">
            <summary>
            Returns the Production to which the specified item belongs.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Debugging.LALRParserDebugger.StateFromItem(Infragistics.SyntaxParsing.Debugging.LRItem)">
            <summary>
            Returns the state to which the specified item belongs.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Debugging.LALRParserDebugger.StateFromItem(Infragistics.SyntaxParsing.Debugging.LRItem,Infragistics.SyntaxParsing.Debugging.State@)">
            <summary>
            Returns the state to which the specified item belongs,
            as well as its transition states.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Debugging.LALRParserDebugger.Parse(System.String)">
            <summary>
            Parses the contents of the specified token buffer and returns
            the resulting parse stack.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Debugging.LALRParserDebugger.Parse(System.String,Infragistics.SyntaxParsing.SyntaxNode@,System.Int32@)">
            <summary>
            Parses the contents of the specified token buffer and returns
            the resulting parse stack.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Debugging.LALRParserDebugger.ActionsFromAmbiguousAction(Infragistics.SyntaxParsing.Debugging.ParseStateAction)">
            <summary>
            Returns the nested actions for this action if this action
            is 'Ambiguous', otherwise returns an empty list.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Debugging.LALRParserDebugger.Language">
            <summary>
            Returns the associated language.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Debugging.LALRParserDebugger.Grammar">
            <summary>
            Returns the associated grammar.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Debugging.LALRParserDebugger.Item(System.Int32)">
            <summary>
            Returns the state at the specified index.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Debugging.LALRParserDebugger.StateCount">
            <summary>
            Returns the total number of states generated by the parser.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Debugging.LALRParserDebugger.ConflictCount">
            <summary>
            Returns the total number of conflicts encountered by the parser
            during the state generation phase.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Debugging.LALRParserDebugger.Conflicts">
            <summary>
            Returns the shift/reduce conflicts encountered during the state
            generation phase.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Debugging.LALRParserDebugger.Productions">
            <summary>
            Returns all productions associated with this grammar.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Debugging.State.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Debugging.State.IsInitialState">
            <summary>
            Returns a boolean value indicating whether this state
            is the initial state for the associated grammar.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Debugging.State.Index">
            <summary>
            Returns the zero-based index of this state.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Debugging.State.Items">
            <summary>
            Returns the set of LRItems of which this state is comprised.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Debugging.LRItem.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Debugging.LRItem.IsKernelItem">
            <summary>
            Returns a boolean value indicating whether this item's
            transition symbol is at a position other than zero.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Debugging.LRItem.TransitionsOn">
            <summary>
            Returns the grammar symbol on which this item
            transitions to another state.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Debugging.LRItem.Lookaheads">
            <summary>
            Returns the terminal symbols which cause a reduce action for this item.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Debugging.ParseStateAction.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Debugging.ParseStateAction.Target">
            <summary>
            Returns the target of the action. For ActionTypes
            'Shift' and 'GoTo', the target is a State; for 'Reduce'
            the target is a Production. Null is returned for 'Accept' and 'Ambiguous'.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Debugging.ParseStateAction.Symbol">
            <summary>
            Returns the symbol which caused this action.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Debugging.ParseStateAction.Action">
            <summary>
            Returns the type of action this instance represents,
            i.e., Shift, Reduce, Goto, Accept, or Ambiguous.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Debugging.Production.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Debugging.Production.ToString(System.Boolean)">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Debugging.Production.Index">
            <summary>
            Returns the index of this production.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Debugging.Production.NonTerminalSymbol">
            <summary>
            Returns the non-terminal symbol from which this production was derived.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Debugging.ParseActionConflict.ToString">
            <summary>
            Returns the string representation of this object
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Debugging.ParseActionConflict.NonTerminalSymbol">
            <summary>
            Returns the non-terminal symbol for which the conflict was caused.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Debugging.ParseActionConflict.TerminalSymbol">
            <summary>
            Returns the terminal symbol for which the conflict was caused.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Debugging.ParseActionConflict.State">
            <summary>
            Returns the state which has the conflict.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Debugging.ParseActionConflict.Item">
            <summary>
            Returns the LRItem associated with this conflict, or null
            if the conflict is not associated with an LRItem.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Debugging.ParseActionConflict.ConflictingAction">
            <summary>
            Returns the action which caused the conflict.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Debugging.LALRParseStackTracer.Parse(System.String,Infragistics.SyntaxParsing.SyntaxNode@)">
            <summary>
            Parses the contents of the specified token buffer and returns
            the resulting parse stack. Returns null when the specified input
            is of zero length.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Debugging.LALRParseStackItem.#ctor(Infragistics.SyntaxParsing.Debugging.State,Infragistics.SyntaxParsing.Symbol,Infragistics.SyntaxParsing.Token,Infragistics.SyntaxParsing.Parser.LALRParser.ParseAction)">
            <summary>Creates a new instance.</summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Debugging.LALRParseStackItem.ToString">
            <summary>
            Returns the string representation of this object
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Debugging.LALRParseStackItem.ToString(Infragistics.SyntaxParsing.Debugging.LALRParserDebugger,Infragistics.SyntaxParsing.Debugging.LALRParseStackItem[])">
            <summary>
            Returns the string representation of this object
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Debugging.LALRParseStackItem.State">
            <summary>
            Returns the state associated with this item.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Debugging.LALRParseStackItem.Symbol">
            <summary>
            Returns the grammar symbol associated with this item.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Debugging.LALRParseStackItem.NonTerminalSymbol">
            <summary>
            Returns the last NonTerminalSymbol on which a state transitioned
            to produce this stack item.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Debugging.LALRParseStackItem.Node">
            <summary>
            Returns the SyntaxNode associated with this item, or null if
            the item is not associated with a SyntaxNode.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Debugging.LALRParseStackItem.Token">
            <summary>
            Returns the token associated with this item.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Debugging.LALRParseStackShiftItem.GetToState(Infragistics.SyntaxParsing.Debugging.LALRParserDebugger)">
            <summary>
            Returns the state to which this item transitions.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Debugging.LALRParseStackShiftItem.Position">
            <summary>
            Returns the position within the associated production.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Debugging.LALRParseStackReduceItem.GetProduction(Infragistics.SyntaxParsing.Debugging.LALRParserDebugger)">
            <summary>
            Returns the production associated with this item.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Debugging.LALRParseStackReduceItem.GetGoToState(Infragistics.SyntaxParsing.Debugging.LALRParserDebugger)">
            <summary>
            Returns the state to which this item transitions.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Debugging.LALRParseStackReduceItem.GetStateAfterReduction(Infragistics.SyntaxParsing.Debugging.LALRParserDebugger)">
            <summary>
            Returns the state to which this item transitions after
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Debugging.LALRParseStackReduceItem.ToString(Infragistics.SyntaxParsing.Debugging.LALRParserDebugger,Infragistics.SyntaxParsing.Debugging.LALRParseStackItem[])">
            <summary>
            Returns the string representation of this object
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Debugging.ParseActionType">
            <summary>
            Constants which identify the type of action which can be
            taken by a shift/reduce parser.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Debugging.ParseActionType.Error">
            <summary>
            No valid transition exists for the current symbol in the current state.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Debugging.ParseActionType.Shift">
            <summary>
            The parser shifts a terminal onto the stack.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Debugging.ParseActionType.Reduce">
            <summary>
            The parser reduces the contents of the stack and creates
            a non-terminal node with the nodes that were popped off.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Debugging.ParseActionType.GoTo">
            <summary>
            The parser transitions to a different state without modifying the stack.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Debugging.ParseActionType.Accept">
            <summary>
            The parser halts and signifies a successful parse.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Debugging.ParseActionType.Ambiguous">
            <summary>
            Multiple actions are defined for the transition symbol.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Exporting.EbnfExporter">
            <summary>
            Exports an instance of the
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>
            class to a file or stream in EBNF (Extended Backus-Naur Form)
            format.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Exporting.EbnfExporter.XmlTagNameGrammar">
            <summary>
            The string used to mark a grammar initialization special sequence ('Grammar').
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Exporting.EbnfExporter.XmlTagNameTerminalSymbols">
            <summary>
            The string used to mark a terminal symbol declaration special sequence ('TerminalSymbols').
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Exporting.EbnfExporter.XmlTagNameLexerStates">
            <summary>
            The string used to mark a lexer state declaration special sequence ('LexerStates').
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Exporting.EbnfExporter.Export(Infragistics.SyntaxParsing.Grammar,Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation,System.String)">
            <summary>
            Exports the specified
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>
            instance to a text file, using ASCII encoding.
            </summary>
            <param name="grammar">
            The
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>
            to export.
            </param>
            <param name="notation">
            A
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation">EbnfParserNotation</see>
            instance which defines the symbols and operators used when creating the output.
            </param>
            <param name="path">
            Full path to the file to be created. Existing files are overwritten.
            </param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Exporting.EbnfExporter.Export(Infragistics.SyntaxParsing.Grammar,Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation,System.String,Infragistics.SyntaxParsing.Exporting.GrammarCategories)">
            <summary>
            Exports the specified
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>
            instance to a text file, using ASCII encoding.
            </summary>
            <param name="grammar">
            The
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>
            to export.
            </param>
            <param name="notation">
            A
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation">EbnfParserNotation</see>
            instance which defines the symbols and operators used when creating the output.
            </param>
            <param name="path">
            Full path to the file to be created. Existing files are overwritten.
            </param>
            <param name="categories">
            Bitflags which define which categories of the grammar are to be exported.
            </param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Exporting.EbnfExporter.Export(Infragistics.SyntaxParsing.Grammar,Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation,System.String,System.Text.Encoding,Infragistics.SyntaxParsing.Exporting.GrammarCategories)">
            <summary>
            Exports the specified
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>
            instance to a text file.
            </summary>
            <param name="grammar">
            The
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>
            to export.
            </param>
            <param name="notation">
            A
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation">EbnfParserNotation</see>
            instance which defines the symbols and operators used when creating the output.
            </param>
            <param name="path">
            Full path to the file to be created. Existing files are overwritten.
            </param>
            <param name="encoding">
            The text encoding.
            </param>
            <param name="categories">
            Bitflags which define which categories of the grammar are to be exported.
            </param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Exporting.EbnfExporter.Export(Infragistics.SyntaxParsing.Grammar,Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation,System.IO.Stream)">
            <summary>
            Exports the specified
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>
            instance to the specified <paramref name="stream"/>, using ASCII encoding.
            </summary>
            <param name="grammar">
            The
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>
            to export.
            </param>
            <param name="notation">
            A
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation">EbnfParserNotation</see>
            instance which defines the symbols and operators used when creating the output.
            </param>
            <param name="stream">
            The stream to which the output is directed.
            Caller is responsible for closing and disposing of the stream.
            </param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Exporting.EbnfExporter.Export(Infragistics.SyntaxParsing.Grammar,Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation,System.IO.Stream,System.Text.Encoding)">
            <summary>
            Exports the specified
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>
            instance to the specified <paramref name="stream"/>.
            </summary>
            <param name="grammar">
            The
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>
            to export.
            </param>
            <param name="notation">
            A
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation">EbnfParserNotation</see>
            instance which defines the symbols and operators used when creating the output.
            </param>
            <param name="stream">
            The stream to which the output is directed.
            Caller is responsible for closing and disposing of the stream.
            </param>
            <param name="encoding">
            The text encoding.
            </param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Exporting.EbnfExporter.Export(Infragistics.SyntaxParsing.Grammar,Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation,System.IO.Stream,System.Text.Encoding,Infragistics.SyntaxParsing.Exporting.GrammarCategories)">
            <summary>
            Exports the specified
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>
            instance to the specified <paramref name="stream"/>.
            </summary>
            <param name="grammar">
            The
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>
            to export.
            </param>
            <param name="notation">
            A
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation">EbnfParserNotation</see>
            instance which defines the symbols and operators used when creating the output.
            </param>
            <param name="stream">
            The stream to which the output is directed.
            Caller is responsible for closing and disposing of the stream.
            </param>
            <param name="encoding">
            The text encoding.
            </param>
            <param name="categories">
            Bitflags which define which categories of the grammar are to be exported.
            </param>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Exporting.GrammarCategories">
            <summary>
            Defines which categories of a
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>
            are exported.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Exporting.GrammarCategories.None">
            <summary>
            No operation.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Exporting.GrammarCategories.GrammarProperties">
            <summary>
            The Grammar properties section is exported.
            Use this flag to export the properties of the
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Exporting.GrammarCategories.TerminalSymbolDeclarations">
            <summary>
            Declarations of
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbols</see>
            are exported.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Exporting.GrammarCategories.NonTerminalSymbolDeclarations">
            <summary>
            Declarations of
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbols</see>
            are exported.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Exporting.GrammarCategories.LexerStateDeclarations">
            <summary>
            Declarations of
            <see cref="T:Infragistics.SyntaxParsing.LexerState">LexerStates</see>
            are exported.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Exporting.GrammarCategories.All">
            <summary>
            Combines the GrammarProperties, TerminalSymbolDeclarations, NonTerminalSymbolDeclarations, and LexerStateDeclarations flags.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.SyntaxRuleType">
            <summary>
            Constants which describe the rules which are enforced
            by a parser to determine whether input is syntactically valid.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.SyntaxRuleType.None">
            <summary>
            Used for variable declaration.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.SyntaxRuleType.Terminal">
            <summary>
            Placeholder for a
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>.
            A Terminal rule cannot have sub-rules; attempting to add a sub-rule
            to a terminal rule will cause an exception to be thrown. A terminal
            rule is analogous to a leaf node on a syntax tree.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.SyntaxRuleType.NonTerminal">
            <summary>
            Placeholder for a
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.SyntaxRuleType.Alternation">
            <summary>
            A logical 'OR' is applied between each of the sub-rules.
            Example: (A | B); the rule succeeds if either 'A' or 'B' succeeds.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.SyntaxRuleType.Concatenation">
            <summary>
            Each sub-rule must succeed, and is expected to be appear in sequential order.
            Example: (A, B); the rule succeeds for "AB", but not for "ACB"
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.SyntaxRuleType.Conjunction">
            <summary>
            Currently not supported.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.SyntaxRuleType.Optional">
            <summary>
            The rule may or may not succeed. If a sub-rule fails, the optional rule still succeeds.
            Example: A, [B]; the rule requires A to succeed, but B may or may not succeed
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.SyntaxRuleType.Repetition">
            <summary>
            Each of the sub-rules may succeed zero or more times.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.SyntaxRuleType.Negation">
            <summary>
            Currently not supported.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.TerminalSymbolComparison">
            <summary>
            Constants which determine the manner in which a terminal
            symbol's value is compared to values in the compilation
            source.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.TerminalSymbolComparison.Literal">
            <summary>
            The value associated with the symbol is a literal string.
            The syntax parser will compare values in the compilation
            target with the associated value and generate an error if
            the values do not match exactly. The comparison under this
            setting is case-sensitive.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.TerminalSymbolComparison.LiteralIgnoreCase">
            <summary>
            Same as the 'Literal' setting, except that character casing
            is ignored for the string comparisons.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.TerminalSymbolComparison.RegularExpression">
            <summary>
            The value associated with the symbol is implied to be a regular
            expression pattern. The
            <a href="http://msdn.microsoft.com/en-us/library/system.text.regularexpressions.regex.aspx">System._Text.RegularExpressions.Regex</a>
            class is used to determine whether values in the compilation target
            match the pattern assigned to the terminal symbol's value.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.LanguageElement">
            <summary>
            Constants which describe the language element of tokens produced by the associated
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.LanguageElement.Undefined">
            <summary>
            No language element is specified.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.LanguageElement.Comment">
            <summary>
            Tokens produced by this terminal symbol are not semantically significant
            to the associated grammar.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.LanguageElement.NewLine">
            <summary>
            Tokens produced by this terminal symbol represent newlines.
            Note that a terminal symbol with this value always the regular expression pattern defined by the
            <see cref="P:Infragistics.SyntaxParsing.Grammar.NewLineSymbol">NewLineSymbol</see>
            to tokenize content. 
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.LanguageElement.Whitespace">
            <summary>
            Tokens produced by this terminal symbol represent whitespace characters
            such as the space character or tab character. This value is used by the
            <see cref="P:Infragistics.SyntaxParsing.Grammar.WhitespaceSymbol">WhitespaceSymbol</see>,
            but can be used by any terminal symbol; tokens generated by such symbols
            are considered to be semantically insignificant to the associated grammar.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.LanguageElement.ReservedKeyword">
            <summary>
            Tokens produced by this terminal symbol represent reserved keywords.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.LanguageElement.ContextSensitiveKeyword">
            <summary>
            Tokens produced by this terminal symbol represent context-sensitive keywords,
            i.e., can be either a keyword or identifier depending on the usage.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.LanguageElement.Identifier">
            <summary>
            Tokens produced by this terminal symbol represent identifiers.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.LanguageElement.StringLiteral">
            <summary>
            Tokens produced by this terminal symbol represent a string or character literal.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.LanguageElement.NumericLiteral">
            <summary>
            Tokens produced by this terminal symbol represent a numeric literal.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.LanguageElement.DateLiteral">
            <summary>
            Tokens produced by this terminal symbol represent a date/time literal.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.LanguageElement.Operator">
            <summary>
            Tokens produced by this terminal symbol represent mathematical,
            relational, or logical operators, such as +, -, >, |, etc.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.LanguageElement.Punctuation">
            <summary>
            Tokens produced by this terminal symbol represent punctuation
            symbols such as a semicolon, parentheses, braces, etc.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.LanguageElement.PreprocessorDirective">
            <summary>
            Tokens produced by this terminal symbol represent preprocessor directives,
            i.e., '#region', '#if', '#else', '#endif', etc.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.LanguageElement.PreprocessorDirectiveText">
            <summary>
            Tokens produced by this terminal symbol represent text within a preprocessor directive.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.LanguageElement.LineContinuation">
            <summary>
            Tokens produced by this terminal symbol represent the continuation of a logical line. They will cause an 
            immediately following LineTerminator token to be skipped.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.LanguageElement.Unrecognized">
            <summary>
            Tokens produced by this terminal symbol represent unrecognized content.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.LanguageElement.DocCommentStart">
            <summary>
            Tokens produced by this terminal symbol represent the beginning
            of an XML documentation comment line.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.LanguageElement.DocCommentText">
            <summary>
            Tokens produced by this terminal symbol represent the
            text within an XML documentation comment.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.LanguageElement.DocCommentTag">
            <summary>
            Tokens produced by this terminal symbol represent the
            tags within an XML documentation comment.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.LanguageElement.LineTerminator">
            <summary>
            Tokens produced by this terminal symbol represent the end marker for a logical line unless they are
            immediately preceded by a LineContinuation token.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.LanguageElement.EndOfStream">
            <summary>
            Reserved for the
            <see cref="P:Infragistics.SyntaxParsing.Grammar.EndOfStreamSymbol">EndOfStreamSymbol</see>.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.NewLineSequence">
            <summary>
            Determines the sequence of characters used to delimit lines in a TextDocument.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.NewLineSequence.EnvironmentNewLine">
            <summary>
            The value returns from <b>Enviornment.NewLine</b>
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.NewLineSequence.LineFeed">
            <summary>
            A single line feed character (0x0A)
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.NewLineSequence.CarriageReturn">
            <summary>
            A single carriage return character (0x0D)
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.NewLineSequence.CarriageReturnAndLineFeed">
            <summary>
            2 characters, a carriage return (0x0D) followed by a line feed (0x0A)
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.TerminalSymbolParseResult.ExactMatch">
            <summary>
            A case-sensitive match was made.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.TerminalSymbolParseResult.CaseInsensitiveMatch">
            <summary>
            A case-insensitive match was made, i.e., the text was
            the same but case differed between the value and the input.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.TerminalSymbolParseResult.PatternMatch">
            <summary>
            The input matched the terminal's regex pattern.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.TerminalSymbolParseResult.NoMatch">
            <summary>
            No match was made.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.TerminalSymbolParseResult.MatchWithoutBoundary">
            <summary>
            A match was made, but was not followed by the expected boundary pattern.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.ParseStatus">
            <summary>
            Constants which describe the result of a parse operation.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.ParseStatus.Undefined">
            <summary>
            Initial value
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.ParseStatus.Success">
            <summary>
            A terminal symbol successfully parsed input,
            or a non-terminal condition was fulfilled.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.ParseStatus.FailureWithCorrection">
            <summary>
            A terminal symbol failed to parse input, but the error
            was handled and execution was allowed to continue.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.ParseStatus.Failure">
            <summary>
            A terminal symbol failed to parse input, and the error
            was not handled, causing execution to halt.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.ParseStatus.Complete">
            <summary>
            All content has been consumed, i.e., the
            parse operation is complete.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.ParseResult">
            <summary>
            Constants which describe the result of a parse operation.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.ParseResult.Success">
            <summary>
            The parse attempt succeeded.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.ParseResult.Invalid">
            <summary>
            The terminal symbol's
            <see cref="P:Infragistics.SyntaxParsing.TerminalSymbol.Value">value</see>
            did not match the text at the current position of the input stream.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.ParseResult.NoParseBoundary">
            <summary>
            The terminal symbol's
            <see cref="P:Infragistics.SyntaxParsing.TerminalSymbol.Value">value</see>
            matched the text at the current position of the input stream, but
            no characters matching the pattern defined by the TerminalSymbol's
            <see cref="P:Infragistics.SyntaxParsing.TerminalSymbol.BoundaryPattern">BoundaryPattern</see>
            property were found after the value.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.ParseResult.Negation">
            <summary>
            The
            <see cref="P:Infragistics.SyntaxParsing.TerminalSymbol.Value">value</see>
            of a terminal symbol which was explicitly disallowed by a
            <see cref="T:Infragistics.SyntaxParsing.NegationRule">NegationRule</see>
            was encountered at the current position of the input stream.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.ParseResult.UnrecognizedContent">
            <summary>
            All sub-rules for the
            <see cref="P:Infragistics.SyntaxParsing.Grammar.StartSymbol">StartSymbol</see>
            were evaluated, but all or part of the string being parsed was not tokenized because no rule recognized the input.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.ParseResult.EndOfStream">
            <summary>
            The input stream has been consumed in its entirety, but
            one or more rules have not yet been evaluated.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.SyntaxNodeFilterAction">
            <summary>
            Returned by the filter Func passed into the <see cref="M:Infragistics.SyntaxParsing.SyntaxNode.DescendantNodes(System.Nullable{Infragistics.SyntaxParsing.TextSpan},System.Func{Infragistics.SyntaxParsing.SyntaxNode,Infragistics.SyntaxParsing.SyntaxNodeFilterAction},System.Boolean)"/> method to control which <see cref="T:Infragistics.SyntaxParsing.SyntaxNode"/>s will be returned by the enumerator. 
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.SyntaxNodeFilterAction.SkipNode">
            <summary>
            Do not return this node but include its descendant nodes.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.SyntaxNodeFilterAction.SkipNodeAndItsDescendants">
            <summary>
            Do not return this node or any of its descendant nodes.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.SyntaxNodeFilterAction.ReturnNodeButSkipDescendants">
            <summary>
            Return this node but not any of its descendant nodes.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.SyntaxNodeFilterAction.ReturnNodeAndItsDescendants">
            <summary>
            Return this node and its descendant nodes.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.SyntaxTreePruningMode">
            <summary>
            Constants which describe whether a non-terminal
            <see cref="T:Infragistics.SyntaxParsing.SyntaxNode">syntax node</see>
            appears in the
            <see cref="T:Infragistics.SyntaxParsing.SyntaxTree">syntax tree</see>
            produced when a document is parsed.
            </summary>
            <remarks>
            <p class="body">
            The term "pruning" refers to the process of removing non-terminal
            syntax nodes which, for whatever reason, are not considered important to the
            consumer of the syntax tree. This process provides a simple mechanism
            by which to convert a concrete syntax tree (CST) to an abstract syntax
            tree (AST).
            </p>
            <p class="body">
            Terminal nodes are never removed from a syntax tree, since
            they always represent significant content.
            </p>
            <p class="body">
            Significant child nodes of non-terminal nodes which are pruned
            become immediate children of the first ancestor node that is not pruned.
            </p>
            <p class="body">
            By default, non-terminal nodes which have only one child, where that child
            is itself a non-terminal node, do not appear in the syntax tree. Non-terminal
            nodes whose name is prefixed with an underscore ('_') also do not appear.
            This is the equivalent of combining the 'BasedOnChildren' and 'BasedOnName'
            constants.
            </p>
            </remarks>
        </member>
        <member name="F:Infragistics.SyntaxParsing.SyntaxTreePruningMode.None">
            <summary>
            All non-terminal nodes appear in the tree.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.SyntaxTreePruningMode.BasedOnChildren">
            <summary>
            Non-terminal syntax nodes which have only one child, where that
            child is itself a non-terminal syntax node, are not included in
            the syntax tree.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.SyntaxTreePruningMode.BasedOnName">
            <summary>
            Non-terminal syntax nodes which are associated with a
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>
            whose name begins with an underscore ('_') are considered to be used internally
            for the purpose of parsing, and do not appear in the syntax tree.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.SyntaxTreePruningMode.Custom">
            <summary>
            The
            <see cref="M:Infragistics.SyntaxParsing.LanguageBase.IncludeInSyntaxTree(Infragistics.SyntaxParsing.Parser.ParseContext)">IncludeInSyntaxTree</see>
            method is called, allowing a language-specific implementation to make the determination as to
            whether a node appears in the syntax tree.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Grammar">
            <summary>
            Encapsulates a formal, context-free grammar whose production
            rules are used to parse and validate textual input.
            </summary>
            <remarks>
            <p class="body">
            The syntax of a programming language is defined by its grammar.
            This formal definition provides a way to define what constitutes
            a legal sequence of characters in a concise, unambiguous manner.
            </p>
            <p class="body">
            A syntax analyzer is a finite state machine which evaluates textual
            input according to the rules defined within the grammar, determining
            whether the input conforms to these rules. The starting point for
            syntax analysis is exposed through the
            <see cref="P:Infragistics.SyntaxParsing.Grammar.StartSymbol">StartSymbol</see>
            property. Syntax analysis is realized by recursively iterating the
            start symbol's
            <see cref="P:Infragistics.SyntaxParsing.NonTerminalSymbol.Rules">Rules</see>
            collection.
            </p>
            <p class="body">
            The main components of a grammar definition are encapsulated by the
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            and
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>
            classes.
            </p>
            <p class="body">
            A TerminalSymbol represents the string or pattern which must be
            matched in order for the corresonding rule to be satisfied. For example,
            a TerminalSymbol for the string "Foo" would evaluate the input string and
            signify success if it begins with "Foo", and signify failure if it does not.
            More complex evaluations are made possible through the use of regular expression
            patterns, which the TerminalSymbol class also supports. A TerminalSymbol also
            has no child rules, which reflects the meaning of its key - it represents the
            terminal point of a syntax rule evaluation.
            </p>
            <p class="body">
            A NonTerminalSymbol represents a grouping of rules which usually consists of
            multiple TerminalSymbols and other NonTerminalSymbols. A NonTerminalSymbol
            can be thought of as a shortcut through which a rule path can appear
            in different locations within the grammar without having to duplicate the
            logic. Unlike the TerminalSymbol, the NonTerminalSymbol class exposes a
            <see cref="P:Infragistics.SyntaxParsing.SyntaxRule.Rules">Rules</see>
            collection; the contents of this collection defines the order in which the
            grammatical rules are evaluated.
            </p>
            <p class="body">
            A
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleBase">syntax rule</see>
            is a representation of a production rule of the grammar. Each
            type of rule represents a logical "operator" which defines the context
            for the evaluations performed by the TerminalSymbol.
            </p>
            <p class="body">
            Syntax analysis during a parsing operation that analyzes each
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleBase">syntax rule</see>
            defined for the grammar by recursively iterating the start symbol's
            <see cref="P:Infragistics.SyntaxParsing.SyntaxRule.Rules">Rules</see>
            collection, analyzing the token stream produced during the lexical
            analysis phase.
            The Parse method returns an instance of the
            <see cref="T:Infragistics.SyntaxParsing.SyntaxTree">SyntaxTree</see>
            class, which provides an abstraction of the input that was parsed.
            A SyntaxTree is then used by consumers for semantic interpretation
            of the input.
            </p>
            </remarks>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Grammar.DefaultWhitespacePattern">
            <summary>
            Returns the default regular expression pattern
            used to identify whitespace characters ("[ \t]+").
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Grammar.NewLinePattern">
            <summary>
            Returns the default regular expression pattern
            used to identify newlines ("\n|\r\n|\r").
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Grammar.EndOfStreamSymbolName">
            <summary>
            Returns the name reserved for the
            <see cref="P:Infragistics.SyntaxParsing.Grammar.EndOfStreamSymbol">EndOfStreamSymbol</see>
            ($).
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Grammar.DefaultNewLineSequence">
            <summary>
            Returns the default value for the
            <see cref="P:Infragistics.SyntaxParsing.Grammar.NewLineSequence">NewLineSequence</see>
            property (EnvironmentNewLine)
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Grammar.OnEbnfParsing(Infragistics.SyntaxParsing.EbnfParsingEventArgs)">
            <summary>
            Raises the
            <see cref="E:Infragistics.SyntaxParsing.Grammar.EbnfParsing">EbnfParsing</see>
            event.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Grammar.OnEbnfParseComplete(Infragistics.SyntaxParsing.EbnfParseCompleteEventArgs)">
            <summary>
            Raises the
            <see cref="E:Infragistics.SyntaxParsing.Grammar.EbnfParseComplete">EbnfParseComplete</see>
            event.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Grammar.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>
            class.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Grammar.ResetWhitespacePattern">
            <summary>
            Restores the WhitespacePattern property to its default value.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Grammar.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Grammar.InitializeFrom(Infragistics.SyntaxParsing.Grammar)">
            <summary>
            Initializes this
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>
            instance from the specified <paramref name="source"/>
            instance.
            </summary>
            <param name="source">
            The instance from which this instance is to be initialized.
            </param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Grammar.FromEbnf(System.String,System.Text.Encoding)">
            <summary>
            Initializes this
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>
            instance from the specified EBNF file.
            </summary>
            <param name="filename">
            A string containing the full path to the EBNF (Extended Backus-Naur Form) file.
            </param>
            <param name="encoding">
            The character
            <a href="http://msdn.microsoft.com/en-us/library/system.text.encoding.aspx">encoding</a>
            which controls the transformation of characters into byte sequences.
            </param>
            <returns>
            An
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.EbnfParseResult">EbnfParseResult</see>
            instance which describes the result of the parse operation.
            </returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Grammar.FromEbnf(System.String,Infragistics.SyntaxParsing.Ebnf.EbnfParser,System.Text.Encoding)">
            <summary>
            Initializes this
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>
            instance from the specified Ebnf file, using the specified
            <paramref name="ebnfParser"/>.
            </summary>
            <param name="filename">
            A string containing the full path to the Ebnf (Extended Backus-Naur Form) file.
            </param>
            <param name="ebnfParser">
            The
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.EbnfParser">EbnfParser</see>
            instance from which the grammar is created.
            </param>
            <param name="encoding">
            The character
            <a href="http://msdn.microsoft.com/en-us/library/system.text.encoding.aspx">encoding</a>
            which controls the transformation of characters into byte sequences.
            </param>
            <returns>
            An
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.EbnfParseResult">EbnfParseResult</see>
            instance which describes the result of the parse operation.
            </returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Grammar.FromEbnf(System.String)">
            <summary>
            Initializes this
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>
            instance from the specified string.
            </summary>
            <param name="ebnf">
            A string containing the Ebnf (Extended Backus-Naur Form) content.
            </param>
            <returns>
            An
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.EbnfParseResult">EbnfParseResult</see>
            instance which describes the result of the parse operation.
            </returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Grammar.FromEbnf(System.String,Infragistics.SyntaxParsing.Ebnf.EbnfParser)">
            <summary>
            Initializes this
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>
            instance from the specified string, using the specified
            <paramref name="ebnfParser"/>.
            </summary>
            <param name="ebnf">
            A string containing the Ebnf (Extended Backus-Naur Form) content.
            </param>
            <param name="ebnfParser">
            The
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.EbnfParser">EbnfParser</see>
            instance from which the grammar is created.
            </param>
            <returns>
            An
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.EbnfParseResult">EbnfParseResult</see>
            instance which describes the result of the parse operation.
            </returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Grammar.GetLineNumber(System.String,System.Int32@)">
            <summary>
            Returns the one-based line number and column of the character
            following the last character of the specified <paramref name="input"/>.
            </summary>
            <param name="input">The string to evaluate.</param>
            <param name="column">[out] Upon return, contains the one-based column in which the character appears.</param>
            <returns>The one-based line number on which the character appears.</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Grammar.GetLineNumber(System.String,System.String,System.Int32@)">
            <summary>
            For Infragistics internal use only.
            </summary>
        </member>
        <member name="E:Infragistics.SyntaxParsing.Grammar.EbnfParsing">
            <summary>
            Fires when a new grammar definition is loaded by calling the
            <see cref="M:Infragistics.SyntaxParsing.Grammar.FromEbnf(System.String,Infragistics.SyntaxParsing.Ebnf.EbnfParser)">FromEbnf</see>
            method.
            </summary>
        </member>
        <member name="E:Infragistics.SyntaxParsing.Grammar.EbnfParseComplete">
            <summary>
            Fires after a grammar definition has been successfully loaded by calling the
            <see cref="M:Infragistics.SyntaxParsing.Grammar.FromEbnf(System.String,Infragistics.SyntaxParsing.Ebnf.EbnfParser)">FromEbnf</see>
            method.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Grammar.StartSymbol">
            <summary>
            Returns or sets a reference to the
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>
            which defines the starting point for a parsing operation.
            </summary>
            <remarks>
            <p class="body">
            When parsing starts, each production rule of the grammar is analyzed
            until all the input text is consumed, or until all rules have been
            evaluated. The StartSymbol defines the starting point for this analysis.
            </p>
            <p class="body">
            The StartSymbol property must be set to a non-null value prior to beginning a parsing operation, or an exception is thrown.
            </p>
            <p class="body">
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Grammar.TerminalSymbols">
            <summary>
            Returns a read-only collection which contains all
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            instances defined for this grammar.
            </summary>
            <remarks>
            <p class="body">
            Terminal symbols are literal characters that can appear in the inputs
            to or outputs from the production rules of a formal grammar and are
            irreducible, i.e., cannot be broken down into "smaller" units.
            </p>
            <p class="body">
            TerminalSymbols are added to this collection automatically upon creation.
            Create new TerminalSymbol instances using the static
            <see cref="M:Infragistics.SyntaxParsing.TerminalSymbol.Create(Infragistics.SyntaxParsing.Grammar,System.String,System.String,Infragistics.SyntaxParsing.TerminalSymbolComparison)">Create</see>
            method.
            </p>
            </remarks> 
            <seealso cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol class</seealso>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Grammar.NonTerminalSymbols">
            <summary>
            Returns a collection of the non-terminal symbols which define this grammar.
            </summary>
            <remarks>
            <p class="body">
            A NonTerminalSymbol is a symbol of the grammar which can be replaced
            by some combination of
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">terminal</see>
            and non-terminal symbols.
            </p>
            <p class="body">
            A NonTerminalSymbol exposes a
            <see cref="P:Infragistics.SyntaxParsing.NonTerminalSymbol.Rules">Rules</see>
            collection to which syntax rules are added, thus defining the syntax
            for the grammar.
            </p>
            <p class="body">
            The
            <see cref="P:Infragistics.SyntaxParsing.Grammar.StartSymbol">StartSymbol</see>
            property references a NonTerminalSymbol which defines the starting
            point for parse operations.
            </p>
            </remarks>
            <seealso cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol class</seealso>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Grammar.WhitespacePattern">
            <summary>
            Returns or sets the regular expression pattern used to identify
            whitespace by the syntax analysis layer.
            </summary>
            <remarks>
            <p class="body">
            By default, the pattern '[ \t]+' is used, which matches the ASCII
            characters 9 (horizontal tab) and 32 (space). This property can be
            set to any valid regular expression pattern to change the definition
            of whitespace for this grammar.
            </p>
            <p class="body">
            To suppress automatic whitespace parsing, set this property to null
            or an empty string.
            </p>
            </remarks>
            <seealso cref="P:Infragistics.SyntaxParsing.Grammar.WhitespaceSymbol">WhitespaceSymbol</seealso>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Grammar.WhitespaceSymbol">
            <summary>
            Returns a
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            based on the value of the
            <see cref="P:Infragistics.SyntaxParsing.Grammar.WhitespacePattern">WhitespacePattern</see>
            property, which can be used to match whitespace characters.
            </summary>
            <remarks>
            <p class="body">
            Use the
            <see cref="P:Infragistics.SyntaxParsing.Grammar.WhitespaceSymbolName">WhitespaceSymbolName</see>
            property to assign a name to the symbol, which can then be used to refer to the whitespace symbol
            from within grammar definition scripts and by the
            <see cref="P:Infragistics.SyntaxParsing.TerminalSymbolsCollection.Item(System.String)">indexer</see>
            of the
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbolsCollection">TerminalSymbols</see>
            collection.
            </p>
            </remarks> 
            <seealso cref="P:Infragistics.SyntaxParsing.Grammar.WhitespacePattern">WhitespacePattern</seealso>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Grammar.WhitespaceSymbolName">
            <summary>
            Returns or sets the name that is used to reference the
            <see cref="P:Infragistics.SyntaxParsing.Grammar.WhitespaceSymbol">WhitespaceSymbol</see>
            </summary>
            <remarks>
            <p class="body">
            This value can be used to obtain a reference to the WhitespaceSymbol from the
            <see cref="P:Infragistics.SyntaxParsing.Grammar.TerminalSymbols">TerminalSymbols</see>
            collection's indexer, although the collection does not actually contain this symbol.
            </p>
            <p class="body">
            This value can also be used within grammar definition scripts to denote a
            <see cref="T:Infragistics.SyntaxParsing.TerminalRule">TerminalRule</see>
            which expects whitespace.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Grammar.NewLineSequence">
            <summary>
            Returns or sets a value which determines the character(s) used to represent
            new lines in text which is analyzed by the syntax validation layer.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Grammar.Name">
            <summary>
            Returns or sets a human-readable name for this grammar definition.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Grammar.EndOfStreamSymbol">
            <summary>
            Returns a
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            which represents the end of the input stream.
            </summary>
            <remarks>
            <p class="body">
            The EndOfStreamSymbol is assigned a value of '$' for its name.
            This value cannot be changed.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Grammar.NewLineSymbol">
            <summary>
            Returns a
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            which is used to match newlines.
            </summary>
            <remarks>
            <p class="body">
            Use the
            <see cref="P:Infragistics.SyntaxParsing.Grammar.NewLineSymbolName">NewLineSymbolName</see>
            property to assign a name to the symbol, which can then be used to refer to the newline symbol
            from within grammar definition scripts and by the
            <see cref="P:Infragistics.SyntaxParsing.TerminalSymbolsCollection.Item(System.String)">indexer</see>
            of the
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbolsCollection">TerminalSymbols</see>
            collection.
            </p>
            </remarks> 
        </member>
        <member name="P:Infragistics.SyntaxParsing.Grammar.NewLineSymbolName">
            <summary>
            Returns or sets the name that is used to reference the
            <see cref="P:Infragistics.SyntaxParsing.Grammar.NewLineSymbol">NewLineSymbol</see>.
            </summary>
            <remarks>
            <p class="body">
            This value can be used to obtain a reference to the WhitespaceSymbol from the
            <see cref="P:Infragistics.SyntaxParsing.Grammar.TerminalSymbols">TerminalSymbols</see>
            collection's indexer, although the collection does not actually contain this symbol.
            </p>
            <p class="body">
            This value can also be used within grammar definition scripts to denote a
            <see cref="T:Infragistics.SyntaxParsing.TerminalRule">TerminalRule</see>
            which expects whitespace.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Grammar.LexerStates">
            <summary>
            Returns a collection of the
            <see cref="T:Infragistics.SyntaxParsing.LexerState">LexerStates</see>
            associated with this grammar.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Grammar.HasLexerStates">
            <summary>
            Returns a boolean value indicating whether any
            <see cref="T:Infragistics.SyntaxParsing.LexerState">LexerStates</see>
            are defined for this grammar.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.LanguageBase">
            <summary>
            An abstract base class representing a language that has a specific set of rules (i.e. <see cref="P:Infragistics.SyntaxParsing.LanguageBase.Grammar"/>).
            </summary>
            <seealso cref="P:Infragistics.SyntaxParsing.LanguageBase.Grammar"/>
        </member>
        <member name="M:Infragistics.SyntaxParsing.LanguageBase.#ctor(Infragistics.SyntaxParsing.Grammar)">
            <summary>
            Instantiates a new instance of <see cref="T:Infragistics.SyntaxParsing.LanguageBase"/>
            </summary>
            <param name="grammar">The associated grammar.</param>
            <exception cref="T:System.ArgumentNullException">If grammar parameter is null,</exception>
        </member>
        <member name="M:Infragistics.SyntaxParsing.LanguageBase.GetLALRParseTableData(Infragistics.SyntaxParsing.Parser.LALRParser.ParseState[]@,System.Int32[]@,Infragistics.SyntaxParsing.Parser.LALRParser.AmbiguousParseAction[]@)">
            <summary>
            Returns parse table data for an LALR parser.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.LanguageBase.GenerateSymbolIds">
            <summary>
            Generates identifiers for each symbol in the grammar.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.LanguageBase.IncludeInSyntaxTree(Infragistics.SyntaxParsing.Parser.ParseContext)">
            <summary>
            Returns a boolean value indicating whether syntax nodes created
            for the specified nonTerminalSymbol appear in the syntax tree,
            regardless of whether they contain any terminals as immediate children.
            </summary>
            <remarks>
            <p class="body">
            The IncludeInSyntaxTree method is only called when the
            <see cref="P:Infragistics.SyntaxParsing.LanguageBase.SyntaxTreePruningMode">SyntaxTreePruningMode</see>
            property returns 'Custom'.
            </p>
            <p class="body">
            By default, non-terminal nodes whose
            <see cref="P:Infragistics.SyntaxParsing.Symbol.Name">name</see>
            is prefaced with an underscore are not included in the syntax tree;
            nor are non-terminal nodes with only one child node, where that child
            node is itself a non-terminal.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.SyntaxParsing.LanguageBase.GetErrorAlias(Infragistics.SyntaxParsing.Symbol)">
            <summary>
            When overridden in a derived class, returns a customized error alias
            which is used to represent the specified grammar symbol when the parser
            expects to find that symbol and does not.
            </summary>
            <param name="symbol">
            The
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">terminal</see>
            or
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">non-terminal</see>
            symbol for which an error message is to be returned.
            </param>
            <remarks>
            <p class="body">
            For non-terminal symbols, the base class implementation returns the name of the symbol.
            For terminal symbols, the symbol's
            <see cref="P:Infragistics.SyntaxParsing.TerminalSymbol.Value">Value</see>
            is displayed when the
            <see cref="P:Infragistics.SyntaxParsing.TerminalSymbol.Comparison">Comparison</see>
            property returns 'Literal' or 'LiteralIgnoreCase'. For the case where the Comparison
            property returns 'RegularExpression', the string representation of the
            <see cref="P:Infragistics.SyntaxParsing.TerminalSymbol.LanguageElement">LanguageElement</see>
            property is displayed, unless it returns 'Undefined', in which case the
            symbol's name is returned. This value is then formatted with the word 'expected',
            and displayed to the user.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.SyntaxParsing.LanguageBase.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.LanguageBase.ServicesManager">
            <summary>
            Returns a <see cref="P:Infragistics.SyntaxParsing.LanguageBase.ServicesManager"/> for managing services for this <see cref="T:Infragistics.SyntaxParsing.LanguageBase">Language</see>.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.LanguageBase.Grammar">
            <summary>
            Returns the associated Grammar.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.LanguageBase.Guid">
            <summary>
            When overridden in a derived class, returns a Guid which uniquely
            identifies this language.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.LanguageBase.SyntaxTreePruningMode">
            <summary>
            Returns a value which indicates whether a non-terminal
            <see cref="T:Infragistics.SyntaxParsing.SyntaxNode">syntax node</see>
            appears in the
            <see cref="T:Infragistics.SyntaxParsing.SyntaxTree">syntax tree</see>
            produced when a document is parsed.
            </summary>
            <remarks>
            <p class="body">
            By default, non-terminal nodes which have only one child, where that child
            is itself a non-terminal node, do not appear in the syntax tree. Non-terminal
            nodes whose name is prefixed with an underscore ('_') also do not appear.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.SyntaxParsing.LanguageBase.SupportsParsing">
            <summary>
            Returns a boolean value indicating whether this language supports parsing.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.EbnfParsingHandler">
            <summary>
            Defines the signature of the method that handles the
            <see cref="E:Infragistics.SyntaxParsing.Grammar.EbnfParsing">EbnfParsing</see>
            event.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.EbnfParsingEventArgs">
            <summary>
            Contains information about the
            <see cref="E:Infragistics.SyntaxParsing.Grammar.EbnfParsing">EbnfParsing</see>
            event.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.EbnfParsingEventArgs.Ebnf">
            <summary>
            Returns or sets a string containing the Ebnf to be imported.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.EbnfParseCompleteHandler">
            <summary>
            Defines the signature of the method that handles the
            <see cref="E:Infragistics.SyntaxParsing.Grammar.EbnfParseComplete">EbnfParseComplete</see>
            event.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.EbnfParseCompleteEventArgs">
            <summary>
            Contains information about the
            <see cref="E:Infragistics.SyntaxParsing.Grammar.EbnfParseComplete">EbnfParseComplete</see>
            event.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.EbnfParseCompleteEventArgs.Grammar">
            <summary>
            Returns a reference to the
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>
            instance resulting from the Ebnf parse operation.
            </summary>
            <remarks>
            <p class="body">
            When an Ebnf script has been successfully parsed,
            this property returns a reference to the resulting
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>
            instance.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Lexer.Initialize(Infragistics.SyntaxParsing.LanguageBase)">
            <summary>
            One-time initialization; should only be called once
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Lexer.StartsWithPattern">
            <summary>
            Returns a dictionary containing the TerminalSymbols which
            begin with a literal string.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Lexer.StartsWithLiteral">
            <summary>
            Returns a dictionary containing the TerminalSymbols which
            begin with a literal string.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Lexer.KeywordComparer.Enabled">
            <summary>
            Returns false if there no keywords, in which case
            this instance does nothing useful.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Lexer.KeywordComparer.IgnoreCase">
            <summary>
            Returns true if any of the keywords have a value of
            'LiteralIgnoreCase' for their Comparison property.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Lexer.KeywordComparer.TerminalSymbolComparer">
            <summary>
            Sorts from longest value to shortest
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Lexer.TripleChar.GetHashCode">
            <summary>
            Returns the hash code of the structure.
            </summary>
            <returns>A hash code for this instance</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Lexer.TripleChar.Equals(System.Object)">
            <summary>
            Compares the specified object to this object to see if they are equivalent.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Lexer.TripleChar.op_Equality(Infragistics.SyntaxParsing.Lexer.TripleChar,Infragistics.SyntaxParsing.Lexer.TripleChar)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.SyntaxParsing.Lexer.TripleChar"/> structures for equality
            </summary>
            <param name="tripleChar1">The first structure</param>
            <param name="tripleChar2">The other structure</param>
            <returns>true if the two instances are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Lexer.TripleChar.op_Inequality(Infragistics.SyntaxParsing.Lexer.TripleChar,Infragistics.SyntaxParsing.Lexer.TripleChar)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.SyntaxParsing.Lexer.TripleChar"/> structures for inequality
            </summary>
            <param name="tripleChar1">The first structure</param>
            <param name="tripleChar2">The other structure</param>
            <returns>true if the two instances are not equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.LexerInfo.Initialize(System.String,System.Int32,System.Boolean,System.Int32,Infragistics.SyntaxParsing.LexerState,System.Int32,System.Collections.Generic.List{Infragistics.SyntaxParsing.LexerToken})">
            <summary>
            Initializes the lexer with the specified state information.
            </summary>
            <param name="input">The string to be lexed. Lexing stops when the end of this string is reached, unless maxLines stops it sooner.</param>
            <param name="charPos">The character position, relative to the beginning of the input string.</param>
            <param name="includeEOS">
            Specifies whether the end of the input string is to be considered
            the end of the document; when true, the end of stream token is added to the last line.
            </param>
            <param name="nextUnconsumed">The next character position, relative to the beginning of the input string, at which the lexer can start looking for tokens which do not consume text (see TerminalSymbol.ConsumesText).</param>
            <param name="lexerState">[optional] The initial lexical state. Null implies the default lexical state.</param>
            <param name="maxLines">The maximum number of lines to return. Lexing stops when this limit is reached, unless the end of the input stream is reached first.</param>
            <param name="beforeTokens">[optional] Recycled tokens which are added to the first line, immediately preceding the first lexed token.</param>
        </member>
        <member name="T:Infragistics.SyntaxParsing.LexerState">
            <summary>
            Defines a lexical state.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.LexerState.AddSymbol(Infragistics.SyntaxParsing.TerminalSymbol)">
            <summary>
            Adds the specified
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            to the list of symbols which belong to this LexerState.
            </summary>
            <param name="symbol">
            The
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            to add.
            </param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.LexerState.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.LexerState.Name">
            <summary>
            Returns the name which uniquely identifies this lexical mode.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.LexerState.Symbols">
            <summary>
            Returns the 
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbols</see>
            which belong to this lexer state.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.LexerState.EnterSymbol">
            <summary>
            Returns the
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            which causes this lexer state to be entered.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.LexerState.ExitSymbol">
            <summary>
            Returns the
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            which causes this lexer state to be exited.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.LexerState.Parent">
            <summary>
            Returns the
            <see cref="T:Infragistics.SyntaxParsing.LexerState">LexerState</see>
            from which this lexer state is opened, or null if this lexer state
            is opened only from the default lexer state.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.LexerState.ExitOnNewLine">
            <summary>
            Returns a boolean value indicating whether the lexer state
            automatically exits when a newline is encountered in the
            input stream.
            </summary>
            <remarks>
            <p class="body">
            In the case where the 
            <see cref="P:Infragistics.SyntaxParsing.LexerState.ExitSymbol">ExitSymbol</see>
            represents a newline, this property is not applicable and behaves as if it
            were set to true.
            </p>
            <p class="body">
            Since the set of tokens generated by most lexer states do not span across lines,
            this property defaults to true. In cases where the lexer state should not exit
            when a newline is encountered, set this property to false.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.SyntaxParsing.LexerState.Id">
            <summary>
            Returns a number which uniquely identifies this
            <see cref="T:Infragistics.SyntaxParsing.Symbol">Symbol</see>.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.LexerStatesCollection">
            <summary>
            Collection class for
            <see cref="T:Infragistics.SyntaxParsing.LexerState">lexer states</see>.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.LexerStatesCollection.Add(System.String)">
            <summary>
            Adds a new
            <see cref="T:Infragistics.SyntaxParsing.LexerState">LexerState</see>
            to this collection.
            </summary>
            <param key="name">
            The value of the
            <see cref="P:Infragistics.SyntaxParsing.LexerState.Name">Name</see>
            property.
            </param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.LexerStatesCollection.Remove(System.String)">
            <summary>
            Removes the specified
            <see cref="T:Infragistics.SyntaxParsing.LexerState">LexerState</see>
            from this collection.
            </summary>
            <param key="name">
            The value of the
            <see cref="P:Infragistics.SyntaxParsing.LexerState.Name">Name</see>
            property of the lexer state to remove.
            </param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.LexerStatesCollection.Clear">
            <summary>
            Removes all members from this collection.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.LexerStatesCollection.Exists(Infragistics.SyntaxParsing.LexerState)">
            <summary>
            Returns a boolean value indicating whether the specified
            <see cref="T:Infragistics.SyntaxParsing.LexerState">LexerState</see>
            exists within this collection.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.LexerStatesCollection.Exists(System.String)">
            <summary>
            Returns a boolean value indicating whether a
            <see cref="T:Infragistics.SyntaxParsing.LexerState">LexerState</see>
            with the specified <paramref key="value"/>
            exists within this collection.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.LexerStatesCollection.Exists(System.String,Infragistics.SyntaxParsing.LexerState@)">
            <summary>
            Returns a boolean value indicating whether a
            <see cref="T:Infragistics.SyntaxParsing.LexerState">LexerState</see>
            with the specified <paramref key="value"/>
            exists within this collection.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.LexerStatesCollection.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.LexerStatesCollection.Item(System.String)">
            <summary>
            Returns the instance with the specified <paramref key="name"/>.
            </summary>
            <param key="name">
            The
            <see cref="P:Infragistics.SyntaxParsing.LexerState.Name">Name</see>
            of the lexer state to return.
            </param>
        </member>
        <member name="P:Infragistics.SyntaxParsing.LexerStatesCollection.Item(System.Int32)">
            <summary>
            Returns the instance with the specified <paramref key="id"/>.
            </summary>
            <param key="id">
            The
            <see cref="P:Infragistics.SyntaxParsing.LexerState.Id">Id</see>
            of the symbol to return.
            </param>
            <seealso cref="P:Infragistics.SyntaxParsing.LexerState.Id">Id property (LexerState class)</seealso>
        </member>
        <member name="P:Infragistics.SyntaxParsing.LexerStatesCollection.Count">
            <summary>
            Returns the number of elements in this collection.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.LexerToken">
            <summary>
            Encapsulates the properties of a token produced during lexical analysis.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.LexerToken.Equals(System.Object)">
            <summary>
            Compares the specified object to this object to see if they are equivalent.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.LexerToken.GetHashCode">
            <summary>
            Returns the hash code of the object.
            </summary>
            <returns>A hash code for this instance</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.LexerToken.op_Equality(Infragistics.SyntaxParsing.LexerToken,Infragistics.SyntaxParsing.LexerToken)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.SyntaxParsing.LexerToken"/> structures for equality
            </summary>
            <param name="token1">The first structure</param>
            <param name="token2">The other structure</param>
            <returns>true if the two instances are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.LexerToken.op_Inequality(Infragistics.SyntaxParsing.LexerToken,Infragistics.SyntaxParsing.LexerToken)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.SyntaxParsing.LexerToken"/> structures for inequality
            </summary>
            <param name="token1">The first structure</param>
            <param name="token2">The other structure</param>
            <returns>true if the two instances are not equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.LexerToken.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.LexerToken.Length">
            <summary>
            Returns the length of the string which this token represents.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.LexerToken.Text">
            <summary>
            Returns the text which this token represents.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.LexerToken.LexerStateId">
            <summary>
            Returns the
            <see cref="P:Infragistics.SyntaxParsing.LexerState.Id">Id</see>
            of the
            <see cref="T:Infragistics.SyntaxParsing.LexerState">LexerState</see>
            which defines the state for which this token was produced.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.LexerToken.LexerState">
            <summary>
            Returns the
            <see cref="T:Infragistics.SyntaxParsing.LexerState">LexerState</see>
            which defines the lexical state for which this token was produced,
            or null if the token was produced for the default lexical state.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.LexerToken.IsEmpty">
            <summary>
            Returns a boolean value indicating whether this token is empty.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.LexerToken.IsMissing">
            <summary>
            Returns a boolean value indicating whether this token is missing.
            </summary>
            <remarks>
            <p class="body">
            When a lexer state has been entered, and a newline is encountered
            before the symbol which exits that lexer state, the token which is
            expected to exit that lexer state is then known to be missing. In this
            case, a LexerToken is created for that exit symbol, with a zero length,
            and returned from the GetNextToken method. Such tokens are considered
            to be missing.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.SyntaxParsing.LexerToken.TerminalSymbolId">
            <summary>
            Returns the
            <see cref="P:Infragistics.SyntaxParsing.Symbol.Id">Id</see>
            of the
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            which produced this token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.LexerToken.TerminalSymbol">
            <summary>
            Returns the
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            which produced this token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.LexerToken.Language">
            <summary>
            Returns the
            <see cref="T:Infragistics.SyntaxParsing.LanguageBase">LanguageBase</see>
            derived language for which this token was produced.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.IParseError">
            <summary>
            Implemented by tokens or nodes which represent a parse error.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.IParseError.CharacterPosition">
            <summary>
            Returns the zero-based character position, relative to the
            first character of the text being parsed, at which this token appears.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.IParseError.Text">
            <summary>
            Returns the string value that was matched to produce this token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.IParseError.Description">
            <summary>
            Returns a human-readable message describing the error.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.IParseError.LineNumber">
            <summary>
            Returns the one-based line number at which this token appears,
            as relative to the first character in the input text.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.IParseError.Column">
            <summary>
            Returns the one-based column number at which this token appears,
            as relative to the first character of the line containing the token.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.LineInfo">
            <summary>
            Represents all the tokens in a line.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.LineInfo.Equals(System.Object)">
            <summary>
            Compares the specified object to this object to see if they are equivalent.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.LineInfo.GetHashCode">
            <summary>
            Returns the hash code of the object.
            </summary>
            <returns>A hash code for this instance</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.LineInfo.op_Equality(Infragistics.SyntaxParsing.LineInfo,Infragistics.SyntaxParsing.LineInfo)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.SyntaxParsing.LineInfo"/> structures for equality
            </summary>
            <param name="line1">The first structure</param>
            <param name="line2">The other structure</param>
            <returns>true if the two instances are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.LineInfo.op_Inequality(Infragistics.SyntaxParsing.LineInfo,Infragistics.SyntaxParsing.LineInfo)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.SyntaxParsing.LineInfo"/> structures for inequality
            </summary>
            <param name="line1">The first structure</param>
            <param name="line2">The other structure</param>
            <returns>true if the two instances are not equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.LineInfo.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>A string that represents this <see cref="T:Infragistics.SyntaxParsing.LineInfo"/></returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.LineInfo.GetCharacter(System.Int32)">
            <summary>
            Returns the character at a specific offset in the line.
            </summary>
            <param name="charOffset">The zero-based offset of the character from the beginning of the line.</param>
            <returns>The character in question.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If charOffset is less than 0 or greater than or equal to <see cref="P:Infragistics.SyntaxParsing.LineInfo.Length"/>.</exception>
        </member>
        <member name="M:Infragistics.SyntaxParsing.LineInfo.GetText(System.Boolean)">
            <summary>
            Returns the concatenated text from all the tokens that make up the line
            </summary>
            <param name="includeLineFeed">If true the returned string will include any carriage return/line feed characters at the end of the line.</param>
            <returns>A string representing the complete text of the line.</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.LineInfo.GetTokenAtIndex(System.Int32)">
            <summary>
            Returns the token at a specific index.
            </summary>
            <param name="tokenIndex">The zero-based index of the token.</param>
            <returns>The token in question.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If tokenIndex is less than 0 or greater than or equal to <see cref="P:Infragistics.SyntaxParsing.LineInfo.TokenCount"/>.</exception>
        </member>
        <member name="M:Infragistics.SyntaxParsing.LineInfo.GetTokenAtOffset(System.Int32,System.Boolean)">
            <summary>
            Returns the token that contains a specific character.
            </summary>
            <param name="charOffset">The zero-based offset of the character from the beginning of the line.</param>
            <param name="includeZeroLengthTokens">If true will return the first at the offset even if it has no length.</param>
            <returns>The token in question.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If charOffset is less than 0 or greater than or equal to <see cref="P:Infragistics.SyntaxParsing.LineInfo.Length"/>.</exception>
        </member>
        <member name="M:Infragistics.SyntaxParsing.LineInfo.IndexOf(Infragistics.SyntaxParsing.Token)">
            <summary>
            Returns the zero-based index of a token.
            </summary>
            <param name="token">The token to test.</param>
            <returns>The zero-based index or -1 if the token is not in the line.</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.LineInfo.IsSameAs(Infragistics.SyntaxParsing.LineInfo)">
            <summary>
            Returns true if the specified <see cref="T:Infragistics.SyntaxParsing.LineInfo"/> represents the same line content.
            </summary>
            <param name="lineInfo">The <see cref="T:Infragistics.SyntaxParsing.LineInfo"/> to check.</param>
            <returns>True if the specified <see cref="T:Infragistics.SyntaxParsing.LineInfo"/> represents the same line content, otherwise false.</returns>
        </member>
        <member name="P:Infragistics.SyntaxParsing.LineInfo.Length">
            <summary>
            Returns the length of all the text in the line including charriage return and line feed characters. (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.LineInfo.LineIndex">
            <summary>
            Returns the zero-based index of the line (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.LineInfo.LineNumber">
            <summary>
            Returns the 1-based line number (read-only).
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> this is one more than the <see cref="P:Infragistics.SyntaxParsing.LineInfo.LineIndex"/> value.</para>
            </remarks>
        </member>
        <member name="P:Infragistics.SyntaxParsing.LineInfo.OverallOffset">
            <summary>
            Returns the zero-based offset of this line from the beginning of the document (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.LineInfo.TokenCount">
            <summary>
            Returns the total number of tokens in the line including the line terminator token (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.LineInfo.TextLength">
            <summary>
            Returns the length of all the text in the line excluding carriage return and line feed characters. (read-only).
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.NonTerminalSymbolsCollection">
            <summary>
            Collection class for
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">terminal symbols</see>.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.NonTerminalSymbolsCollection.Add(System.String)">
            <summary>
            Adds a new
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>
            to this collection
            </summary>
            <param key="key">
            The value of the
            <see cref="P:Infragistics.SyntaxParsing.Symbol.Name">Name</see>
            property.
            </param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.NonTerminalSymbolsCollection.Remove(System.String)">
            <summary>
            Removes the specified
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>
            from this collection.
            </summary>
            <param key="key">
            The value of the
            <see cref="P:Infragistics.SyntaxParsing.Symbol.Name">Name</see>
            property of the symbol to remove.
            </param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.NonTerminalSymbolsCollection.Clear">
            <summary>
            Removes all members from this collection.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.NonTerminalSymbolsCollection.Exists(Infragistics.SyntaxParsing.NonTerminalSymbol)">
            <summary>
            Returns a boolean value indicating whether the specified
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>
            exists within this collection.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.NonTerminalSymbolsCollection.Exists(System.String)">
            <summary>
            Returns a boolean value indicating whether a
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>
            with the specified <paramref key="key"/>
            exists within this collection.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.NonTerminalSymbolsCollection.Exists(System.String,Infragistics.SyntaxParsing.NonTerminalSymbol@)">
            <summary>
            Returns a boolean value indicating whether a
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>
            with the specified <paramref key="key"/>
            exists within this collection.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.NonTerminalSymbolsCollection.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.NonTerminalSymbolsCollection.Item(System.String)">
            <summary>
            Returns the instance with the specified <paramref key="value"/>
            </summary>
            <param key="key">
            The
            <see cref="P:Infragistics.SyntaxParsing.Symbol.Name">Name</see>
            of the symbol to return.
            </param>
        </member>
        <member name="P:Infragistics.SyntaxParsing.NonTerminalSymbolsCollection.Item(System.Int32)">
            <summary>
            Returns the instance with the specified <paramref key="id"/>.
            </summary>
            <param key="id">
            The
            <see cref="P:Infragistics.SyntaxParsing.Symbol.Id">Id</see>
            of the symbol to return.
            </param>
            <seealso cref="P:Infragistics.SyntaxParsing.Symbol.Id">Id property (Symbol class)</seealso>
        </member>
        <member name="P:Infragistics.SyntaxParsing.NonTerminalSymbolsCollection.Count">
            <summary>
            Returns the number of elements in this collection.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.NonTerminalSymbol">
            <summary>
            A grammar
            <see cref="T:Infragistics.SyntaxParsing.Symbol">symbol</see>
            which is composed of some combination of terminal and
            nonterminal symbols; also known as a <i>syntactic variable</i>.
            </summary>
            <remarks>
            <p class="body">
            A non-terminal symbol is basically a container for production rules and
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">terminal symbols</see>.
            The rule tree defined by a non-terminal symbol can be placed at multiple
            locations within the rule tree, providing a mechanism by which to avoid
            duplication of logic.
            </p>
            <p class="body">
            Consider the C# programming language concept of identifiers. Syntactic
            rules apply to what constitutes a valid identifier - it must begin with
            either an alphabetic character or underscore, followed by the same or one
            or more integers, and not be a keyword. In order to define a production
            rule that unambiguously identifies such strings, several criteria are
            necessary; the resulting rule tree looks something like this:
            Identifier
            -&gt; Concatenation
                -&gt; Matches regex pattern "^[a-zA-Z_][a-zA-Z0-9_]*"
                -&gt; NotAKeyword
                   -&gt; Negation
                      -&gt; Alternation
                         -&gt; "using"
                         -&gt; "namespace"
                         -&gt; "class"
                         -&gt; "public|private|protected|internal"
                         -&gt; ...
            As evidenced by the above example, a fairly extensive rule hierarchy is
            necessary to express even something as simple as an identifier. Considering
            that a full definition for the C# programming language requires checks for
            an identifier in dozens or perhaps hundreds of places within the rule tree,
            the benefit of providing a means by which a "shortcut" form of expression
            can be used is evident.
            </p>
            </remarks>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Symbol">
            <summary>
            Encapsulates a symbol for the associated
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Symbol.Name">
            <summary>
            Returns the name of the symbol.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Symbol.Id">
            <summary>
            Returns a number which uniquely identifies this
            <see cref="T:Infragistics.SyntaxParsing.Symbol">Symbol</see>.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.NonTerminalSymbol.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.NonTerminalSymbol.Grammar">
            <summary>
            Returns a reference to the associated
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.NonTerminalSymbol.Rules">
            <summary>
            Returns a collection of
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRule">SyntaxRule</see>
            instances which describe the syntax rules for this
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>.
            </summary>
            <remarks>
            <p class="body">
            The syntax for a grammar is defined by its production rules; the
            production rules for a grammar are exposed via the Rules collection
            of the grammar's
            <see cref="P:Infragistics.SyntaxParsing.Grammar.StartSymbol">StartSymbol</see>.
            </p>
            <p class="body">
            The grammar's
            <see cref="P:Infragistics.SyntaxParsing.Grammar.StartSymbol">StartSymbol</see>
            property references a NonTerminalSymbol which defines the starting
            point for parse operations. The order in which these rules are evaluated
            is determined by the contents of this collection. Each rule therein is
            analyzed by recursively analyzing descendant rules until a
            <see cref="T:Infragistics.SyntaxParsing.TerminalRule">TerminalRule</see>
            is encountered. A TerminalRule has no rules of its own; its purpose
            is to perform the actual parsing to determine whether the current input
            is valid.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.SyntaxParsing.NonTerminalSymbol.IsStartSymbol">
            <summary>
            Returns a boolean value indicating whether this instance is assigned to the
            <see cref="P:Infragistics.SyntaxParsing.Grammar.StartSymbol">StartSymbol</see>
            property of the associated Grammar.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.NonTerminalSymbol.HasPriority">
            <summary>
            Returns or sets a boolean value indicating whether this non-terminal
            has priority over another non-terminal in cases where the two
            are ambiguous.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.NonTerminalSymbol.FirstTerminalDescriptor.IsLeftRecursive(Infragistics.SyntaxParsing.NonTerminalSymbol,System.Boolean@)">
            <summary>
            Returns a boolean value indicating whether the specified
            NonTerminalSymbol refers to this one in a left-recursive
            manner, i.e., rules that refer back to it.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.NonTerminalSymbol.FirstTerminalDescriptor.FirstTerminalRule">
            <summary>
            Returns the first TerminalSymbol in this NonTerminalSymbol's rule tree.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Parser.LALRParser.Production.ToString(Infragistics.SyntaxParsing.NonTerminalSymbol)">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Parser.LALRParser.Production.IsEpsilon">
            <summary>
            Returns a boolean value indicating whether this production
            consists solely of one epsilon term.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Internal.ISyntaxNode.SymbolId">
            <summary>
            Returns the
            <see cref="P:Infragistics.SyntaxParsing.Symbol.Id">Id</see>
            of the
            <see cref="T:Infragistics.SyntaxParsing.Symbol">Symbol</see>
            which produced this Node.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Internal.ISyntaxNode.ParseData">
            <summary>
            Returns an unsigned short integer which contains the current state
            at the time this node was created; used to support incremental parsing
            and error handling.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Internal.NonTerminalSyntaxNode.ToImmutable">
            <summary>
            Gets the immutable equivalent of this node or this node if it is already immutable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Internal.NonTerminalSyntaxNode.ToString">
            <summary>
            The string representation of the node including surrounding whitespace.
            </summary>
            <returns>A string representation of the token.</returns>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Internal.NonTerminalSyntaxNode.HasErrors">
            <summary>
            Returns whether this is an error (read-only) 
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Internal.NonTerminalSyntaxNode.SymbolId">
            <summary>
            Returns the
            <see cref="P:Infragistics.SyntaxParsing.Symbol.Id">Id</see>
            of the
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>
            which produced this token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Internal.NonTerminalSyntaxNode.ArrayBased.HasErrors">
            <summary>
            Returns whether this is an error (read-only) 
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Internal.NonTerminalSyntaxNode.ListBased.HasErrors">
            <summary>
            Returns whether this is an error (read-only) 
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Internal.NonTerminalSyntaxNode.ThreadSafeArrayBased.HasErrors">
            <summary>
            Returns whether this is an error (read-only) 
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Internal.NonTerminalSyntaxNode.ThreadSafeArrayBased.NodeContainer.HasErrors">
            <summary>
            Returns whether this is an error (read-only) 
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Parser.LALRParser.ProductionTable.Item(Infragistics.SyntaxParsing.NonTerminalSymbol)">
            <summary>
            Returns the NonTerminal corresponding to the specified NonTerminalSymbol
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Parser.LALRParser.ProductionTable.Item(System.Int32)">
            <summary>
            Indexer which consolidates the grammar's NonTerminalSymbols collection
            and the table which contains repetition rules.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Parser.LALRParser.ProductionTable.Table">
            <summary>
            Returns the table which provides lookup for NonTerminals from NonTerminalSymbols.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.SyntaxError">
            <summary>
            Encapsulates a syntax error within a
            <see cref="T:Infragistics.SyntaxParsing.SyntaxTree">SyntaxTree</see>.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxError.Equals(System.Object)">
            <summary>
            Compares the specified object to this object to see if they are equivalent.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxError.GetHashCode">
            <summary>
            Returns the hash code of the object.
            </summary>
            <returns>A hash code for this instance</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxError.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.SyntaxError.Description">
            <summary>
            Returns a human-readable description for this error.
            </summary>
            <seealso cref="M:Infragistics.SyntaxParsing.LanguageBase.GetErrorAlias(Infragistics.SyntaxParsing.Symbol)">GetErrorAlias</seealso>
        </member>
        <member name="P:Infragistics.SyntaxParsing.SyntaxError.Symbol">
            <summary>
            Returns a reference to the grammar
            <see cref="T:Infragistics.SyntaxParsing.Symbol">symbol</see>
            for which a token was expected to be found.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.SyntaxError.IsMissing">
            <summary>
            Returns a boolean value indicating whether the reason for
            this error was a missing token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.SyntaxError.Node">
            <summary>
            Returns the associated <see cref="T:Infragistics.SyntaxParsing.SyntaxNode"/> (read-only).
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.SyntaxNode">
            <summary>
            A class that represents a node in the parse tree.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxNode.Equals(System.Object)">
            <summary>
            Compares the specified object to this object to see if they are equivalent.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxNode.GetHashCode">
            <summary>
            Returns the hash code of the object.
            </summary>
            <returns>A hash code for this instance</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxNode.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxNode.AncestorNodes(System.Boolean)">
            <summary>
            Returns an object that can return an enumerator for all ancestor nodes of this node
            </summary>
            <param name="includeSelf">True to return this node first from the enumeration.</param>
            <returns>An object that can return an enumerator for all ancestor nodes of this node.</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxNode.ChildNodes(System.Nullable{Infragistics.SyntaxParsing.TextSpan},System.Func{Infragistics.SyntaxParsing.SyntaxNode,System.Boolean},System.Boolean)">
            <summary>
            Returns an object that can return an enumerator for all direct child nodes of this node
            </summary>
            <param name="span">An optinal span to restrict the result. The span offset is relative to the beginning of the document.</param>
            <param name="filter">A function that can decide which child nodes get returned from the enumerator.</param>
            <param name="enumerateBackwards">True to enumerate from last to first child node.</param>
            <returns>An object that can return an enumerator for all direct child nodes of this node.</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxNode.DescendantErrors(System.Nullable{Infragistics.SyntaxParsing.TextSpan},System.Boolean)">
            <summary>
            Returns an object that can return an enumerator for all descendant SyntaxErrors of this node
            </summary>
            <param name="span">An optinal span to restrict the result. The span offset is relative to the beginning of the document.</param>
            <param name="enumerateBackwards">True to enumerate from last to first descendant node.</param>
            <returns>An object that can return an enumerator for all descendant SyntaxErrors of this node.</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxNode.DescendantNodes(System.Nullable{Infragistics.SyntaxParsing.TextSpan},System.Func{Infragistics.SyntaxParsing.SyntaxNode,Infragistics.SyntaxParsing.SyntaxNodeFilterAction},System.Boolean)">
            <summary>
            Returns an object that can return an enumerator for all descendant nodes of this node
            </summary>
            <param name="span">An optinal span to restrict the result. The span offset is relative to the beginning of the document.</param>
            <param name="filter">A function that can decide which descendant nodes get returned from the enumerator.</param>
            <param name="enumerateBackwards">True to enumerate from last to first descendant node.</param>
            <returns>An object that can return an enumerator for all descendant nodes of this node.</returns>
            <seealso cref="T:Infragistics.SyntaxParsing.SyntaxNodeFilterAction">SyntaxNodeFilterAction</seealso>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxNode.GetChildNodeAtIndex(System.Int32)">
            <summary>
            Returns the child node at a specific index.
            </summary>
            <param name="childIndex">The zero based indes of the child</param>
            <returns>The child node.</returns>
            <exception cref="T:System.IndexOutOfRangeException">if childIndex is less than 0 ot greater than or equal to the <see cref="P:Infragistics.SyntaxParsing.SyntaxNode.ChildNodeCount"/></exception>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxNode.GetError">
            <summary>
            Returns a
            <see cref="T:Infragistics.SyntaxParsing.SyntaxError">SyntaxError</see>
            object which contains information about the syntax error associated
            with this node, or null if this node does not represent an error.
            </summary>
            <returns>
            A
            <see cref="T:Infragistics.SyntaxParsing.SyntaxError">SyntaxError</see>
            instance or null.
            </returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxNode.GetFirstTerminalNode">
            <summary>
            Returns the first terminal node in this node's tree.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> if this node is a terminal node then this method will return itself.</para>
            </remarks>
            <returns>The first node in this node's tree that is a terminal node.</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxNode.GetLastTerminalNode">
            <summary>
            Returns the last terminal node in this node's tree.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> if this node is a terminal node then this method will return itself.</para>
            </remarks>
            <returns>The last node in this node's tree that is a terminal node.</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxNode.GetText(System.Boolean)">
            <summary>
            Returns the text of this node and all of its descendants.
            </summary>
            <param name="includeLeadingWhitespace">If true will include the leading whitespace of the first descendant <see cref="T:Infragistics.SyntaxParsing.SyntaxNode"/>.</param>
            <returns>The reconstructed string contains all of the descendant <see cref="T:Infragistics.SyntaxParsing.SyntaxNode"/>s concatenated.</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxNode.GetChildEnumerator(System.Nullable{Infragistics.SyntaxParsing.TextSpan},System.Func{Infragistics.SyntaxParsing.SyntaxNode,System.Boolean},System.Boolean)">
            <summary>
            Returns an object to enumerate all direct child nodes of this node
            </summary>
            <param name="span">An optinal span to restrict the result. The span offset is relative to the beginning of the document.</param>
            <param name="filter">A function that can decide which child nodes get returned from the enumerator.</param>
            <param name="enumerateBackwards">True to enumerate from last to first child node.</param>
            <returns>An object that can enumerate all direct child nodes of this node in order.</returns>
        </member>
        <member name="P:Infragistics.SyntaxParsing.SyntaxNode.ChildNodeCount">
            <summary>
            Returns the count of child nodes (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.SyntaxNode.HasErrors">
            <summary>
            Returns true if this is a terminal node that has a syntax error or a non-terminal node that has descendant errors (read-only).
            </summary>
            <seealso cref="P:Infragistics.SyntaxParsing.SyntaxNode.IsErrorNode"/>
            <seealso cref="M:Infragistics.SyntaxParsing.SyntaxNode.DescendantErrors(System.Nullable{Infragistics.SyntaxParsing.TextSpan},System.Boolean)"/>
        </member>
        <member name="P:Infragistics.SyntaxParsing.SyntaxNode.Index">
            <summary>
            Returns the zero-based index of this node in its <see cref="P:Infragistics.SyntaxParsing.SyntaxNode.Parent"/>'s children (read-only).
            </summary>
            <value>-1 for the root node, otherwise the zero-based index of this node in its parent's children.</value>
        </member>
        <member name="P:Infragistics.SyntaxParsing.SyntaxNode.IsTerminalNode">
            <summary>
            Returns whether this is a terminal node (i.e. it has no child nodes) (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.SyntaxNode.IsErrorNode">
            <summary>
            Returns whether this is a terminal node that has a syntax error.
            </summary>
            <seealso cref="P:Infragistics.SyntaxParsing.SyntaxNode.HasErrors"/>
            <seealso cref="M:Infragistics.SyntaxParsing.SyntaxNode.GetError"/>
        </member>
        <member name="P:Infragistics.SyntaxParsing.SyntaxNode.Language">
            <summary>
            Returns the associated Language (read-only) 
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.SyntaxNode.LeadingTriviaLength">
            <summary>
            Returns the number of insignificant characters before the node (read-only).
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> LeadingTriviaLength is included in <see cref="P:Infragistics.SyntaxParsing.SyntaxNode.Length"/></para>
            </remarks>
        </member>
        <member name="P:Infragistics.SyntaxParsing.SyntaxNode.Length">
            <summary>
            Returns the aggregate string length (read-only) 
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.SyntaxNode.OverallOffset">
            <summary>
            Returns the overall offset of the node within the entire tree (read-only) 
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.SyntaxNode.Parent">
            <summary>
            Returns the parent node (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.SyntaxNode.RelativeOffset">
            <summary>
            Returns the relatve offset of the node within its parent node (read-only) 
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.SyntaxNode.Snapshot">
            <summary>
            Returns the snapshot that created this node (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.SyntaxNode.SnapshotSpan">
            <summary>
            Returns the <see cref="P:Infragistics.SyntaxParsing.SyntaxNode.TextSpan"/> within the <see cref="T:Infragistics.Documents.TextDocument"/> occupied by this <see cref="T:Infragistics.SyntaxParsing.SyntaxNode"/> (read-only)
            </summary>
            <value>A SnapshotSpan that represents this node minus any leading trivia (see <see cref="P:Infragistics.SyntaxParsing.SyntaxNode.LeadingTriviaLength"/>) </value>
        </member>
        <member name="P:Infragistics.SyntaxParsing.SyntaxNode.Symbol">
            <summary>
            Returns the
            <see cref="T:Infragistics.SyntaxParsing.Symbol">Symbol</see>
            which produced this token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.SyntaxNode.SymbolId">
            <summary>
            Returns the
            <see cref="P:Infragistics.SyntaxParsing.Symbol.Id">Id</see>
            of the
            <see cref="T:Infragistics.SyntaxParsing.Symbol">Symbol</see>
            which produced this token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.SyntaxNode.TextSpan">
            <summary>
            Returns the <see cref="P:Infragistics.SyntaxParsing.SyntaxNode.TextSpan"/> within the <see cref="T:Infragistics.Documents.TextDocument"/> occupied by this <see cref="T:Infragistics.SyntaxParsing.SyntaxNode"/> (read-only)
            </summary>
            <value>A TextSpan that represents this node minus any leading trivia (see <see cref="P:Infragistics.SyntaxParsing.SyntaxNode.LeadingTriviaLength"/>) </value>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Internal.TerminalSyntaxNode.#ctor(Infragistics.SyntaxParsing.LexerToken,System.UInt16)">
            <summary>Creates a new instance of the class.</summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Internal.TerminalSyntaxNode.ToString">
            <summary>
            The string representation of the node including surrounding whitespace.
            </summary>
            <returns>A string representation of the token.</returns>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Internal.TerminalSyntaxNode.HasErrors">
            <summary>
            Returns whether this is an error (read-only) 
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Internal.TerminalSyntaxNode.Length">
            <summary>
            Returns the aggregate string length including <see cref="P:Infragistics.SyntaxParsing.Internal.TerminalSyntaxNode.LeadingTriviaLength"/> (read-only) 
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Internal.TerminalSyntaxNode.NodeCount">
            <summary>
            Returns the aggregate number of nodes (read-only) 
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Internal.TerminalSyntaxNode.SymbolId">
            <summary>
            Returns the
            <see cref="P:Infragistics.SyntaxParsing.Symbol.Id">Id</see>
            of the
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">TerminalSymbol</see>
            which produced this node.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Internal.TerminalSyntaxNode.LeadingTriviaLength">
            <summary>
            Returns the number of insignificant characters before the token (read-only).
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> this offset is included in the <see cref="P:Infragistics.SyntaxParsing.Internal.TerminalSyntaxNode.Length"/></para>
            </remarks>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Internal.TerminalSyntaxNode.Token">
            <summary>
            Returns the token (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Internal.TerminalSyntaxNode.TokenWithLeadingOffset.LeadingTriviaLength">
            <summary>
            Returns the number of insignificant characters before the token (read-only).
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Internal.ErrorSyntaxNode.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Internal.ErrorSyntaxNode.HasErrors">
            <summary>
            Returns whether this is an error (read-only) 
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Internal.ErrorSyntaxNode.LeadingTriviaLength">
            <summary>
            Returns the number of insignificant characters before the token (read-only).
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.SyntaxRulesCollection">
            <summary>
            Contains instances of the
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRule">SyntaxRule</see>
            class.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxRulesCollection.IndexOf(Infragistics.SyntaxParsing.NonTerminalSymbol)">
            <summary>
            Returns the index of the rule associated with the specified
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>,
            or -1 if no such rule exists
            </summary>
            <param key="nonTerminalSymbol">
            The
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>
            to locate.
            </param>
            <returns>The index or -1.</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxRulesCollection.IndexOf(Infragistics.SyntaxParsing.TerminalSymbol)">
            <summary>
            Returns the index of the rule associated with the specified
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>,
            or -1 if no such rule exists
            </summary>
            <param key="terminalSymbol">
            The
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            to locate.
            </param>
            <returns>The index or -1.</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxRulesCollection.AddAlternationRule">
            <summary>
            Adds a new
            <see cref="T:Infragistics.SyntaxParsing.AlternationRule">AlternationRule</see>
            to this collection.
            </summary>
            <returns>
            The created
            <see cref="T:Infragistics.SyntaxParsing.AlternationRule">AlternationRule</see>.
            </returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxRulesCollection.AddConcatenationRule">
            <summary>
            Adds a new
            <see cref="T:Infragistics.SyntaxParsing.ConcatenationRule">ConcatenationRule</see>
            to this collection.
            </summary>
            <returns>
            The created
            <see cref="T:Infragistics.SyntaxParsing.ConcatenationRule">ConcatenationRule</see>.
            </returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxRulesCollection.AddNegationRule">
            <summary>
            Adds a new
            <see cref="T:Infragistics.SyntaxParsing.NegationRule">NegationRule</see>
            to this collection.
            </summary>
            <returns>
            The created
            <see cref="T:Infragistics.SyntaxParsing.NegationRule">NegationRule</see>.
            </returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxRulesCollection.AddOptionalRule">
            <summary>
            Adds a new
            <see cref="T:Infragistics.SyntaxParsing.OptionalRule">OptionalRule</see>
            to this collection.
            </summary>
            <returns>
            The created
            <see cref="T:Infragistics.SyntaxParsing.OptionalRule">OptionalRule</see>.
            </returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxRulesCollection.AddRepetitionRule(System.Int32)">
            <summary>
            Adds a new
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRule">SyntaxRule</see>
            to this collection with a
            <see cref="P:Infragistics.SyntaxParsing.SyntaxRuleBase.RuleType">RuleType</see>
            of 'Repetition'.
            </summary>
            <param key="repetitions">
            The repetition factor, i.e., the exact number of times each sub-rule
            must be satisfied in order for the rule to be satisfied.
            </param>
            <returns>
            The created
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRule">SyntaxRule</see>.
            </returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxRulesCollection.AddRepetitionRule(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Adds a new
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRule">SyntaxRule</see>
            to this collection with a
            <see cref="P:Infragistics.SyntaxParsing.SyntaxRuleBase.RuleType">RuleType</see>
            of 'Repetition'.
            </summary>
            <param key="minimumOccurrences">
            The minimum repetition factor, i.e., the minimum number of times each sub-rule
            must be satisfied in order for the rule to be satisfied.
            </param>
            <param key="maximumOccurrences">
            The maximum repetition factor, i.e., the maximum number of times each sub-rule
            must be satisfied in order for the rule to be satisfied. Specify null for no
            limit, i.e., any number of occurrences satisifies the rule, provided that the
            minimum number of occurrences is satisfied.
            </param>
            <returns>
            The created
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRule">SyntaxRule</see>.
            </returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxRulesCollection.AddConjunctionRule">
            <summary>
            Adds a new
            <see cref="T:Infragistics.SyntaxParsing.ConjunctionRule">ConjunctionRule</see>
            to this collection.
            </summary>
            <returns>
            The created
            <see cref="T:Infragistics.SyntaxParsing.ConjunctionRule">ConjunctionRule</see>.
            </returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxRulesCollection.AddTerminalRule(Infragistics.SyntaxParsing.TerminalSymbol)">
            <summary>
            Adds a new
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRule">SyntaxRule</see>
            to this collection with a
            <see cref="P:Infragistics.SyntaxParsing.SyntaxRuleBase.RuleType">RuleType</see>
            of 'Terminal'.
            </summary>
            <param key="factor">
            The 
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            associated with the rule.
            </param>
            <returns>
            The created
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRule">SyntaxRule</see>.
            </returns>
            <remarks>
            <p class="body">
            A terminal rule represents the endpoint of a production rule.
            The terminal rule attempts to parse the input and if the attempt
            is successful, the matching characters are consumed and parsing
            continues. If the attempt fails, the parent rule is notified and
            determines whether an error is logged.
            </p>
            <p class="body">
            A terminal rule cannot have sub-rules; attempting to add members to
            the Rules collection of a SyntaxRule whose RuleType returns 'Terminal'
            results in an exception being thrown.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxRulesCollection.AddNonTerminalRule(Infragistics.SyntaxParsing.NonTerminalSymbol)">
            <summary>
            Adds a new
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalRule">NonTerminalRule</see>
            to this collection.
            </summary>
            <param key="factor">
            The 
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>
            associated with the rule.
            </param>
            <returns>
            The created
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalRule">NonTerminalRule</see>.
            </returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxRulesCollection.Clear">
            <summary>
            Removes all elements from this collection.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxRulesCollection.Remove(Infragistics.SyntaxParsing.SyntaxRule)">
            <summary>
            Removes the specified rule from this collection.
            </summary>
            <param key="rule">The SyntaxRule to remove.</param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxRulesCollection.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.SyntaxRulesCollection.Item(System.Int32)">
            <summary>
            Returns the
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleBase">rule</see>
            at the specified <paramref key="index"/>.
            </summary>
            <param key="index">The ordinal position of the rule within this collection.</param>
        </member>
        <member name="P:Infragistics.SyntaxParsing.SyntaxRulesCollection.Count">
            <summary>
            Returns the number of elements in this collection.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.SyntaxRule">
            <summary>
            Encapsulates a syntactic rule for the associated
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.SyntaxRuleBase">
            <summary>
            Base class for
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRule">syntax rules</see>
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxRuleBase.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxRuleBase.GetRules">
            <summary>
            This method supports the Infragistics infrastructure and should
            not be called by your code.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.SyntaxRuleBase.RuleType">
            <summary>
            Returns the
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleType">SyntaxRuleType</see>
            constant which determines the behavior for this syntax rule.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.SyntaxRuleBase.Root">
            <summary>
            Returns the
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>
            whose rule tree contains this rule.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxRule.GetRules">
            <summary>
            This method supports the Infragistics infrastructure and should
            not be called by your code.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.SyntaxRule.Rules">
            <summary>
            Returns a collection of
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleBase">SyntaxRuleBase</see>-derived
            objects which represent the sub-rules for this
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRule">rule</see>.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.AlternationRule">
            <summary>
            Class which encapsulates the behavior of the
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleType">Alternation</see>
            syntax rule.
            </summary>
            <remarks>
            <p class="body">
            An AlternationRule is used to ensure that one of a group of tokens appear
            at the current position in the input stream.
            For example, an AlternationRule with three TerminalRules, 'A', 'B', and 'C',
            in its Rules collection, expects the input stream to contain any one of those
            three characters. If any one of the characters are present, the AlternationRule
            succeeds.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.SyntaxParsing.AlternationRule.RuleType">
            <summary>
            Returns the 
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleType">SyntaxRuleType</see>
            constant associated with this class ('Alternation').
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.ConcatenationRule">
            <summary>
            Class which encapsulates the behavior of the
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleType">Concatenation</see>
            syntax rule.
            </summary>
            <remarks>
            <p class="body">
            A ConjunctionRule is used to ensure that tokens appear in sequential order.
            For example, a ConjunctionRule with three TerminalRules, 'A', 'B', and 'C',
            in its Rules collection, expects the input stream to contain those three
            characters, and expects them to appear in that order. If any character is
            missing, or present but not in the required order, the ConjunctionRule fails.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.SyntaxParsing.ConcatenationRule.RuleType">
            <summary>
            Returns the 
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleType">SyntaxRuleType</see>
            constant associated with this class ('Concatenation').
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.OptionalRule">
            <summary>
            Class which encapsulates the behavior of the
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleType">Optional</see>
            syntax rule.
            </summary>
            <remarks>
            <p class="body">
            An OptionalRule is the equivalent of a
            <see cref="T:Infragistics.SyntaxParsing.RepetitionRule">RepetitionRule</see>
            whose
            <see cref="P:Infragistics.SyntaxParsing.RepetitionRule.MinimumOccurrences">MinimumOccurrences</see>
            property is set to zero, and whose
            <see cref="P:Infragistics.SyntaxParsing.RepetitionRule.MaximumOccurrences">MaximumOccurrences</see>
            property is set to one.
            </p>
            </remarks>
        </member>
        <member name="T:Infragistics.SyntaxParsing.RepetitionRuleBase">
            <summary>
            Base class for the
            <see cref="T:Infragistics.SyntaxParsing.RepetitionRule">RepetitionRule</see>
            and
            <see cref="T:Infragistics.SyntaxParsing.OptionalRule">OptionalRule</see>
            classes.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.RepetitionRuleBase.RuleType">
            <summary>
            Returns the 
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleType">SyntaxRuleType</see>
            constant associated with this class.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.RepetitionRuleBase.IsOptional">
            <summary>
            Returns a boolean value indicating whether this rule must
            succeed at least one time in order for the rule to be
            satisfied.
            </summary>
            <remarks>
            <p class="body">
            This property always returns true for
            <see cref="T:Infragistics.SyntaxParsing.OptionalRule">optional</see>
            rules.
            </p>
            <p class="body">
            For
            <see cref="T:Infragistics.SyntaxParsing.RepetitionRule">repetition</see>
            rules, this property returns true if the value of the
            <see cref="P:Infragistics.SyntaxParsing.RepetitionRule.MinimumOccurrences">MinimumOccurrences</see>
            property is equal to zero, and false otherwise.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.SyntaxParsing.OptionalRule.RuleType">
            <summary>
            Returns the 
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleType">SyntaxRuleType</see>
            constant associated with this class ('Optional').
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.ConjunctionRule">
            <summary>
            Class which encapsulates the behavior of the
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleType">Conjunction</see>
            syntax rule.
            </summary>
            <remarks>
            <p class="body">
            Note that the parser used by the
            <see cref="T:Infragistics.Documents.TextDocument">TextDocument</see>
            class does not support the conjunction rule. The rule exists to
            support custom parser implementations.
            </p>
            <p class="body">
            Note that rule conjunction can be expressed using regular expression patterns,
            by setting the terminal symbol's
            <see cref="P:Infragistics.SyntaxParsing.TerminalSymbol.Comparison">Comparison</see>
            property to 'RegularExpression', and assigning the appropriate pattern to the
            <see cref="P:Infragistics.SyntaxParsing.TerminalSymbol.Value">Value</see>
            property.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.SyntaxParsing.ConjunctionRule.RuleType">
            <summary>
            Returns the 
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleType">SyntaxRuleType</see>
            constant associated with this class ('Conjunction').
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.RepetitionRule">
            <summary>
            Class which encapsulates the behavior of the
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleType">Repetition</see>
            syntax rule.
            </summary>
            <remarks>
            <p class="body">
            Note that the parser used by the
            <see cref="T:Infragistics.Documents.TextDocument">TextDocument</see>
            class only supports the 'zero or more' expressions of the repetition
            rule. As such, RepetitionRule supports only zero or more expressions.
            </p>
            <p class="body">
            A RepetitionRule requires its sub-rules to succeed at least the number of times indicated by the value of the
            <see cref="P:Infragistics.SyntaxParsing.RepetitionRule.MinimumOccurrences">MinimumOccurrences</see>
            property. Each sub-rule is evaluated the number of times indicated by the value of the
            <see cref="P:Infragistics.SyntaxParsing.RepetitionRule.MaximumOccurrences">MaximumOccurrences</see>
            property. If MaximumOccurrences returns null, the rule can succed any number of times.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.SyntaxParsing.RepetitionRule.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.RepetitionRule.RuleType">
            <summary>
            Returns the 
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleType">SyntaxRuleType</see>
            constant associated with this class ('Repetition').
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.NegationRule">
            <summary>
            Class which encapsulates the behavior of the
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleType">Negation</see>
            syntax rule.
            </summary>
            <remarks>
            <p class="body">
            Note that the parser used by the
            <see cref="T:Infragistics.Documents.TextDocument">TextDocument</see>
            class does not support the negation rule.
            </p>
            <p class="body">
            Note that rule negation can be expressed using regular expression patterns,
            by setting the terminal symbol's
            <see cref="P:Infragistics.SyntaxParsing.TerminalSymbol.Comparison">Comparison</see>
            property to 'RegularExpression', and assigning the appropriate pattern to the
            <see cref="P:Infragistics.SyntaxParsing.TerminalSymbol.Value">Value</see>
            property.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.SyntaxParsing.NegationRule.RuleType">
            <summary>
            Returns the 
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleType">SyntaxRuleType</see>
            constant associated with this class ('Negation').
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.TerminalRule">
            <summary>
            Class which encapsulates the behavior of the
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleType">Terminal</see>
            syntax rule.
            </summary>
            <remarks>
            <p class="body">
            A TerminalRule is essentially a placeholder for a
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            within the rule tree.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TerminalRule.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TerminalRule.TerminalSymbol">
            <summary>
            Returns the
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            associated with this rule.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TerminalRule.RuleType">
            <summary>
            Returns the 
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleType">SyntaxRuleType</see>
            constant associated with this class ('Terminal').
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.NonTerminalRule">
            <summary>
            Class which encapsulates the behavior of the
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleType">NonTerminal</see>
            syntax rule.
            </summary>
            <remarks>
            <p class="body">
            A NonTerminalRule is essentially a placeholder for a
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>
            within the rule tree.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.SyntaxParsing.NonTerminalRule.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.NonTerminalRule.NonTerminalSymbol">
            <summary>
            Returns the
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>
            associated with this rule.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.NonTerminalRule.RuleType">
            <summary>
            Returns the 
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleType">SyntaxRuleType</see>
            constant associated with this class ('NonTerminal').
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.NonTerminalRule.Rules">
            <summary>
            Returns a collection of
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleBase">SyntaxRuleBase</see>-derived
            objects which represent the sub-rules for this
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRule">rule</see>.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.FirstTerminalHelper.ToString">
            <summary>
            Returns the string representation of this object;
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.MissingTerminalRuleException">
            <summary>
            Thrown when the parsing operation is performed on a start symbol which contains one or more
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRuleBase">rules</see>
            which do not contain a
            <see cref="T:Infragistics.SyntaxParsing.TerminalRule">TerminalRule</see>.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.MissingTerminalRuleException.ToString">
            <summary>
            Returns the string representation of this exception.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.MissingTerminalRuleException.Rule">
            <summary>
            Returns a reference to the
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRule">rule</see>
            which caused this exception to be thrown.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.MissingTerminalRuleException.Message">
            <summary>
            Returns the message for this exception.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.InvalidDescendantRuleException">
            <summary>
            Thrown when the first descendant rule of a
            <see cref="T:Infragistics.SyntaxParsing.ConjunctionRule">ConjunctionRule</see>
            or
            <see cref="T:Infragistics.SyntaxParsing.NegationRule">NegationRule</see>
            is a NegationRule.
            </summary>
            <remarks>
            <p class="body">
            The first descendant rule of a ConjunctionRule or NegationRule must
            generate a token upon success; because a NegationRule does not, it
            is not valid as the first descendant of a ConjunctionRule or NegationRule.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.SyntaxParsing.InvalidDescendantRuleException.ParentRule">
            <summary>
            A reference to the
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRule">SyntaxRule</see>
            for which this exception was thrown.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.InvalidDescendantOfConjunctionRuleException.ToString">
            <summary>
            Returns the string representation of this exception.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.InvalidDescendantOfConjunctionRuleException.ConjunctionRule">
            <summary>
            A reference to the
            <see cref="T:Infragistics.SyntaxParsing.ConjunctionRule">ConjunctionRule</see>
            for which this exception was thrown.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.InvalidDescendantOfConjunctionRuleException.Descendant">
            <summary>
            A reference to the
            <see cref="T:Infragistics.SyntaxParsing.SyntaxRule">SyntaxRule</see>
            which caused the first descendant rule to be an invalid first
            descendant rule of the
            <see cref="P:Infragistics.SyntaxParsing.InvalidDescendantOfConjunctionRuleException.ConjunctionRule">ConjunctionRule</see>
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.InvalidDescendantOfConjunctionRuleException.Message">
            <summary>
            Returns the message for this exception.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.NegationRuleIsFirstDescendantException.ToString">
            <summary>
            Returns the string representation of this exception.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.NegationRuleIsFirstDescendantException.NegationRule">
            <summary>
            A reference to the
            <see cref="T:Infragistics.SyntaxParsing.NegationRule">NegationRule</see>
            which caused this exception to be thrown.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.NegationRuleIsFirstDescendantException.Message">
            <summary>
            Returns the message for this exception.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.TerminalSymbolsCollection">
            <summary>
            Collection class for
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">terminal symbols</see>.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TerminalSymbolsCollection.Add(System.String,System.String,Infragistics.SyntaxParsing.TerminalSymbolComparison)">
            <summary>
            Adds a new
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            to this collection
            </summary>
            <param key="key">
            The value of the
            <see cref="P:Infragistics.SyntaxParsing.TerminalSymbol.Value">Value</see>
            property.
            </param>
            <param key="comparison">
            The value of the
            <see cref="P:Infragistics.SyntaxParsing.TerminalSymbol.Comparison">Comparison</see>
            property.
            </param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TerminalSymbolsCollection.Remove(System.String)">
            <summary>
            Removes the specified
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            from this collection.
            </summary>
            <param key="key">
            The value of the
            <see cref="P:Infragistics.SyntaxParsing.TerminalSymbol.Value">Value</see>
            property of the symbol to remove.
            </param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TerminalSymbolsCollection.Clear">
            <summary>
            Removes all members from this collection.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TerminalSymbolsCollection.Exists(Infragistics.SyntaxParsing.TerminalSymbol)">
            <summary>
            Returns a boolean value indicating whether the specified
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            exists within this collection.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TerminalSymbolsCollection.Exists(System.String)">
            <summary>
            Returns a boolean value indicating whether a
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            with the specified <paramref key="value"/>
            exists within this collection.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TerminalSymbolsCollection.Exists(System.String,Infragistics.SyntaxParsing.TerminalSymbol@)">
            <summary>
            Returns a boolean value indicating whether a
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            with the specified <paramref key="value"/>
            exists within this collection.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TerminalSymbolsCollection.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TerminalSymbolsCollection.Item(System.String)">
            <summary>
            Returns the instance with the specified <paramref key="name"/>.
            </summary>
            <param key="name">
            The
            <see cref="P:Infragistics.SyntaxParsing.Symbol.Name">Name</see>
            of the symbol to return.
            </param>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TerminalSymbolsCollection.Item(System.Int32)">
            <summary>
            Returns the instance with the specified <paramref key="id"/>.
            </summary>
            <param key="id">
            The
            <see cref="P:Infragistics.SyntaxParsing.Symbol.Id">Id</see>
            of the symbol to return.
            </param>
            <seealso cref="P:Infragistics.SyntaxParsing.Symbol.Id">Id property (Symbol class)</seealso>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TerminalSymbolsCollection.Count">
            <summary>
            Returns the number of elements in this collection.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.TerminalSymbol">
            <summary>
            An irreducible element of the associated
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>
            which can appear in the inputs to or outputs from the
            production rules of the grammar.
            </summary>
            <remarks>
            <p class="body">
            A terminal symbol can be a literal string or a regular expression.
            This literal string or regular expression is compared to strings
            in the text being analyzed by the syntax analysis layer when
            determining whether a statement is valid in the context of the
            associated grammar.
            </p>
            <p class="body">
            A terminal symbol represents the terminal point for a production rule.
            Production rules such as Concatenation, Alternation, SyntacticFactor, etc.
            can be likened to logical tokens, whereas a terminal symbol does the
            actual character matching. All production rules must produce a rule tree
            which contains at least one
            <see cref="T:Infragistics.SyntaxParsing.TerminalRule">TerminalRule</see>
            as a leaf node, or an exception is thrown during the parsing operation.
            </p>
            </remarks>
        </member>
        <member name="F:Infragistics.SyntaxParsing.TerminalSymbol.DefaultBoundaryPattern">
            <summary>
            Returns the regular expression pattern used by default for the
            <see cref="P:Infragistics.SyntaxParsing.TerminalSymbol.BoundaryPattern">BoundaryPattern</see>
            property ('\W').
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TerminalSymbol._IsSignificant(Infragistics.SyntaxParsing.LanguageElement)">
            <summary>
            Returns a boolean value indicating whether tokens generated by
            terminal symbols with the specified <paramref name="languageElement"/>
            represent significant content.
            </summary>
            <param name="languageElement">
            The
            <see cref="T:Infragistics.SyntaxParsing.LanguageElement">LanguageElement</see>
            to test.
            </param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TerminalSymbol.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TerminalSymbol.IsExplicitlyNamed">
            <summary>
            Returns a boolean value indicating whether a value is explicitly assigned to the
            <see cref="P:Infragistics.SyntaxParsing.Symbol.Name">Name</see>
            property.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TerminalSymbol.BoundaryPattern">
            <summary>
            Returns or sets the regular expression pattern which defines the
            character or characters expected to follow tokens parsed by this
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>.
            </summary>
            <remarks>
            <p class="body">
            Boundary checking can be suppressed altogether by setting this property
            to an empty string. In this case, tokens parsed by this terminal symbol
            do not check the character or characters which follow the parsed token.
            </p>
            <p class="body">
            In the absence of an explicit setting, the regular expression pattern
            '\W' (non-alphanumeric characters) is used for terminal symbols whose
            <see cref="P:Infragistics.SyntaxParsing.TerminalSymbol.LanguageElement">LanguageElement</see>
            property is set to 'ReservedKeyword', 'ContextSensitiveKeyword', or 'Identifier'.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TerminalSymbol.BoundaryPatternResolved">
            <summary>
            Returns the resolved value of the
            <see cref="P:Infragistics.SyntaxParsing.TerminalSymbol.BoundaryPattern">BoundaryPattern</see>
            property.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TerminalSymbol.Grammar">
            <summary>
            Returns a reference to the associated
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TerminalSymbol.Value">
            <summary>
            Returns the value associated with this terminal symbol.
            </summary>
            <remarks>
            <p class="body">
            When a string is compiled against the associated
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>,
            this value is used to compare values in the string being
            compiled. The manner in which the values are compared is
            determined by the value of the
            <see cref="P:Infragistics.SyntaxParsing.TerminalSymbol.Comparison">Comparison</see>
            property.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TerminalSymbol.Comparison">
            <summary>
            Returns a value which determines the manner in which
            values in the string being compiled are compared against this
            terminal symbol.
            </summary>
            <remarks>
            <p class="body">
            Terminal symbols support three types of character matching:
            literal, both with and without regard to character casing,
            and regular expression.
            </p>
            <p class="body">
            For example, to create a terminal symbol which matches text
            containing only alphabetic characters, set the Comparison
            property to 'RegularExpression', and assign the value '[a-zA-Z]*'
            to the
            <see cref="P:Infragistics.SyntaxParsing.TerminalSymbol.Value">Value</see>
            property.
            </p>
            <p class="body">
            Note that in cases where the 'RegularExpression' setting is used, it
            is recommended that a value be assigned to the
            <see cref="P:Infragistics.SyntaxParsing.TerminalSymbol.Lookahead">Lookahead</see>
            property when possible. If the regular expression pattern begins with a
            literal string of characters, assigning this string to the Lookahead property
            will enable the lexical anyalysis layer to inexpensively determine whether the
            pattern should be evaluated based on the lookahead.
            </p>
            <p class="body">
            For example, consider a simplified pattern for pre-processor directives, '#(if|elif|endif|else)'.
            Because matches yielded by this pattern must begin with a '#', assigning this value to the Lookahead
            property enables the lexical analysis layer to bypass pattern evaluation in cases where the
            input string cannot possibly match the pattern, i.e., when the next character in the input stream
            is not a '#'.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TerminalSymbol.Lookahead">
            <summary>
            Returns or sets a string which defines the character or characters
            which must appear at the beginning of the input stream in order for
            this symbol to parse successfully.
            </summary>
            <remarks>
            <p class="body">
            This property is only applicable for terminal symbols whose
            <see cref="P:Infragistics.SyntaxParsing.TerminalSymbol.Comparison">Comparison</see>
            property is set to 'RegularExpression', since unambiguous lookahead
            criteria is already defined for literal string matching. In cases where the
            pattern to be matched always begins with the same character or characters,
            this property can be used to provide a hint to the lexer, so that this
            terminal symbol is only evaluated in cases where the next character(s) in the
            input stream match the value of this property. This can improve performance by
            reducing the number of string comparisons during the scanning/lexing phase.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TerminalSymbol.LanguageElement">
            <summary>
            Returns or sets a constant which defines the language element for tokens
            generated by this symbol.
            </summary>
            <remarks>
            <p class="body">
            The LanguageElement property cannot be set to 'EndOfStream' or 'NewLine',
            as these values are reserved for the terminal symbol returned from the
            <see cref="P:Infragistics.SyntaxParsing.Grammar.EndOfStreamSymbol">EndOfStreamSymbol</see>
            and
            <see cref="P:Infragistics.SyntaxParsing.Grammar.NewLineSymbol">NewLineSymbol</see>
            properties, respectively. Attempting to assign either of these values to this property
            will cause an exception to be thrown.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TerminalSymbol.IsSignificant">
            <summary>
            Returns a boolean value indicating whether tokens generated by
            this terminal symbol represent significant content.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TerminalSymbol.IsNewLine">
            <summary>
            Returns a boolean value indicating whether this terminal symbol represents a newline.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TerminalSymbol.IsWhitespace">
            <summary>
            Returns a boolean value indicating whether this terminal symbol represents whitespace.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TerminalSymbol.IsEndOfStream">
            <summary>
            Returns a boolean value indicating whether this terminal symbol represents an end of stream marker.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TerminalSymbol.ConsumesText">
            <summary>
            Returns or sets a boolean value which indicates whether tokens produced
            by the lexer for this symbol have length.
            </summary>
            <remarks>
            <p class="body">
            The ConsumesText property makes it possible to use the
            <see cref="P:Infragistics.SyntaxParsing.TerminalSymbol.Value">Value</see>
            property strictly to define matching criteria, while preventing the lexer
            from consuming the text that it matches. For example, to support languages
            which consider newlines to be significant content, a terminal symbol could
            be created with a regex pattern for newlines, and a value of false for
            ConsumesText. During the lexical analysis phase, text that meets the criteria
            defined for the symbol would be matched as usual, but the token produced
            would have zero length, and the input stream left unaffected.
            </p>
            </remarks>
        </member>
        <member name="T:Infragistics.SyntaxParsing.TextLocation">
            <summary>
            Structure containing zero-based line and character offsets that uniquely idenity a character location.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TextLocation.#ctor(System.Int32,System.Int32)">
            <summary>
            Instantiates a new <see cref="T:Infragistics.SyntaxParsing.TextLocation"/>
            </summary>
            <param name="line">The zero-based line offset within the document.</param>
            <param name="character">The zero-based character offset within the line.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If line or character is less than 0.</exception>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TextLocation.GetHashCode">
            <summary>
            Returns the hash code of the structure.
            </summary>
            <returns>A hash code for this instance</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TextLocation.Equals(System.Object)">
            <summary>
            Compares the specified object to this object to see if they are equivalent.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TextLocation.op_Equality(Infragistics.SyntaxParsing.TextLocation,Infragistics.SyntaxParsing.TextLocation)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.SyntaxParsing.TextLocation"/> structures for equality
            </summary>
            <param name="location1">The first structure</param>
            <param name="location2">The other structure</param>
            <returns>true if the two instances are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TextLocation.op_Inequality(Infragistics.SyntaxParsing.TextLocation,Infragistics.SyntaxParsing.TextLocation)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.SyntaxParsing.TextLocation"/> structures for inequality
            </summary>
            <param name="location1">The first structure</param>
            <param name="location2">The other structure</param>
            <returns>true if the two instances are not equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TextLocation.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TextLocation.Character">
            <summary>
            Returns the zero-based character number in the line (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TextLocation.Line">
            <summary>
            Returns the zero-based line number (read-only).
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.TextSpan">
            <summary>
            Structure containing an offset and length that identify a run of text within a document
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.TextSpan.All">
            <summary>
            Returns a span tha represents all the text.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TextSpan.#ctor(System.Int32,System.Int32)">
            <summary>
            Instantiates a new <see cref="T:Infragistics.SyntaxParsing.TextSpan"/>
            </summary>
            <param name="offset">The zero-based offset into the document</param>
            <param name="length">The number of characters in the span (can be zero or negative)</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If offset is less than 0 or the offset + length is less than 0.</exception>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TextSpan.GetHashCode">
            <summary>
            Returns the hash code of the structure.
            </summary>
            <returns>A hash code for this instance</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TextSpan.Equals(System.Object)">
            <summary>
            Compares the specified object to this object to see if they are equivalent.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TextSpan.op_GreaterThan(Infragistics.SyntaxParsing.TextSpan,Infragistics.SyntaxParsing.TextSpan)">
            <summary>
            Compares the relative values of two <see cref="T:Infragistics.SyntaxParsing.TextSpan"/> structures 
            </summary>
            <param name="span">The first structure</param>
            <param name="other">The other structure</param>
            <returns>true if the span is greater than other</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TextSpan.op_LessThan(Infragistics.SyntaxParsing.TextSpan,Infragistics.SyntaxParsing.TextSpan)">
            <summary>
            Compares the relative values of two <see cref="T:Infragistics.SyntaxParsing.TextSpan"/> structures 
            </summary>
            <param name="span">The first structure</param>
            <param name="other">The other structure</param>
            <returns>true if the span is less than other</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TextSpan.op_Equality(Infragistics.SyntaxParsing.TextSpan,Infragistics.SyntaxParsing.TextSpan)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.SyntaxParsing.TextSpan"/> structures for equality
            </summary>
            <param name="span1">The first structure</param>
            <param name="span2">The other structure</param>
            <returns>true if the two instances are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TextSpan.op_Inequality(Infragistics.SyntaxParsing.TextSpan,Infragistics.SyntaxParsing.TextSpan)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.SyntaxParsing.TextSpan"/> structures for inequality
            </summary>
            <param name="span1">The first structure</param>
            <param name="span2">The other structure</param>
            <returns>true if the two instances are not equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TextSpan.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TextSpan.Contains(Infragistics.SyntaxParsing.TextSpan)">
            <summary>
            Determines if a span is completely contained within this span.
            </summary>
            <param name="span">The span to test.</param>
            <returns>true is the span is completely contained within this span, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TextSpan.Contains(System.Int32)">
            <summary>
            Determines if a offset is contained within this span.
            </summary>
            <param name="offset">The offset to test.</param>
            <returns>true is the offset is contained within this span, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TextSpan.Intersection(Infragistics.SyntaxParsing.TextSpan)">
            <summary>
            Returns a span that contains just the intersect between this span and another.
            </summary>
            <param name="span">The span to intersect.</param>
            <returns>A new TextSpan with the intersect or null if the spans don't intersect</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TextSpan.IntersectsWith(Infragistics.SyntaxParsing.TextSpan)">
            <summary>
            Returns true is the span intersects with this span.
            </summary>
            <param name="span">The span to test.</param>
            <returns>true if the spans intersect, otherwise false</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TextSpan.Overlap(Infragistics.SyntaxParsing.TextSpan)">
            <summary>
            Returns a span that contains just the overlap between this span and another.
            </summary>
            <param name="span">The span to overlap.</param>
            <returns>A new TextSpan with the overlap or null if the spans don't overlap</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TextSpan.OverlapsWith(Infragistics.SyntaxParsing.TextSpan)">
            <summary>
            Returns true is the span overlaps with this span.
            </summary>
            <param name="span">The span to test.</param>
            <returns>true if the spans overlap, otherwise false</returns>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TextSpan.End">
            <summary>
            Returns the normalized end offset (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TextSpan.Length">
            <summary>
            Returns the length of the text span (read-only).
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> if the length is negative that means the <see cref="P:Infragistics.SyntaxParsing.TextSpan.Start"/> of the span is before the <see cref="P:Infragistics.SyntaxParsing.TextSpan.Offset"/></para>
            </remarks>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TextSpan.Offset">
            <summary>
            Returns the zero-based offset from the beginning of the document (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TextSpan.Start">
            <summary>
            Returns the normalized start offset (read-only).
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Token">
            <summary>
            Encapsulates the properties of a token produced during lexical analysis.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Token.Equals(System.Object)">
            <summary>
            Compares the specified object to this object to see if they are equivalent.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Token.GetHashCode">
            <summary>
            Returns the hash code of the object.
            </summary>
            <returns>A hash code for this instance</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Token.op_Equality(Infragistics.SyntaxParsing.Token,Infragistics.SyntaxParsing.Token)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.SyntaxParsing.Token"/> structures for equality
            </summary>
            <param name="token1">The first structure</param>
            <param name="token2">The other structure</param>
            <returns>true if the two instances are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Token.op_Inequality(Infragistics.SyntaxParsing.Token,Infragistics.SyntaxParsing.Token)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.SyntaxParsing.Token"/> structures for inequality
            </summary>
            <param name="token1">The first structure</param>
            <param name="token2">The other structure</param>
            <returns>true if the two instances are not equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Token.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Token.IsEmpty">
            <summary>
            Returns a boolean value indicating whether this token is empty.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Token.IsMissing">
            <summary>
            Returns a boolean value indicating whether this token is missing.
            </summary>
            <remarks>
            <p class="body">
            When a lexer state has been entered, and a newline is encountered
            before the symbol which exits that lexer state, the token which is
            expected to exit that lexer state is then known to be missing. In this
            case, a Token is created for that exit symbol, with a zero length,
            and returned from the GetNextToken method. Such tokens are considered
            to be missing.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Token.Language">
            <summary>
            Returns the <see cref="T:Infragistics.SyntaxParsing.LanguageBase">Language</see> that was used to produce this token (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Token.Length">
            <summary>
            Returns the length of the string which this token represents.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Token.OverallOffset">
            <summary>
            Returns the overall character offset from the beginning of the document to the start of this token (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Token.Span">
            <summary>
            Retirnms the span of the token within the document (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Token.Text">
            <summary>
            Returns the text which this token represents.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Token.TerminalSymbol">
            <summary>
            Returns the 
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            which produced this token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Token.LexerState">
            <summary>
            Returns the 
            <see cref="T:Infragistics.SyntaxParsing.LexerState">LexerState</see>
            which defines the state from which this token was produced.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Token.IsWhitespaceOrNewLine">
            <summary>
            Returns a boolean value indicating whether this terminal symbol represents whitespace, new line or end of stream
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TokenWord.Equals(System.Object)">
            <summary>
            Compares the specified object to this object to see if they are equivalent.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TokenWord.GetHashCode">
            <summary>
            Returns the hash code of the object.
            </summary>
            <returns>A hash code for this instance</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TokenWord.op_Equality(Infragistics.SyntaxParsing.TokenWord,Infragistics.SyntaxParsing.TokenWord)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.SyntaxParsing.TokenWord"/> structures for equality
            </summary>
            <param name="word1">The first structure</param>
            <param name="word2">The other structure</param>
            <returns>true if the two instances are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TokenWord.op_Inequality(Infragistics.SyntaxParsing.TokenWord,Infragistics.SyntaxParsing.TokenWord)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.SyntaxParsing.TokenWord"/> structures for inequality
            </summary>
            <param name="word1">The first structure</param>
            <param name="word2">The other structure</param>
            <returns>true if the two instances are not equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.TokenWord.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TokenWord.RelativeOffset">
            <summary>
            Returns the zero-based offset for this substring, as relative
            to the first character of the token which contains it.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TokenWord.Length">
            <summary>
            Returns the length of the substring.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.TokenWord.Text">
            <summary>
            Returns the text.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Internal.TokenLineBufferInternal.GetText(System.Int32,System.Int32)">
            <summary>
            Returns the specified substring.
            </summary>
            <param name="start">The zero-based position of the first character in the string to be returned.</param>
            <param name="length">The length of the string to be returned.</param>
            <returns>The specified substring.</returns>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Ebnf.EbnfParseErrorReason">
            <summary>
            Constants which describe the reason for an import error.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParseErrorReason.None">
            <summary>
            Used for variable initialization.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParseErrorReason.EmptyGrammarDefinition">
            <summary>
            The grammar definition is empty.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParseErrorReason.MissingDeclaration">
            <summary>
            The left-hand side of the statement cannot be parsed into a valid identifier.
            All statements must begin with a valid identifier which is not
            enclosed in quotes; this value may represent the name of a
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            or
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParseErrorReason.DuplicateIdentifier">
            <summary>
            The left-hand side of the statement contains an identifier which has already been used.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParseErrorReason.UnrecognizedContent">
            <summary>
            The right-hand side of the statement contains content which is not recognizable under the current grammar notation.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParseErrorReason.MissingAssignmentSymbol">
            <summary>
            The statement does not contain an
            <see cref="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.AssignmentSymbol">AssignmentSymbol</see>
            (typically an equals sign) following the declaration.
            All statements must contain one and only one assignment symbol following the declaration.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParseErrorReason.MissingEndOfStatement">
            <summary>
            The statement does not contain an
            <see cref="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.EndOfStatementSymbol">EndOfStatementSymbol</see>
            (typically a semicolon).
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParseErrorReason.DuplicateAssignmentSymbol">
            <summary>
            The statement contains more than one
            <see cref="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.AssignmentSymbol">AssignmentSymbol</see>.
            All statements must contain one and only one assignment symbol following the declaration.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParseErrorReason.MissingOperator">
            <summary>
            An operator is expected at the specified location. This is usually caused by the occurrence of two adjacent operands.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParseErrorReason.MissingOperand">
            <summary>
            An operand is expected at the specified location. This is usually caused by the occurrence of two adjacent operators.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParseErrorReason.GroupingSymbolMismatch">
            <summary>
            An grouping symbol, such as a
            <see cref="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.GroupingBlockOpeningSymbol">GroupingBlockOpeningSymbol</see>
            or
            <see cref="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.GroupingBlockClosingSymbol">GroupingBlockClosingSymbol</see>
            was encountered without a corresponding opening/closing symbol.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParseErrorReason.InvalidTerminalDeclaration">
            <summary>
            The terminal symbol declaration could not be parsed into a valid statement.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParseErrorReason.InvalidAssignment">
            <summary>
            The left-hand side of the statement contains content that is not valid for an assignment.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParseErrorReason.UndeclaredReference">
            <summary>
            A reference to an identifier that was never declared was encountered.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParseErrorReason.InvalidDeclaration">
            <summary>
            More than one identifier was encountered on the left-hand side of a statement.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParseErrorReason.InvalidRegularExpression">
            <summary>
            A terminal symbol was designated as a regular expression pattern, but the pattern specified was not valid.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParseErrorReason.MissingValue">
            <summary>
            An XML tag has no value specified.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParseErrorReason.MissingName">
            <summary>
            A declaration is missing a value for the 'Name' property.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParseErrorReason.InvalidConjunctionRuleDescendant">
            <summary>
            A
            <see cref="T:Infragistics.SyntaxParsing.ConjunctionRule">ConjunctionRule</see>
            or
            <see cref="T:Infragistics.SyntaxParsing.NegationRule">NegationRule</see>
            has one or more invalid descendant rules.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParseErrorReason.NegationRuleIsFirstDescendant">
            <summary>
            A
            <see cref="T:Infragistics.SyntaxParsing.NegationRule">NegationRule</see>
            appears as the first sub-rule.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParseErrorReason.StartSymbolIsReferenced">
            <summary>
            A
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>
            was designated as the
            <see cref="P:Infragistics.SyntaxParsing.Grammar.StartSymbol">StartSymbol</see>
            for the grammar, but that NonTerminalSymbol is referenced by another NonTerminalSymbol.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParseErrorReason.DuplicateStartSymbol">
            <summary>
            More than one
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>
            has been designated as the 
            <see cref="P:Infragistics.SyntaxParsing.Grammar.StartSymbol">StartSymbol</see>
            for the associated grammar.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParseErrorReason.InvalidOperator">
            <summary>
            An operator was encountered on the left-hand side of a statement.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParseErrorReason.IncompleteStatement">
            <summary>
            No expression was found on the right-hand side of the statement.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParseErrorReason.OpenLiteralString">
            <summary>
            An opening quote symbol was encountered without a closing one.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParseErrorReason.UnbalancedXmlTag">
            <summary>
            An opening XML tag was encountered without a corresponding closing one,
            or a closing XML tag was encountered without a corresponding opening one.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParseErrorReason.UnrecognizedXmlTag">
            <summary>
            A well-formed XML tag was encountered, but its name was not recognized.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParseErrorReason.InvalidPropertyValue">
            <summary>
            The specified value is not valid for the property to which it is being assigned.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParseErrorReason.LexerStateAlreadySet">
            <summary>
            A TerminalSymbol is being assigned a LexerState but already has one assigned.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParseErrorReason.InvalidXml">
            <summary>
            A SpecialSequence containing extensible markup language (XML) content
            contained malformed or otherwise invalid content.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Ebnf.SpecialSequenceType">
            <summary>
            Constants which identify the types of a
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.SpecialSequence">SpecialSequence</see>
            token.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.SpecialSequenceType.Unknown">
            <summary>
            Content is not recognized by the associated
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.EbnfParser">EbnfParser</see>.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.SpecialSequenceType.Xml">
            <summary>
            A special sequence which contains extensible markup language (XML) content.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Ebnf.StatementTokenType">
            <summary>
            Constants which identify the different types of statement tokens.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.StatementTokenType.None">
            <summary>
            Used for variable initialization.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.StatementTokenType.TerminalSymbol">
            <summary>
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.TerminalSymbolToken">TerminalSymbolToken</see>
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.StatementTokenType.NonTerminalSymbol">
            <summary>
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.NonTerminalSymbolToken">NonTerminalSymbolToken</see>
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.StatementTokenType.CommentBlock">
            <summary>
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.CommentBlock">CommentBlock</see>
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.StatementTokenType.CommentLine">
            <summary>
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.CommentLine">CommentLine</see>
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.StatementTokenType.SpecialSequence">
            <summary>
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.SpecialSequence">SpecialSequence</see>
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.StatementTokenType.NonTerminalSymbolDeclaration">
            <summary>
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.NonTerminalSymbolDeclaration">NonTerminalSymbolDeclaration</see>
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.StatementTokenType.TerminalSymbolDeclaration">
            <summary>
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.TerminalSymbolDeclaration">TerminalSymbolDeclaration</see>
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.StatementTokenType.LexerStateDeclaration">
            <summary>
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.LexerStateDeclaration">LexerStateDeclaration</see>
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.StatementTokenType.AlternationOperator">
            <summary>
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.AlternationOperator">AlternationOperator</see>
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.StatementTokenType.ConcatenationOperator">
            <summary>
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.ConcatenationOperator">ConcatenationOperator</see>
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.StatementTokenType.ConjunctionOperator">
            <summary>
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.ConjunctionOperator">ConjunctionOperator</see>
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.StatementTokenType.NegationOperator">
            <summary>
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.NegationOperator">NegationOperator</see>
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.StatementTokenType.SyntacticFactor">
            <summary>
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.SyntacticFactor">SyntacticFactor</see>
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.StatementTokenType.Group">
            <summary>
            Used internally.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.StatementTokenType.OptionalGroup">
            <summary>
            Used internally.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.StatementTokenType.RepetitionGroup">
            <summary>
            Used internally.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.StatementTokenType.AlternationGroup">
            <summary>
            Used internally.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.StatementTokenType.ConcatenationGroup">
            <summary>
            Used internally.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.StatementTokenType.ConjunctionGroup">
            <summary>
            Used internally.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.StatementTokenType.NegationGroup">
            <summary>
            Used internally.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.StatementTokenType.Assignment">
            <summary>
            <see cref="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.AssignmentSymbol">AssignmentSymbol</see>
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.StatementTokenType.EndOfStatement">
            <summary>
            <see cref="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.EndOfStatementSymbol">EndOfStatementSymbol</see>
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.StatementTokenType.Whitespace">
            <summary>
            Represents a continuous run of whitespace characters.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.StatementTokenType.LiteralString">
            <summary>
            Represents a literal string.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.StatementTokenType.BlockSymbol">
            <summary>
            Represents an opening or closing symbol for an operation group.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.StatementTokenType.Error">
            <summary>
            Represents an error token.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.StatementTokenType.XmlTag">
            <summary>
            Represents an opening or closing xml tag.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.StatementTokenType.XmlValue">
            <summary>
            Represents the value of an xml element.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.StatementTokenType.SpecialSequenceSymbol">
            <summary>
            Represents the symbol which opens and closes a special sequence.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.StatementTokenType.SpecialSequenceIdentifier">
            <summary>
            Represents the symbol which identifies a special sequence.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Ebnf.EbnfParser">
            <summary>
            Parses Extended Backus-Naur Form (EBNF) content, producing an instance of the
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>
            class.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParser.DefaultWhitespacePattern">
            <summary>
            Returns the default regular expression pattern
            used to identify whitespace characters ("@[\s\n\t]+").
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParser.pattern_NotInQuotes">
            <summary>
            {0} = quote symbol
            {1} = character to check
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParser.pattern_Grouping">
            <summary>
            {0} = open symbol, {1} = close symbol
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParser.pattern_SpecialSequence">
            <summary>
            {0} = special sequence symbol
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParser.pattern_EOS">
            <summary>
            {0} = end of statement symbol
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParser.pattern_CommentBlock">
            <summary>
            {0} = comment block open symbol, {1} = comment block close symbol
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParser.pattern_CommentLine">
            <summary>
            {0} = comment line symbol
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParser.pattern_RepetitionOperator">
            <summary>
            {0} = repetition operator symbol
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParser.pattern_Integer">
            <summary>
            No params
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParser.pattern_Identifier">
            <summary>
            No params
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParser.pattern_XmlTag">
            <summary>
            No params
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParser.pattern_XmlValue">
            <summary>
            No params
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParser.pattern_AnythingUpToWordBreak">
            <summary>
            No params
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParser.pattern_XmlEscapeCode">
            <summary>
            No params
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParser.IdentifierRegexPattern">
            <summary>
            Returns the regular expression pattern used to match strings which
            represent terminal and non-terminal symbol identifiers in a grammar
            definition (^[a-zA-Z_@\p{L}][a-zA-Z0-9_@\p{L}]*).
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Ebnf.EbnfParser.#ctor">
            <summary>
            Creates a new instance of this class.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Ebnf.EbnfParser.Parse(System.String)">
            <summary>
            Parses the specified string.
            </summary>
            <param key="input">
            The EBNF content to be loaded.
            </param>
            <returns>
            An
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.EbnfParseResult">EbnfParseResult</see>
            instance which describes the result of the parse operation.
            </returns>
            <remarks>
            <p class="body">
            If successful, the returned EbnfParseResult object's Success property returns true, and the 
            <see cref="P:Infragistics.SyntaxParsing.Ebnf.EbnfParser.Grammar">Grammar</see>
            property returns the resulting Grammar.
            </p>
            <p class="body">
            If unsuccessful, the returned EbnfParseResult object's Errors property
            returns the errors encountered, and the
            <see cref="P:Infragistics.SyntaxParsing.Ebnf.EbnfParser.Grammar">Grammar</see>
            property returns null.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Ebnf.EbnfParser.Parse(System.String,System.Text.Encoding)">
            <summary>
            Parses the contents of the specified file.
            </summary>
            <param key="filename">The full path to the EBNF file to be parsed.</param>
            <param key="encoding">The character encoding.</param>
            <returns>
            An
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.EbnfParseResult">EbnfParseResult</see>
            instance which describes the result of the parse operation.
            </returns>
            <remarks>
            <p class="body">
            If successful, the returned EbnfParseResult object's Success property returns true, and the 
            <see cref="P:Infragistics.SyntaxParsing.Ebnf.EbnfParser.Grammar">Grammar</see>
            property returns the resulting Grammar.
            </p>
            <p class="body">
            If unsuccessful, the returned EbnfParseResult object's Errors property
            returns the errors encountered, and the
            <see cref="P:Infragistics.SyntaxParsing.Ebnf.EbnfParser.Grammar">Grammar</see>
            property returns null.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Ebnf.EbnfParser.FindSymbolDeclaration(Infragistics.SyntaxParsing.Symbol)">
            <summary>
            Returns the
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.SymbolToken">SymbolToken</see>
            which represents the declaration of the specified
            <see cref="T:Infragistics.SyntaxParsing.Symbol">symbol</see>,
            or null if no token exists for the symbol.
            </summary>
            <param name="symbol">
            The
            <see cref="T:Infragistics.SyntaxParsing.Symbol">symbol</see>
            for which the token is to be returned.
            </param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Ebnf.EbnfParser.FindToken(System.Int32)">
            <summary>
            Returns the token closest to the specified character position.
            </summary>
            <param name="characterPosition">
            The zero-based character position.
            </param>
            <returns>
            A
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.StatementToken">StatementToken</see>
            or null.
            </returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Ebnf.EbnfParser.FindToken(System.Int32,System.Object@)">
            <summary>
            Returns the token closest to the specified character position.
            </summary>
            <param name="characterPosition">
            The zero-based character position.
            </param>
            <param name="context">
            [out] Upon return, contains an object associated with the token
            or null if not applicable.
            </param>
            <returns>
            A
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.StatementToken">StatementToken</see>
            or null.
            </returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Ebnf.EbnfParser.FindToken(System.Int32,System.Object@,Infragistics.SyntaxParsing.Ebnf.GrammarStatement@)">
            <summary>
            Returns the token closest to the specified character position.
            </summary>
            <param name="characterPosition">
            The zero-based character position.
            </param>
            <param name="context">
            [out] Upon return, contains a context-sensitive object associated with the token
            or null if not applicable.
            </param>
            <param name="statement">
            [out] Upon return, contains a reference to the
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.GrammarStatement">GrammarStatement</see>
            from which the token was parsed.
            </param>
            <returns>
            A
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.StatementToken">StatementToken</see>
            or null.
            </returns>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.EbnfParser.Notation">
            <summary>
            Returns the
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation">EbnfParserNotation</see>
            instance which defines the token strings for this
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.EbnfParser">EbnfParser</see>
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.EbnfParser.Grammar">
            <summary>
            Returns the
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>
            instance resulting from the parsed EBNF.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.EbnfParser.NewLine">
            <summary>
            Returns or sets the character string which is used to represent
            new lines.
            </summary>
            <remarks>
            <p class="body">
            In the case where the NewLine property is not explicitly set, the
            input string is searched for the presence of typical newline character
            sequences, i.e., '\r\n' and '\n'. Upon detection of the first newline,
            the value is cached and assumed to be the line delimiting character. This
            behavior can be overriden by explicitly setting the NewLine property.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.EbnfParser.Tokens">
            <summary>
            Returns an enumerator containing the
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.StatementToken">StatementToken</see>
            instances which comprise the set of all strings found within the associated script.
            </summary>
            <remarks>
            <p class="body">
            This enumerator contains tokens for all parsed strings, appearing in
            the same order in which they appear in the string passed to the Parse
            method. It can be used to format the script.
            </p>
            </remarks>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation">
            <summary>
            Encapsulates the properties of the notation used to represent an EBNF (Extended Backus-Naur Form)
            <see cref="T:Infragistics.SyntaxParsing.Grammar">grammar</see>
            definition.
            </summary>
            <remarks>
            <p class="body">
            The Ebnf notation is used to define the string values
            which identify reserved symbols within the grammar, for example,
            the assignment operator or end-of-statement marker.
            </p>
            <p class="body">
            By default, the
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.EbnfParser">EbnfParser</see>
            class expects input that conforms to the Extended Backup-Naur Form definition,
            as standardized in 1996 by the ISO/IEC 14977 specification (visit the
            <a href="http://www.iso.org">Internation Organization for Standardization</a>
            website for details).
            </p>
            </remarks>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.DefaultQuoteSymbol">
            <summary>Double-quote (")</summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.DefaultAssignmentSymbol">
            <summary>Equals sign (=)</summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.DefaultEndOfStatementSymbol">
            <summary>Semicolon (;)</summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.DefaultAlternationOperatorSymbol">
            <summary>Pipe (|)</summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.DefaultConcatenationOperatorSymbol">
            <summary>Comma (,)</summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.DefaultConjunctionOperatorSymbol">
            <summary>Ampersand</summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.DefaultNegationOperatorSymbol">
            <summary>Minus sign (-)</summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.DefaultRepetitionOperatorSymbol">
            <summary>Asterisk (*)</summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.DefaultRepetitionBlockOpeningSymbol">
            <summary>Open curly brace ({)</summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.DefaultRepetitionBlockClosingSymbol">
            <summary>Close curly brace (})</summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.DefaultOptionalBlockOpeningSymbol">
            <summary>Opene square bracket ([)</summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.DefaultOptionalBlockClosingSymbol">
            <summary>Close square bracket (])</summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.DefaultGroupingBlockOpeningSymbol">
            <summary>Open parenthesis</summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.DefaultGroupingBlockClosingSymbol">
            <summary>Close parenthesis</summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.DefaultCommentBlockOpeningSymbol">
            <summary>Open parenthesis followed by asterisk '(*'</summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.DefaultCommentBlockClosingSymbol">
            <summary>Asterisk followed by close parenthesis '(*'</summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.DefaultCommentLineSymbol">
            <summary>An empty string.</summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.DefaultSpecialSequenceSymbol">
            <summary>Question mark (?)</summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.Reset">
            <summary>
            Restores all property values to their respective defaults.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.LoadFromXml(System.String)">
            <summary>
            Initializes this object from the XML data found at the specified path.
            </summary>
            <param name="path">Full path to the file.</param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.SaveAsXml(System.String)">
            <summary>
            Saves the state of this object to the specified path.
            </summary>
            <param name="path">Full path to the file.</param>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.QuoteSymbol">
            <summary>Returns or sets the symbol which is used to enclose literal strings.</summary>
            <remarks>
            <p class="body">
            Any literal string in the script containing the QuoteSymbol must be
            escaped by preceding it with a single backslash (ASCII 0x5C hex) character.
            </p>
            </remarks>        
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.AssignmentSymbol">
            <summary>Returns or sets the symbol which is used to represent assignment of a right-hand expression to a non-terminal.</summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.EndOfStatementSymbol">
            <summary>Returns or sets the symbol which is used to represent the end of a production rule statement.</summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.AlternationOperatorSymbol">
            <summary>Returns or sets the symbol which is used to represent the alternation (logical 'OR') operator.</summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.ConcatenationOperatorSymbol">
            <summary>Returns or sets the symbol which is used to represent the concatenation operator.</summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.ConjunctionOperatorSymbol">
            <summary>Returns or sets the symbol which is used to represent the conjunction (logical 'AND') operator.</summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.NegationOperatorSymbol">
            <summary>Returns or sets the symbol which is used to represent the negation (logical 'NAND') operator.</summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.RepetitionOperatorSymbol">
            <summary>Returns or sets the symbol which is used to represent the shorthand repetition operator.</summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.RepetitionBlockOpeningSymbol">
            <summary>Returns or sets the symbol which is used to represent the beginning of a repetition block.</summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.RepetitionBlockClosingSymbol">
            <summary>Returns or sets the symbol which is used to represent the end of a repetition block.</summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.OptionalBlockOpeningSymbol">
            <summary>Returns or sets the symbol which is used to represent the beginning of an optional block.</summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.OptionalBlockClosingSymbol">
            <summary>Returns or sets the symbol which is used to represent the end of an optional block.</summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.GroupingBlockOpeningSymbol">
            <summary>Returns or sets the symbol which is used to represent the beginning of a grouping block.</summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.GroupingBlockClosingSymbol">
            <summary>Returns or sets the symbol which is used to represent the end of a grouping block.</summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.CommentBlockOpeningSymbol">
            <summary>Returns or sets the symbol which is used to represent the beginning of a comment block.</summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.CommentBlockClosingSymbol">
            <summary>Returns or sets the symbol which is used to represent the end of a comment block.</summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.CommentLineSymbol">
            <summary>Returns or sets the symbol which is used to represent the beginning of a comment line.</summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.SpecialSequenceSymbol">
            <summary>Returns or sets the symbol which is used to represent the beginning and end of a special sequence block.</summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.EbnfDefinition">
            <summary>
            Returns an
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotationDefinition">EbnfParserNotationDefinition</see>
            instance.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.TerminalSymbolPropertyIdentifiers">
            <summary>
            Provides information about properties of the
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            class.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.TerminalSymbolPropertyIdentifiers.Name">
            <summary>
            Identifies the
            <see cref="P:Infragistics.SyntaxParsing.Symbol.Name">Name</see>
            property.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.TerminalSymbolPropertyIdentifiers.Value">
            <summary>
            Identifies the
            <see cref="P:Infragistics.SyntaxParsing.TerminalSymbol.Value">Value</see>
            property.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.TerminalSymbolPropertyIdentifiers.Comparison">
            <summary>
            Identifies the
            <see cref="P:Infragistics.SyntaxParsing.TerminalSymbol.Comparison">Comparison</see>
            property.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.TerminalSymbolPropertyIdentifiers.BoundaryPattern">
            <summary>
            Identifies the
            <see cref="P:Infragistics.SyntaxParsing.TerminalSymbol.BoundaryPattern">BoundaryPattern</see>
            property.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.TerminalSymbolPropertyIdentifiers.LanguageElement">
            <summary>
            Identifies the
            <see cref="P:Infragistics.SyntaxParsing.TerminalSymbol.LanguageElement">LanguageElement</see>
            property.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.TerminalSymbolPropertyIdentifiers.DisplayText">
            <summary>
            Identifies the
            <see cref="P:Infragistics.SyntaxParsing.TerminalSymbol.ConsumesText">ConsumesText</see>
            property.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.TerminalSymbolPropertyIdentifiers.Lookahead">
            <summary>
            Identifies the
            <see cref="P:Infragistics.SyntaxParsing.TerminalSymbol.LanguageElement">Lookahead</see>
            property.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.TerminalSymbolPropertyIdentifiers.GetPropertyType(System.String)">
            <summary>
            Returns the type of the property corresponding to the specified identifier name.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.TerminalSymbolPropertyIdentifiers.All">
            <summary>
            Returns a string array containing the names of the identifiers.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.LexerStatePropertyIdentifiers">
            <summary>
            Provides information about properties of the
            <see cref="T:Infragistics.SyntaxParsing.LexerState">LexerState</see>
            class.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.LexerStatePropertyIdentifiers.Name">
            <summary>
            Identifies the
            <see cref="P:Infragistics.SyntaxParsing.LexerState.Name">Name</see>
            property.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.LexerStatePropertyIdentifiers.EnterSymbol">
            <summary>
            Identifies the
            <see cref="P:Infragistics.SyntaxParsing.LexerState.EnterSymbol">EnterSymbol</see>
            property.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.LexerStatePropertyIdentifiers.ExitSymbol">
            <summary>
            Identifies the
            <see cref="P:Infragistics.SyntaxParsing.LexerState.ExitSymbol">ExitSymbol</see>
            property.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.LexerStatePropertyIdentifiers.Symbol">
            <summary>
            Identifies an item in the
            <see cref="P:Infragistics.SyntaxParsing.LexerState.Symbols">Symbols</see>
            list.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.LexerStatePropertyIdentifiers.ExitOnNewLine">
            <summary>
            Identifies the
            <see cref="P:Infragistics.SyntaxParsing.LexerState.ExitOnNewLine">ExitOnNewLine</see>
            property.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.LexerStatePropertyIdentifiers.Parent">
            <summary>
            Identifies the
            <see cref="P:Infragistics.SyntaxParsing.LexerState.Parent">Parent</see>
            property.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.LexerStatePropertyIdentifiers.GetPropertyType(System.String)">
            <summary>
            Returns the type of the property corresponding to the specified identifier name.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.LexerStatePropertyIdentifiers.All">
            <summary>
            Returns a string array containing the names of the identifiers.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.GrammarPropertyIdentifiers">
            <summary>
            Provides information about properties of the
            <see cref="T:Infragistics.SyntaxParsing.Grammar">Grammar</see>
            class.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.GrammarPropertyIdentifiers.Name">
            <summary>
            Identifies the
            <see cref="P:Infragistics.SyntaxParsing.Grammar.Name">Name</see>
            property.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.GrammarPropertyIdentifiers.WhitespaceSymbolName">
            <summary>
            Identifies the
            <see cref="P:Infragistics.SyntaxParsing.Grammar.WhitespaceSymbolName">WhitespaceSymbolName</see>
            property.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.GrammarPropertyIdentifiers.NewLineSequence">
            <summary>
            Identifies the
            <see cref="P:Infragistics.SyntaxParsing.Grammar.NewLineSequence">NewLineSequence</see>
            property.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.GrammarPropertyIdentifiers.NewLineSymbolName">
            <summary>
            Identifies the
            <see cref="P:Infragistics.SyntaxParsing.Grammar.NewLineSymbolName">NewLineSymbolName</see>
            property.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.GrammarPropertyIdentifiers.StartSymbol">
            <summary>
            Identifies the
            <see cref="P:Infragistics.SyntaxParsing.Grammar.StartSymbol">StartSymbol</see>
            property.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.GrammarPropertyIdentifiers.GetPropertyType(System.String)">
            <summary>
            Returns the type of the property corresponding to the specified identifier name.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.GrammarPropertyIdentifiers.All">
            <summary>
            Returns a string array containing the names of the identifiers.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotationDefinition">
            <summary>
            Returns a
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation">EbnfParserNotation</see>
            with all properties set to values which comply with ISO standard 14977 for Extended Backus-Naur Form.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotationDefinition.Instance">
            <summary>
            Returns a singleton instance of this class.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Ebnf.GrammarStatement">
            <summary>
            Encapsulates a production rule statement as parsed from
            a grammar definition script.
            </summary>
            <remarks>
            <p class="body">
            When a grammar definition script is parsed, each occurrence of the
            <see cref="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.EndOfStatementSymbol">EndOfStatementSymbol</see>
            marks the end of a grammar statement; a GrammarStatement instance is created for the content preceding that marker.
            </p>
            <p class="body">
            The resulting GrammarStatement is then tokenized, using the symbols as defined by the associated
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation">EbnfParserNotation</see>.
            Each successfully parsed token appears as a member of the
            <see cref="P:Infragistics.SyntaxParsing.Ebnf.GrammarStatement.Tokens">Tokens</see>
            collection.
            </p>
            </remarks> 
        </member>
        <member name="M:Infragistics.SyntaxParsing.Ebnf.GrammarStatement.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Ebnf.GrammarStatement.GetLine(Infragistics.SyntaxParsing.Ebnf.StatementToken)">
            <summary>
            Returns a string containing the line on which the specified
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.StatementToken">token</see>
            appears.
            </summary>
            <param name="token">The token to test.</param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Ebnf.GrammarStatement.GetLine(Infragistics.SyntaxParsing.Ebnf.StatementToken,System.Int32@)">
            <summary>
            Returns a string containing the line on which the specified
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.StatementToken">token</see>
            appears.
            </summary>
            <param name="token">The token to test.</param>
            <param name="characterPosition">
            [out] Upon return, contains the character position at which the line begins.
            </param>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.GrammarStatement.Text">
            <summary>
            Returns the string value which was parsed from the script to create
            this statement.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.GrammarStatement.CharacterPosition">
            <summary>
            Returns the position of the first character of this statement,
            as relative to the first character in the associated script.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.GrammarStatement.TokenList">
            <summary>
            Returns a list of the tokens which comprise this statement, in hierarchical form.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.GrammarStatement.FlatList">
            <summary>
            Returns a flat list of the tokens which comprise this statement.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.GrammarStatement.Tokens">
            <summary>
            Returns a read-only collection containing the
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.StatementToken">StatementToken</see>
            instances of which this statement is comprised.
            </summary>
            <remarks>
            <p class="body">
            The collection returned from this property contains a token for each
            parsed symbol, in the same order in which they appear in the imported
            script. Iterating this list and concatenating the value of each member's
            <see cref="P:Infragistics.SyntaxParsing.Ebnf.StatementToken.Text">Text</see>
            property will reconstruct the original string.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.GrammarStatement.Symbol">
            <summary>
            Returns the
            <see cref="T:Infragistics.SyntaxParsing.Symbol">symbol</see>
            whose declaration this statement represents, or null if the
            statement does not represent a declaration.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.GrammarStatement.Declaration">
            <summary>
            Returns the
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.SymbolToken">SymbolToken</see>
            which represents this statement's declaration, or null if the
            statement does not represent a declaration.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Ebnf.EbnfParseError">
            <summary>
            Encapsulates an error that was encountered while attempting to
            import a grammar definition script.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Ebnf.StatementToken">
            <summary>
            Base class for objects which represent the tokens which comprise a
            production rule or terminal symbol declaration in an Ebnf script.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Ebnf.StatementToken.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Ebnf.StatementToken.GetLineNumber(System.Int32,System.Int32@)">
            <summary>
            Returns the one-based line number and column position of the specified character.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.StatementToken.IsWhitespace">
            <summary>
            Returns false for this class.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.StatementToken.CharacterPosition">
            <summary>
            Returns the zero-based character position, relative to the
            first character of the text being parsed, at which this token appears.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.StatementToken.Text">
            <summary>
            Returns the string value that was matched to produce this token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.StatementToken.Length">
            <summary>
            Returns the length of the string returned from the
            <see cref="P:Infragistics.SyntaxParsing.Ebnf.StatementToken.Text">Text</see>
            property.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.StatementToken.LineNumber">
            <summary>
            Returns the one-based line number at which this token appears,
            as relative to the first character in the input text.
            </summary>
            <remarks>
            <p class="body">
            Line number are determined by counting the number of newlines that precede
            the token, with the newline character(s) being defined by the value of the grammar's
            <see cref="P:Infragistics.SyntaxParsing.Ebnf.EbnfParser.NewLine">NewLine</see>
            property.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.StatementToken.Column">
            <summary>
            Returns the one-based column number at which this token appears,
            as relative to the first character of the line containing the token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.StatementToken.TokenType">
            <summary>
            When overridden in a derivеd class, returns a value which
            identifies the type of the token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.StatementToken.HasTokens">
            <summary>
            When overridden in a derived class, returns a boolean value
            indicating whether this token has child tokens.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.StatementToken.Statement">
            <summary>
            Returns the
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.GrammarStatement">GrammarStatement</see>
            from which this token was parsed.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.StatementToken.IsSignificant">
            <summary>
            Returns a boolean value indicating whether this token
            represents significant content.
            </summary>
            <remarks>
            <p class="body">
            This property returns false for the following classes:
            <ul>
                <li>
                <see cref="T:Infragistics.SyntaxParsing.Ebnf.WhitespaceToken">WhitespaceToken</see>
                <see cref="T:Infragistics.SyntaxParsing.Ebnf.SpecialSequence">SpecialSequence</see>
                <see cref="T:Infragistics.SyntaxParsing.Ebnf.CommentBlock">CommentBlock</see>
                </li>
            </ul>
            All other derived classes return true.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.StatementToken.Parent">
            <summary>
            Returns the
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.StatementToken">StatementToken</see>
            which contains this child token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.StatementToken.Context">
            <summary>
            Returns the context-sensitive value associated with this token,
            or null if not applicable.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Ebnf.EbnfParseError.GetLineNumber(System.Int32,System.Int32@)">
            <summary>
            Returns the one-based line number and column position of the specified character.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Ebnf.EbnfParseError.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.EbnfParseError.Reason">
            <summary>
            Returns a constant which identifies the reason for the error.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.EbnfParseError.Description">
            <summary>
            Returns the human-readable description of the error.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.EbnfParseError.TokenType">
            <summary>
            Returns StatementTokenType.Error.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Ebnf.EbnfParseResult">
            <summary>
            Describes the result of a grammar definition import operation.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Ebnf.EbnfParseResult.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.EbnfParseResult.Success">
            <summary>
            Returns a boolean value indicating whether the import
            operation was successful.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.EbnfParseResult.Errors">
            <summary>
            Returns a read-only collection containing an
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.EbnfParseError">EbnfParseError</see>
            instance for each error that occurred during the import operation.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Ebnf.OperatorToken">
            <summary>
            Base class for tokens which represent logical operators.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.OperatorToken.TokenType">
            <summary>
            Not supported
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Ebnf.AlternationOperator">
            <summary>
            Represents the alternation operator (typically a '|' character).
            </summary>
            <seealso cref="T:Infragistics.SyntaxParsing.AlternationRule">AlternationRule</seealso>
            <seealso cref="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.AlternationOperatorSymbol">AlternationOperatorSymbol</seealso>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.AlternationOperator.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Ebnf.ConcatenationOperator">
            <summary>
            Represents the concatenation operator (typically a ',' character).
            </summary>
            <seealso cref="T:Infragistics.SyntaxParsing.ConcatenationRule">ConcatentationRule</seealso>
            <seealso cref="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.ConcatenationOperatorSymbol">ConcatenationOperatorSymbol</seealso>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.ConcatenationOperator.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Ebnf.ConjunctionOperator">
            <summary>
            Represents the concatenation operator (typically an ampersand).
            </summary>
            <seealso cref="T:Infragistics.SyntaxParsing.ConjunctionRule">ConjunctionRule</seealso>
            <seealso cref="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.ConjunctionOperatorSymbol">ConjunctionOperatorSymbol</seealso>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.ConjunctionOperator.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Ebnf.NegationOperator">
            <summary>
            Represents the concatenation operator (typically a '-' character).
            </summary>
            <seealso cref="T:Infragistics.SyntaxParsing.NegationRule">NegationRule</seealso>
            <seealso cref="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.NegationOperatorSymbol">NegationOperatorSymbol</seealso>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.NegationOperator.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Ebnf.SyntacticFactor">
            <summary>
            Represents the repetition operator (typically a '*' character).
            </summary>
            <remarks>
            <p class="body">
            When prefixed with an integer value, the
            <see cref="P:Infragistics.SyntaxParsing.Ebnf.SyntacticFactor.Factor">Factor</see>
            is assigned that integer value. When no integer value precedes the repetition operator,
            the Minimum property resolves to 1, and the Maximum property resolves to null, resulting
            in "one or more" repetitions.
            </p>
            </remarks> 
            <seealso cref="T:Infragistics.SyntaxParsing.RepetitionRule">RepetitionRule</seealso>
            <seealso cref="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.RepetitionOperatorSymbol">RepetitionOperatorSymbol</seealso>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.SyntacticFactor.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.SyntacticFactor.Factor">
            <summary>
            Returns the repetition factor.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Ebnf.NonTerminalSymbolToken">
            <summary>
            Represents a reference to a
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>.
            </summary>
            <seealso cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</seealso>
            <seealso cref="T:Infragistics.SyntaxParsing.NonTerminalRule">NonTerminalRule</seealso>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Ebnf.SymbolToken">
            <summary>
            Base class for tokens which represent terminal and non-terminal symbols.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Ebnf.SymbolToken.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.SymbolToken.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.SymbolToken.Symbol">
            <summary>
            Returns the
            <see cref="T:Infragistics.SyntaxParsing.Symbol">Symbol</see>
            associated with this token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.NonTerminalSymbolToken.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.NonTerminalSymbolToken.NonTerminalSymbol">
            <summary>
            Returns a reference to the associated
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.NonTerminalSymbolToken.Symbol">
            <summary>
            Returns a reference to the associated
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Ebnf.TerminalSymbolToken">
            <summary>
            Represents a reference to a
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>.
            </summary>
            <seealso cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</seealso>
            <seealso cref="T:Infragistics.SyntaxParsing.TerminalRule">TerminalRule</seealso>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.TerminalSymbolToken.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.TerminalSymbolToken.TerminalSymbol">
            <summary>
            Returns a reference to the associated
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.TerminalSymbolToken.Symbol">
            <summary>
            Returns a reference to the associated
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.TerminalSymbolToken.FromReference">
            <summary>
            Returns a boolean value indicating whether this token was created
            by parsing a reference to a
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.TerminalSymbolDeclaration">TerminalSymbolDeclaration</see>.
            </summary>
            <remarks>
            <p class="body">
            TerminalSymbols are declared implicitly when a literal string is encountered
            for the first time within the grammar script; subsequent occurrences of that
            literal string are interpreted as a reference to the TerminalSymbol.
            </p>
            </remarks> 
        </member>
        <member name="T:Infragistics.SyntaxParsing.Ebnf.Comment">
            <summary>
            Represents a comment.
            </summary>
            <remarks>
            <p class="body">
            Text found within a comment block is ignored by the token processing layer.
            </p>
            </remarks> 
            <seealso cref="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.CommentBlockOpeningSymbol">CommentBlockOpeningSymbol</seealso>
            <seealso cref="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.CommentBlockClosingSymbol">CommentBlockClosingSymbol</seealso>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Ebnf.Comment.GetLineNumber(System.Int32,System.Int32@)">
            <summary>
            Returns the one-based line number and column position of the specified character.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.Comment.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.Comment.IsSignificant">
            <summary>
            Returns false to indicate that this class does not represent significant content.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Ebnf.CommentBlock">
            <summary>
            Represents a block of text that is enclosed between a
            <see cref="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.CommentBlockOpeningSymbol">CommentBlockOpeningSymbol</see>
            and a
            <see cref="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.CommentBlockClosingSymbol">CommentBlockClosingSymbol</see>
            </summary>
            <remarks>
            <p class="body">
            Text found within a comment block is ignored by the token processing layer.
            </p>
            </remarks> 
            <seealso cref="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.CommentBlockOpeningSymbol">CommentBlockOpeningSymbol</seealso>
            <seealso cref="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.CommentBlockClosingSymbol">CommentBlockClosingSymbol</seealso>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.CommentBlock.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Ebnf.CommentLine">
            <summary>
            Represents a line of text that begins with the
            <see cref="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.CommentLineSymbol">CommentLineSymbol</see>.
            </summary>
            <remarks>
            <p class="body">
            Text found on a line which begins with this symbol is ignored by the token processing layer.
            </p>
            </remarks> 
            <seealso cref="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.CommentLineSymbol">CommentLineSymbol</seealso>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.CommentLine.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Ebnf.SpecialSequence">
            <summary>
            Represents a block of text that is enclosed between a pair of
            <see cref="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.SpecialSequenceSymbol">SpecialSequenceSymbols</see>.
            </summary>
            <seealso cref="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.SpecialSequenceSymbol">SpecialSequenceSymbol</seealso>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Ebnf.SpecialSequence.GetContext(System.Boolean)">
            <summary>
            Returns the context-sensitive value associated with this token,
            or null if not applicable.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Ebnf.SpecialSequence.IsXmlTagSupported(System.String)">
            <summary>
            Returns a boolean value indicating whether an XML tag
            with the specified name is supported within this
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.SpecialSequence">SpecialSequence</see>.
            </summary>
            <param name="elementName">The name to test</param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Ebnf.SpecialSequence.GetPropertyType(System.String)">
            <summary>
            Returns the type of the specified property, or null if
            the specified property name is not supported.
            </summary>
            <param name="name">
            The name of the property. Must exist in the list of names returned from the
            <see cref="P:Infragistics.SyntaxParsing.Ebnf.SpecialSequence.SupportedXmlTags">SupportedXmlTags</see>
            property.
            </param>
            <returns>A type or null.</returns>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.SpecialSequence.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.SpecialSequence.SpecialSequenceType">
            <summary>
            Returns a constant which identifies the type of the associated special sequence.
            </summary>
            <seealso cref="T:Infragistics.SyntaxParsing.Ebnf.SpecialSequenceType">SpecialSequenceType enumeration</seealso>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.SpecialSequence.HasTokens">
            <summary>
            Returns a boolean value indicating whether this token has child tokens.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.SpecialSequence.Tokens">
            <summary>
            Returns the child tokens for this token, or null if
            this token has no child tokens.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.SpecialSequence.Text">
            <summary>
            Returns the text for this token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.SpecialSequence.IsSignificant">
            <summary>
            Returns false to indicate that this class does not represent significant content.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.SpecialSequence.SupportedXmlTags">
            <summary>
            Returns a list of strings which represents the name of each
            XML tag supported by this
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.SpecialSequence">SpecialSequence</see>.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Ebnf.NonTerminalSymbolDeclaration">
            <summary>
            Represents the declaration of a
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.NonTerminalSymbolDeclaration.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Ebnf.TerminalSymbolDeclaration">
            <summary>
            Represents the declaration of a
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Ebnf.TerminalSymbolDeclaration.FindValueToken(System.String)">
            <summary>
            Finds the
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.XmlValueToken">XmlValueToken</see>
            whose
            <see cref="P:Infragistics.SyntaxParsing.Ebnf.XmlTokenBase.ElementName">ElementName</see>
            property matches the specified <paramref name="elementName"/>.
            </summary>
            <param name="elementName">
            The
            <see cref="P:Infragistics.SyntaxParsing.Ebnf.XmlTokenBase.ElementName">ElementName</see>
            to match.
            </param>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.TerminalSymbolDeclaration.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.TerminalSymbolDeclaration.HasTokens">
            <summary>
            Returns a boolean value indicating whether this token has child tokens.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.TerminalSymbolDeclaration.Tokens">
            <summary>
            Returns the child tokens for this token, or null if
            this token has no child tokens.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.TerminalSymbolDeclaration.Text">
            <summary>
            Returns the text for this token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.OperationGroup.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.OperationGroup.HasTokens">
            <summary>
            Returns a boolean value indicating whether this group has any elements in its Tokens collection.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.OperationGroup.Tokens">
            <summary>
            Returns a collection which contains the tokens which belong to this group.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.OptionalGroup.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.RepetitionGroup.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.RepetitionGroup.Minimum">
            <summary>
            Returns the minimum number of repetitions.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.RepetitionGroup.Maximum">
            <summary>
            Returns the maximum number of repetitions, or null
            if the repetition rule is not to be contrained by an upper limit.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.AlternationGroup.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.ConcatenationGroup.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.ConjunctionGroup.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.NegationGroup.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Ebnf.AssignmentToken">
            <summary>
            Represents the assignment operator (typically an equals sign ('=')).
            </summary>
            <seealso cref="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.AssignmentSymbol">AssignmentSymbol</seealso>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.AssignmentToken.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Ebnf.EndOfStatementToken">
            <summary>
            Represents the end of statement operator (typically a semicolon (';')).
            </summary>
            <seealso cref="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.EndOfStatementSymbol">EndOfStatementSymbol</seealso>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.EndOfStatementToken.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.IdentifierToken.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Ebnf.LiteralStringToken">
            <summary>
            Represents a literal string.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.LiteralStringToken.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Ebnf.WhitespaceToken">
            <summary>
            Represents a continuous run of whitespace characters,
            i.e., space, tab, and carriage-return/line-feed.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.WhitespaceToken.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.WhitespaceToken.IsWhitespace">
            <summary>
            Returns true for this class.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.WhitespaceToken.IsSignificant">
            <summary>
            Returns false to indicate that this class does not represent significant content.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Ebnf.BlockSymbol">
            <summary>
            Represents an opening or closing symbol for an operation group,
            optional group, or repetition group.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.BlockSymbol.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.BlockSymbol.Match">
            <summary>
            Returns the
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.BlockSymbol">BlockSymbol</see>
            which matches this instance, or null if there is no match.
            </summary>
            <remarks>
            <p class="body">
            If this symbol represents the opening of a block, this property returns the closing symbol.
            If this symbol represents the closing of a block, this property returns the opening symbol.
            </p>
            </remarks>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Ebnf.UnrecognizedContentToken">
            <summary>
            Represents content which was not recognized by the importer.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.UnrecognizedContentToken.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Ebnf.XmlTokenBase">
            <summary>
            Represents an element of extensible markup language (XML).
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.XmlTokenBase.TokenType">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.XmlTokenBase.ElementName">
            <summary>
            Returns the name of the Xml element associated with this token.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Ebnf.XmlTagToken">
            <summary>
            Represents an opening or closing Xml tag.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.XmlTagToken.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.XmlTagToken.IsOpening">
            <summary>
            Returns true if this tag is the opening tag for the element.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.XmlTagToken.Text">
            <summary>
            Returns the text for this token.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Ebnf.XmlValueToken">
            <summary>
            Represents the value of an Xml element.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Ebnf.XmlValueToken.EscapeXml(System.String)">
            <summary>
            Escapes the specified string to replace XML codes,
            tabs, newlines, and the
            <see cref="P:Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation.SpecialSequenceSymbol">SpecialSequenceSymbol</see>.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Ebnf.XmlValueToken.ToXmlEscapeCodes(System.String)">
            <summary>
            Converts the specified string to the equivalent numeric XML escape codes
            </summary>
            <param name="value">The string value to convert</param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Ebnf.XmlValueToken.ToXmlEscapeCodes(System.String,System.Boolean)">
            <summary>
            Converts the specified string to the equivalent numeric XML escape codes
            </summary>
            <param name="value">The string value to convert</param>
            <param name="hexadecimal">A boolean value indicating whether the character codes are represented in hexadecimal format.</param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Ebnf.XmlValueToken.UnescapeXml(System.String)">
            <summary>
            Unescapes XML codes in the specified string.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Ebnf.XmlValueToken.UnescapeXml(Infragistics.SyntaxParsing.Ebnf.EbnfParserNotation,System.String)">
            <summary>
            Unescapes XML codes in the specified string, using the specified grammar notation.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.XmlValueToken.UnescapedText">
            <summary>
            Returns the text with any escape characters removed.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.XmlValueToken.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Ebnf.SpecialSequenceSymbol">
            <summary>
            Represents the symbol which denotes a special sequence.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.SpecialSequenceSymbol.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Ebnf.LexerStateDeclaration">
            <summary>
            Represents the declaration of a
            <see cref="T:Infragistics.SyntaxParsing.LexerState">LexerState</see>.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Ebnf.LexerStateDeclaration.FindValueToken(System.String)">
            <summary>
            Finds the
            <see cref="T:Infragistics.SyntaxParsing.Ebnf.XmlValueToken">XmlValueToken</see>
            whose
            <see cref="P:Infragistics.SyntaxParsing.Ebnf.XmlTokenBase.ElementName">ElementName</see>
            property matches the specified <paramref name="elementName"/>.
            </summary>
            <param name="elementName">
            The
            <see cref="P:Infragistics.SyntaxParsing.Ebnf.XmlTokenBase.ElementName">ElementName</see>
            to match.
            </param>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.LexerStateDeclaration.TokenType">
            <summary>
            Returns the type of this token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.LexerStateDeclaration.HasTokens">
            <summary>
            Returns a boolean value indicating whether this token has child tokens.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.LexerStateDeclaration.Tokens">
            <summary>
            Returns the child tokens for this token, or null if
            this token has no child tokens.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.LexerStateDeclaration.Text">
            <summary>
            Returns the text for this token.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Ebnf.LexerStateDeclaration.LexerState">
            <summary>
            Returns the
            <see cref="T:Infragistics.SyntaxParsing.LexerState">LexerState</see>
            whose declaration this token represents.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.IServiceLocator">
            <summary>
            Defines a interface for an object that provides support for registering, unregistering and locating instances of objects that provide specific services.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.IServiceLocator.RegisterService(System.Type,System.Object)">
            <summary>
            Registers a core service of type 'serviceType'.
            </summary>
            <remarks>
            <para class="body">Only one instance of a core service type can be registered.  Core service types are used to provide essential services.
            To register a non-core service type use the RegisterService overload that takes a string key.</para>
            </remarks>
            <param name="serviceType">The core service Type to register.</param>
            <param name="service">The core service instance to register.</param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.IServiceLocator.RegisterService(System.String,System.Object)">
            <summary>
            Registers a non-core service with a unique string key.
            </summary>
            <remarks>
            <para class="body">Each non-core service must be registered with a unique string key.  There are no requirements on the
            format of the key.</para>
            </remarks>
            <param name="serviceKey">The unique string key of the non-core service Type to register.</param>
            <param name="service">The non-core service instance to register.</param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.IServiceLocator.UnregisterService(System.Type)">
            <summary>
            Unregisters a service of type 'serviceType'.
            </summary>
            <param name="serviceType">The Type of the service to unregister.</param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.IServiceLocator.GetService(System.Type)">
            <summary>
            Gets a registered service of type 'serviceType'.
            </summary>
            <param name="serviceType">The Type of the service to get.</param>
            <returns>The service instance if the service is found otherwise null.</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.IServiceLocator.GetRegisteredCoreServices">
            <summary>
            Returns an enumerable of registered core services.
            </summary>
            <returns>An enumerable of core services</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.IServiceLocator.GetRegisteredCoreServiceTypes">
            <summary>
            Returns an enumerable of registered core service types.
            </summary>
            <returns>An enumerable of core service types</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.IServiceLocator.GetRegisteredNonCoreServices">
            <summary>
            Returns an enumerable of registered non-core services.
            </summary>
            <returns>An enumerable of registered non-core services</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.IServiceLocator.GetRegisteredNonCoreServiceKeys">
            <summary>
            Returns an enumerable of registered non-core service keys.
            </summary>
            <returns>An enumerable of non-core service keys</returns>
        </member>
        <member name="E:Infragistics.SyntaxParsing.IServiceLocator.CoreServiceAdded">
            <summary>
            Raised after a core service is added.
            </summary>
            <seealso cref="T:Infragistics.SyntaxParsing.CoreServiceEventArgs"/>
        </member>
        <member name="E:Infragistics.SyntaxParsing.IServiceLocator.CoreServiceRemoved">
            <summary>
            Raised after a core service is removed.
            </summary>
            <seealso cref="T:Infragistics.SyntaxParsing.CoreServiceEventArgs"/>
        </member>
        <member name="E:Infragistics.SyntaxParsing.IServiceLocator.NonCoreServiceAdded">
            <summary>
            Raised after a non-core service is added.
            </summary>
            <seealso cref="T:Infragistics.SyntaxParsing.NonCoreServiceEventArgs"/>
        </member>
        <member name="E:Infragistics.SyntaxParsing.IServiceLocator.NonCoreServiceRemoved">
            <summary>
            Raised after a non-core service is removed.
            </summary>
            <seealso cref="T:Infragistics.SyntaxParsing.NonCoreServiceEventArgs"/>
        </member>
        <member name="T:Infragistics.SyntaxParsing.CoreServiceEventArgs">
            <summary>
            Provides contextual information for the <see cref="E:Infragistics.SyntaxParsing.IServiceLocator.CoreServiceAdded"/> and <see cref="E:Infragistics.SyntaxParsing.IServiceLocator.CoreServiceRemoved"/> events.
            </summary>
            <seealso cref="E:Infragistics.SyntaxParsing.IServiceLocator.CoreServiceAdded"/>
            <seealso cref="E:Infragistics.SyntaxParsing.IServiceLocator.CoreServiceRemoved"/>
        </member>
        <member name="M:Infragistics.SyntaxParsing.CoreServiceEventArgs.#ctor(System.Type,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="serviceType">The Type of the core service.</param>
            <param name="service">The core service instance.</param>
        </member>
        <member name="P:Infragistics.SyntaxParsing.CoreServiceEventArgs.ServiceType">
            <summary>
            The type of the core service.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.CoreServiceEventArgs.Service">
            <summary>
            The core service instance.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.NonCoreServiceEventArgs">
            <summary>
            Provides contextual information for the <see cref="E:Infragistics.SyntaxParsing.IServiceLocator.NonCoreServiceAdded"/> and <see cref="E:Infragistics.SyntaxParsing.IServiceLocator.NonCoreServiceRemoved"/> events.
            </summary>
            <seealso cref="E:Infragistics.SyntaxParsing.IServiceLocator.NonCoreServiceAdded"/>
            <seealso cref="E:Infragistics.SyntaxParsing.IServiceLocator.NonCoreServiceRemoved"/>
        </member>
        <member name="M:Infragistics.SyntaxParsing.NonCoreServiceEventArgs.#ctor(System.String,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="serviceKey">The key of the non-core service.</param>
            <param name="service">The non-core service instance.</param>
        </member>
        <member name="P:Infragistics.SyntaxParsing.NonCoreServiceEventArgs.ServiceKey">
            <summary>
            The key of the non-core service.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.NonCoreServiceEventArgs.Service">
            <summary>
            The non-core service instance.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.CSharpLanguage">
            <summary>
            CSharpLanguage class (auto-generated 9/21/2012 10:40:50 AM)
            </summary>
        </member>
        <member name="M:Infragistics.Documents.CSharpLanguage.#ctor">
            <summary>
            Creates a new instance of the CSharpLanguage class.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.CSharpLanguage.InitializeGrammarProperties(Infragistics.SyntaxParsing.Grammar)">
            <summary>
            Initializes the properties of the associated Grammar.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.CSharpLanguage.CreateTerminalSymbols(Infragistics.SyntaxParsing.Grammar)">
            <summary>
            Creates the TerminalSymbols for the associated Grammar.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.CSharpLanguage.CreateLexerStates(Infragistics.SyntaxParsing.Grammar)">
            <summary>
            Creates the LexerStates for the associated Grammar.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.CSharpLanguage.CreateNonTerminalSymbols(Infragistics.SyntaxParsing.Grammar)">
            <summary>
            Creates the CreateNonTerminalSymbols for the associated Grammar.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.CSharpLanguage.CreateSyntaxRules(Infragistics.SyntaxParsing.Grammar)">
            <summary>
            Creates the syntax rules for the associated Grammar.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.CSharpLanguage.SetStartSymbol(Infragistics.SyntaxParsing.Grammar)">
            <summary>
            Sets the StartSymbol for the associated Grammar.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.CSharpLanguage.GetLALRParseTableData(Infragistics.SyntaxParsing.Parser.LALRParser.ParseState[]@,System.Int32[]@,Infragistics.SyntaxParsing.Parser.LALRParser.AmbiguousParseAction[]@)">
            <summary>
            Creates a table containing the state transition data for an LALR parser.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.CSharpLanguage.GetErrorAlias(Infragistics.SyntaxParsing.Symbol)">
            <summary>
            Returns a customized error alias for the specified symbol
            </summary>
        </member>
        <member name="M:Infragistics.Documents.CSharpLanguage.IncludeInSyntaxTree(Infragistics.SyntaxParsing.Parser.ParseContext)">
            <summary>
            Returns a boolean value indicating whether syntax nodes created
            for the specified nonTerminalSymbol appear in the syntax tree,
            regardless of whether they contain any terminals as immediate children.
            </summary>
            <remarks>
            <p class="body">
            The IncludeInSyntaxTree method is only called when the
            <see cref="P:Infragistics.SyntaxParsing.LanguageBase.SyntaxTreePruningMode">SyntaxTreePruningMode</see>
            property returns 'Custom'.
            </p>
            <p class="body">
            By default, non-terminal nodes whose
            <see cref="P:Infragistics.SyntaxParsing.Symbol.Name">name</see>
            is prefaced with an underscore are not included in the syntax tree;
            nor are non-terminal nodes with only one child node, where that child
            node is itself a non-terminal.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Documents.CSharpLanguage.Instance">
            <summary>
            Returns a static instance of the language (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Documents.CSharpLanguage.Guid">
            <summary>
            Returns a Guid which uniquely identifies this language.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.CSharpLanguage.SyntaxTreePruningMode">
            <summary>
            Returns a value which indicates whether a non-terminal
            <see cref="T:Infragistics.SyntaxParsing.SyntaxNode">syntax node</see>
            appears in the
            <see cref="T:Infragistics.SyntaxParsing.SyntaxTree">syntax tree</see>
            produced when a document is parsed.
            </summary>
            <remarks>
            <p class="body">
            By default, non-terminal nodes which have only one child, where that child
            is itself a non-terminal node, do not appear in the syntax tree. Non-terminal
            nodes whose name is prefixed with an underscore ('_') also do not appear.
            </p>
            </remarks>
        </member>
        <member name="T:Infragistics.Documents.CustomLanguage">
            <summary>
            An object representing the 'C#' coding language.
            </summary>
            <seealso cref="T:Infragistics.SyntaxParsing.Grammar"/>
        </member>
        <member name="M:Infragistics.Documents.CustomLanguage.#ctor(Infragistics.SyntaxParsing.Grammar)">
            <summary>
            Instantiates a new instance of <see cref="T:Infragistics.Documents.CustomLanguage"/>
            </summary>
            <param name="grammar">The associated grammar.</param>
            <exception cref="T:System.ArgumentNullException">If grammar parameter is null,</exception>
        </member>
        <member name="T:Infragistics.SyntaxParsing.ServicesManager">
            <summary>
            An IServiceLocator implementation for managing <see cref="T:Infragistics.SyntaxParsing.LanguageBase">Language</see> services.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.ServicesManager.OnCoreServiceAdded(System.Type,System.Object)">
            <summary>
            Called when the <see cref="E:Infragistics.SyntaxParsing.IServiceLocator.CoreServiceAdded"/> event should be raised.
            </summary>
            <param name="serviceType">The Type of the core service being added.</param>
            <param name="service">The core service instance being added.</param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.ServicesManager.OnCoreServiceRemoved(System.Type,System.Object)">
            <summary>
            Called when the <see cref="E:Infragistics.SyntaxParsing.IServiceLocator.CoreServiceRemoved"/> event should be raised.
            </summary>
            <param name="serviceType">The Type of the core service being removed.</param>
            <param name="service">The core service instance being removed.</param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.ServicesManager.OnNonCoreServiceAdded(System.String,System.Object)">
            <summary>
            Called when the <see cref="E:Infragistics.SyntaxParsing.IServiceLocator.NonCoreServiceAdded"/> event should be raised.
            </summary>
            <param name="serviceKey">The key  of the non-core service being added.</param>
            <param name="service">The non-core service instance being added.</param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.ServicesManager.OnNonCoreServiceRemoved(System.String,System.Object)">
            <summary>
            Called when the <see cref="E:Infragistics.SyntaxParsing.IServiceLocator.NonCoreServiceRemoved"/> event should be raised.
            </summary>
            <param name="serviceKey">The key of the non-core service being removed.</param>
            <param name="service">The core service instance being removed.</param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.ServicesManager.GetRegisteredCoreServices">
            <summary>
            Returns an enumerable of registered core services.
            </summary>
            <returns>An enumerable of registered core services</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.ServicesManager.GetRegisteredCoreServiceTypes">
            <summary>
            Returns an enumerable of registered core service types.
            </summary>
            <returns>An enumerable of core service types</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.ServicesManager.GetRegisteredNonCoreServices">
            <summary>
            Returns an enumerable of registered non-core services.
            </summary>
            <returns>An enumerable of registered non-core services</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.ServicesManager.GetRegisteredNonCoreServiceKeys">
            <summary>
            Returns an enumerable of registered non-core service keys.
            </summary>
            <returns>An enumerable of non-core service keys</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.ServicesManager.GetService(System.Type)">
            <summary>
            Gets a registered core service of type 'serviceType'.
            </summary>
            <param name="serviceType">The Type of the core service to get.</param>
            <returns>The core service instance if the service is found otherwise null.</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.ServicesManager.GetService(System.String)">
            <summary>
            Gets a registered non-core service of type 'serviceType'.
            </summary>
            <param name="serviceKey">The key of the non-core service to get.</param>
            <returns>The non-core service instance if the service is found otherwise null.</returns>
        </member>
        <member name="M:Infragistics.SyntaxParsing.ServicesManager.RegisterService(System.Type,System.Object)">
            <summary>
            Registers a core service of type 'serviceType'.
            </summary>
            <remarks>
            <para class="body">Only one instance of a core service type can be registered.  Core service types
            are used to provide essential services.  To register a non-core service type use the RegisterService overload that takes a string key.</para>
            </remarks>
            <param name="serviceType">The core service Type to register.</param>
            <param name="service">The core service instance to register.</param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.ServicesManager.RegisterService(System.String,System.Object)">
            <summary>
            Registers a non-core service with a unique string key.
            </summary>
            <remarks>
            <para class="body">Each non-core service must be registered with a unique string key.  There are no requirements on the
            format of the key.</para>
            </remarks>
            <param name="serviceKey">The unique string key of the non-core service Type to register.</param>
            <param name="service">The non-core service instance to register.</param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.ServicesManager.UnregisterAllServices">
            <summary>
            Unregisters all currently registered services.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.ServicesManager.UnregisterService(System.Type)">
            <summary>
            Unregisters a core service of type 'serviceType'.
            </summary>
            <param name="serviceType">The Type of the core service to unregister.</param>
        </member>
        <member name="M:Infragistics.SyntaxParsing.ServicesManager.UnregisterService(System.String)">
            <summary>
            Unregisters a non-core service with the key 'serviceKey'.
            </summary>
            <param name="serviceKey">The key of the non-core service to unregister.</param>
        </member>
        <member name="E:Infragistics.SyntaxParsing.ServicesManager.CoreServiceAdded">
            <summary>
            Raised after a core service is added.
            </summary>
            <seealso cref="T:Infragistics.SyntaxParsing.CoreServiceEventArgs"/>
        </member>
        <member name="E:Infragistics.SyntaxParsing.ServicesManager.CoreServiceRemoved">
            <summary>
            Raised after a core service is removed.
            </summary>
            <seealso cref="T:Infragistics.SyntaxParsing.CoreServiceEventArgs"/>
        </member>
        <member name="E:Infragistics.SyntaxParsing.ServicesManager.NonCoreServiceAdded">
            <summary>
            Raised after a non-core service is added.
            </summary>
            <seealso cref="T:Infragistics.SyntaxParsing.NonCoreServiceEventArgs"/>
        </member>
        <member name="E:Infragistics.SyntaxParsing.ServicesManager.NonCoreServiceRemoved">
            <summary>
            Raised after a non-core service is removed.
            </summary>
            <seealso cref="T:Infragistics.SyntaxParsing.NonCoreServiceEventArgs"/>
        </member>
        <member name="T:Infragistics.Documents.PlainTextLanguage">
            <summary>
            PlainTextLanguage class (auto-generated 9/21/2012 10:12:07 AM)
            </summary>
        </member>
        <member name="M:Infragistics.Documents.PlainTextLanguage.#ctor">
            <summary>
            Creates a new instance of the PlainTextLanguage class.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.PlainTextLanguage.InitializeGrammarProperties(Infragistics.SyntaxParsing.Grammar)">
            <summary>
            Initializes the properties of the associated Grammar.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.PlainTextLanguage.CreateTerminalSymbols(Infragistics.SyntaxParsing.Grammar)">
            <summary>
            Creates the TerminalSymbols for the associated Grammar.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.PlainTextLanguage.CreateNonTerminalSymbols(Infragistics.SyntaxParsing.Grammar)">
            <summary>
            Creates the CreateNonTerminalSymbols for the associated Grammar.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.PlainTextLanguage.CreateSyntaxRules(Infragistics.SyntaxParsing.Grammar)">
            <summary>
            Creates the syntax rules for the associated Grammar.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.PlainTextLanguage.SetStartSymbol(Infragistics.SyntaxParsing.Grammar)">
            <summary>
            Sets the StartSymbol for the associated Grammar.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.PlainTextLanguage.GetLALRParseTableData(Infragistics.SyntaxParsing.Parser.LALRParser.ParseState[]@,System.Int32[]@,Infragistics.SyntaxParsing.Parser.LALRParser.AmbiguousParseAction[]@)">
            <summary>
            Creates a table containing the state transition data for an LALR parser.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.PlainTextLanguage.Instance">
            <summary>
            Returns a static instance of the language (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Documents.PlainTextLanguage.Guid">
            <summary>
            Returns a Guid which uniquely identifies this language.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.VisualBasicLanguage">
            <summary>
            VisualBasicLanguage class (auto-generated 9/23/2012 10:25:54 PM)
            </summary>
        </member>
        <member name="M:Infragistics.Documents.VisualBasicLanguage.#ctor">
            <summary>
            Creates a new instance of the VisualBasicLanguage class.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.VisualBasicLanguage.InitializeGrammarProperties(Infragistics.SyntaxParsing.Grammar)">
            <summary>
            Initializes the properties of the associated Grammar.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.VisualBasicLanguage.CreateTerminalSymbols(Infragistics.SyntaxParsing.Grammar)">
            <summary>
            Creates the TerminalSymbols for the associated Grammar.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.VisualBasicLanguage.CreateLexerStates(Infragistics.SyntaxParsing.Grammar)">
            <summary>
            Creates the LexerStates for the associated Grammar.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.VisualBasicLanguage.CreateNonTerminalSymbols(Infragistics.SyntaxParsing.Grammar)">
            <summary>
            Creates the CreateNonTerminalSymbols for the associated Grammar.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.VisualBasicLanguage.CreateSyntaxRules(Infragistics.SyntaxParsing.Grammar)">
            <summary>
            Creates the syntax rules for the associated Grammar.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.VisualBasicLanguage.SetStartSymbol(Infragistics.SyntaxParsing.Grammar)">
            <summary>
            Sets the StartSymbol for the associated Grammar.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.VisualBasicLanguage.GetLALRParseTableData(Infragistics.SyntaxParsing.Parser.LALRParser.ParseState[]@,System.Int32[]@,Infragistics.SyntaxParsing.Parser.LALRParser.AmbiguousParseAction[]@)">
            <summary>
            Creates a table containing the state transition data for an LALR parser.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.VisualBasicLanguage.IncludeInSyntaxTree(Infragistics.SyntaxParsing.Parser.ParseContext)">
            <summary>
            Returns a boolean value indicating whether syntax nodes created
            for the specified nonTerminalSymbol appear in the syntax tree,
            regardless of whether they contain any terminals as immediate children.
            </summary>
            <remarks>
            <p class="body">
            The IncludeInSyntaxTree method is only called when the
            <see cref="P:Infragistics.SyntaxParsing.LanguageBase.SyntaxTreePruningMode">SyntaxTreePruningMode</see>
            property returns 'Custom'.
            </p>
            <p class="body">
            By default, non-terminal nodes whose
            <see cref="P:Infragistics.SyntaxParsing.Symbol.Name">name</see>
            is prefaced with an underscore are not included in the syntax tree;
            nor are non-terminal nodes with only one child node, where that child
            node is itself a non-terminal.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Documents.VisualBasicLanguage.Instance">
            <summary>
            Returns a static instance of the language (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Documents.VisualBasicLanguage.Guid">
            <summary>
            Returns a Guid which uniquely identifies this language.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.VisualBasicLanguage.SyntaxTreePruningMode">
            <summary>
            Returns a value which indicates whether a non-terminal
            <see cref="T:Infragistics.SyntaxParsing.SyntaxNode">syntax node</see>
            appears in the
            <see cref="T:Infragistics.SyntaxParsing.SyntaxTree">syntax tree</see>
            produced when a document is parsed.
            </summary>
            <remarks>
            <p class="body">
            By default, non-terminal nodes which have only one child, where that child
            is itself a non-terminal node, do not appear in the syntax tree. Non-terminal
            nodes whose name is prefixed with an underscore ('_') also do not appear.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Parser.LALRParser.LALRParser.Parse(Infragistics.Documents.TextDocumentSnapshot,Infragistics.SyntaxParsing.SyntaxTree)">
            <summary>
            Parses the specified line buffer and returns the resulting
            <see cref="T:Infragistics.SyntaxParsing.SyntaxTree">SyntaxTree</see>.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Parser.LALRParser.LALRParser.TextChangeHelper.IsChange">
            <summary>
            Returns false if the old and new text are the same.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Parser.LALRParser.LALRParser.TextChangeHelper.IsTrivial(Infragistics.SyntaxParsing.SyntaxNode@,System.Int32@)">
            <summary>
            Returns whether this text change only affected trivia,
            in which case we find the closest terminal node and
            adjust the leading trivia. Also returns the change in
            the length of the leading trivia for the terminal node
            it returns
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Parser.LALRParser.LALRParser.TextChangeHelper.IsSameTokenType(Infragistics.SyntaxParsing.SyntaxNode@,Infragistics.SyntaxParsing.Token@)">
            <summary>
            Returns true if this text change only affects one token, and
            the terminal symbol associated with that token is the same
            for the before and after token, e.g., the spelling of an
            identifier was changed.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Parser.LALRParser.ActionType.Error">
            <summary>
            No table entry
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Parser.LALRParser.ActionType.Shift">
            <summary>
            Push a terminal onto the stack and shift (transition) to a new state.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Parser.LALRParser.ActionType.GoTo">
            <summary>
            Redirect to a different state for a non-terminal.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Parser.LALRParser.ActionType.Reduce">
            <summary>
            Reduce by the production referenced by the corresponding state.
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Parser.LALRParser.ActionType.Accept">
            <summary>
            Parse complete
            </summary>
        </member>
        <member name="F:Infragistics.SyntaxParsing.Parser.LALRParser.ActionType.Ambiguous">
            <summary>
            Shift/reduce or reduce/reduce conflict, handled by GLR parser
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Parser.LALRParser.LALRParserGenerator.WriteToStringBuilder(Infragistics.SyntaxParsing.Parser.LALRParser.ProductionTable,Infragistics.SyntaxParsing.Parser.LALRParser.FirstTerminalsTable,System.Collections.Generic.IList{Infragistics.SyntaxParsing.Parser.LALRParser.LALRParserGenerator.State},Infragistics.SyntaxParsing.Parser.LALRParser.LALRParseTable,System.Collections.Generic.HashSet{Infragistics.SyntaxParsing.Parser.LALRParser.Conflict},System.Guid,System.Text.StringBuilder)">
            <summary>
            Writes parser information as XML to the specified StringBuilder.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Parser.LALRParser.LALRParserGenerator.LRItem.Equals(System.Object)">
            <summary>
            Returns a boolean value indicating whether the specified
            object is equal to this instance.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Parser.LALRParser.LALRParserGenerator.LRItem.GetHashCode">
            <summary>
            Serves as a hash function for this instance.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Parser.LALRParser.LALRParserGenerator.LRItem.IsStartState">
            <summary>
            Returns a boolean value indicating whether the dot is all
            the way to the left, i.e., a beginning state for the item.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Parser.LALRParser.LALRParserGenerator.LRItem.IsEndState">
            <summary>
            Returns a boolean value indicating whether the dot is all
            the way to the right.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Parser.LALRParser.LALRParserGenerator.LRItem.IsLastShift">
            <summary>
            Returns a boolean value indicating whether the dot is right
            before the last term, i.e., the next shift will complete the
            traversal of the production.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Parser.LALRParser.LALRParserGenerator.LRItem.IsKernelItem">
            <summary>
            Returns true if this item is in the kernel set, i.e.,
            is a kernel item OR is the first item for the initial
            state (S' → •S;)
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Parser.LALRParser.LALRParserGenerator.State.GoTo(Infragistics.SyntaxParsing.Symbol,Infragistics.SyntaxParsing.Parser.LALRParser.ProductionTable)">
            <summary>
            Returns the state to which this State transitions
            when the specified symbol is on the top of the stack.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Parser.LALRParser.LALRParserGenerator.State.GoTo(Infragistics.SyntaxParsing.Symbol,Infragistics.SyntaxParsing.Parser.LALRParser.ProductionTable,Infragistics.SyntaxParsing.Parser.LALRParser.Production@,System.UInt16@)">
            <summary>
            Returns the state to which this State transitions
            when the specified symbol is on the top of the stack.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Parser.LALRParser.Conflict.ToString">
            <summary>
            Returns the string representation of this object
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Parser.LALRParser.Conflict.Equals(System.Object)">
            <summary>
            Returns a boolean value indicating whether the specified
            object is the equivalent  of this instance.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Parser.LALRParser.Conflict.GetHashCode">
            <summary>
            Returns the hash code of the object.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Parser.LALRParser.Conflict.NonTerminalSymbol">
            <summary>
            Returns the
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>
            for which the parse action conflict was caused.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Parser.LALRParser.Conflict.TerminalSymbol">
            <summary>
            Returns the
            <see cref="T:Infragistics.SyntaxParsing.TerminalSymbol">TerminalSymbol</see>
            which caused the parse action conflict, or null if the conflict was not
            caused by a terminal symbol.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Parser.LALRParser.Conflict.StateIndex">
            <summary>
            Returns the index of the state which has the conflict.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Parser.LALRParser.LALRParseTable.FromProductionIndex(System.Int32,Infragistics.SyntaxParsing.NonTerminalSymbolsCollection)">
            <summary>
            Returns the NonTerminalSymbol from which the specified
            production was derived.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Parser.LALRParser.LALRParseTable.FromProductionIndex(System.Int32,Infragistics.SyntaxParsing.NonTerminalSymbolsCollection,System.UInt16@)">
            <summary>
            Returns the NonTerminalSymbol from which the specified
            production was derived.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Parser.LALRParser.LALRParseTable.FromProductionIndex(System.Int32,System.UInt16@)">
            <summary>
            Returns the Id of the NonTerminalSymbol from which the specified
            production was derived.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Parser.LALRParser.LALRParseTable.FromProductionLookup(System.UInt32,System.UInt16@,System.UInt16@)">
            <summary>
            Returns the Id of the NonTerminalSymbol from which the specified
            production was derived.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Parser.LALRParser.LALRParseTable.Item(System.Int32)">
            <summary>
            Returns the ParseState at the specified index.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Parser.LALRParser.ParseState">
            <summary>
            Encapsulates a discrete state for an LALR parser.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Parser.LALRParser.ParseState.#ctor(System.Int16[],System.Int64[])">
            <summary>Creates a new instance.</summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Parser.LALRParser.ParseState.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Parser.LALRParser.AmbiguousParseAction">
            <summary>
            Encapsulates an ambiguous parse action.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Parser.LALRParser.AmbiguousParseAction.#ctor(System.Int64[])">
            <summary>Creates a new instance.</summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.Parser.ParseContext">
            <summary>
            Provides contextual information related to a parse operation.
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.Parser.ParseContext.NonTerminalSymbol">
            <summary>
            Returns a reference to the
            <see cref="T:Infragistics.SyntaxParsing.NonTerminalSymbol">NonTerminalSymbol</see>
            associated with the syntax rule currently being parsed.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.TextDocumentResourceCustomizer">
            <summary>
            Class used to provide the ability to customize resource strings.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentResourceCustomizer.#ctor">
            <summary>
            Creates a new instance of the TextDocumentResourceCustomizer class.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentResourceCustomizer.GetCustomizedString(System.String)">
            <summary>
            Gets the customized string identified by the specified string resource name.
            </summary>
            <param name="name">Name of the string resource that was customized.</param>
            <returns>The customized string or null if the resource wasn't customized.</returns>
            <seealso cref="M:Infragistics.Documents.TextDocumentResourceCustomizer.ResetAllCustomizedStrings"/>
            <seealso cref="M:Infragistics.Documents.TextDocumentResourceCustomizer.ResetCustomizedString(System.String)"/>
            <seealso cref="M:Infragistics.Documents.TextDocumentResourceCustomizer.SetCustomizedString(System.String,System.String)"/>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentResourceCustomizer.ResetAllCustomizedStrings">
            <summary>
            Clears all strings customized by calls to <see cref="M:Infragistics.Documents.TextDocumentResourceCustomizer.SetCustomizedString(System.String,System.String)"/> method.
            </summary>
            <seealso cref="M:Infragistics.Documents.TextDocumentResourceCustomizer.SetCustomizedString(System.String,System.String)"/>
            <seealso cref="M:Infragistics.Documents.TextDocumentResourceCustomizer.ResetCustomizedString(System.String)"/>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentResourceCustomizer.ResetCustomizedString(System.String)">
            <summary>
            Resets a customized string identified by the specified string resource name so that it will load from the resource file.
            </summary>
            <param name="name">Name of the string resource to customize.</param>
            <seealso cref="M:Infragistics.Documents.TextDocumentResourceCustomizer.SetCustomizedString(System.String,System.String)"/>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentResourceCustomizer.SetCustomizedString(System.String,System.String)">
            <summary>
            Sets a customized string identified by the specified string resource name.
            </summary>
            <param name="name">Name of the string resource to customize.</param>
            <param name="customizedText">The customized string. If null this has the same effect as calling <see cref="M:Infragistics.Documents.TextDocumentResourceCustomizer.ResetCustomizedString(System.String)"/></param>
            <seealso cref="M:Infragistics.Documents.TextDocumentResourceCustomizer.ResetAllCustomizedStrings"/>
            <seealso cref="M:Infragistics.Documents.TextDocumentResourceCustomizer.ResetCustomizedString(System.String)"/>
        </member>
        <member name="T:Infragistics.Documents.TextDocumentResources">
            <summary>
            Exposes a <see cref="T:Infragistics.Documents.TextDocumentResourceCustomizer"/> instance for this assembly. 
            </summary>
            <seealso cref="P:Infragistics.Documents.TextDocumentResources.Customizer"/> 
            <seealso cref="T:Infragistics.Documents.TextDocumentResourceCustomizer"/> 
        </member>
        <member name="M:Infragistics.Documents.TextDocumentResources.GetString(System.String,System.Object[])">
            <summary>
            Returns the resource string using the specified name and default culture.
            </summary>
            <param name="name">Name of the string resource to return.</param>
            <param name="args">Arguments supplied to the string.Format method when formatting the string.</param>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentResources.GetString(System.String)">
            <summary>
            Returns the resource string using the specified resource name and default culture. The string is then formatted using the arguments specified.
            </summary>
            <param name="name">Name of the string resource to return.</param>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentResources.GetObject(System.String)">
            <summary>
            Returns the resource object using the specified name.
            </summary>
            <param name="name">Name of the resource item</param>
            <returns>An object containing the specified resource</returns>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentResources.Customizer">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.TextDocumentResourceCustomizer"/> for this assembly.
            </summary>
            <seealso cref="T:Infragistics.Documents.TextDocumentResourceCustomizer"/> 
        </member>
        <member name="T:Infragistics.Documents.ClassificationType">
            <summary>
            A class that defines the details of a text classification.
            </summary>
            <seealso cref="T:Infragistics.Documents.Tagging.ClassificationTag"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ClassificationTagger"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ClassificationTaggerProvider"/>
        </member>
        <member name="M:Infragistics.Documents.ClassificationType.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">The name of the classification type.</param>
            <param name="description">The description of the classification type.</param>
        </member>
        <member name="M:Infragistics.Documents.ClassificationType.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Documents.ClassificationType.FromLanguageElement(Infragistics.SyntaxParsing.LanguageElement)">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.ClassificationType"/> that corresponds to the specified <see cref="T:Infragistics.SyntaxParsing.LanguageElement"/>
            </summary>
            <param name="languageElement">The <see cref="T:Infragistics.SyntaxParsing.LanguageElement"/> for which a <see cref="T:Infragistics.Documents.ClassificationType"/> is to be returned.</param>
            <returns>The <see cref="T:Infragistics.Documents.ClassificationType"/> that corresponds to the specified <see cref="T:Infragistics.SyntaxParsing.LanguageElement"/></returns>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.Description">
            <summary>
            Returns a textual description of this <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.Name">
            <summary>
            Returns a name that can be used to identify this <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.Comment">
            <summary>
            Returns a Comment <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.CompilerError">
            <summary>
            Returns a CompilerError <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.DateLiteral">
            <summary>
            Returns a DateLiteral <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.DocCommentStart">
            <summary>
            Returns a DocCommentStart <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.DocCommentTag">
            <summary>
            Returns a DocCommentTag <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.DocCommentText">
            <summary>
            Returns a DocCommentText <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.Identifier">
            <summary>
            Returns an Identifier <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.Keyword">
            <summary>
            Returns a Keyword <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.Number">
            <summary>
            Returns a Number <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.NumericLiteral">
            <summary>
            Returns a NumericLiteral <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.Operator">
            <summary>
            Returns an Operator <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.PreprocessorDirective">
            <summary>
            Returns a PreprocessorDirective <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.PreprocessorDirectiveText">
            <summary>
            Returns a PreprocessorDirectiveText <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.Punctuation">
            <summary>
            Returns a Punctuation <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.StringLiteral">
            <summary>
            Returns a StringLiteral <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.SyntaxError">
            <summary>
            Returns a SyntaxError <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.Undefined">
            <summary>
            Returns an Undefined <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.UndefinedError">
            <summary>
            Returns an UndefinedError <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.Unrecognized">
            <summary>
            Returns an Unrecognized <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.Warning">
            <summary>
            Returns a Warning <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.Whitespace">
            <summary>
            Returns a Whitespace <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="T:Infragistics.Documents.NormalizedSnapshotSpanCollection">
            <summary>
            Returna a collection os <see cref="T:Infragistics.Documents.SnapshotSpan"/>s.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.LineScanType">
            <summary>
            Determines where to set the <see cref="T:Infragistics.Documents.TextDocumentSnapshotScanner">Scanner</see>'s <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset">CurrentOffset</see> relative to the current line position.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.LineScanType.CurrentLineEnd">
            <summary>
            Seek to the end of the current line.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.LineScanType.CurrentLineStart">
            <summary>
            Seek to the beginning of the current line.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.LineScanType.NextLineEnd">
            <summary>
            Seek to the end of the next line.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.LineScanType.NextLineStart">
            <summary>
            Seek to the beginning of the next line.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.LineScanType.PreviousLineEnd">
            <summary>
            Seek to the end of the previous line.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.LineScanType.PreviousLineStart">
            <summary>
            Seek to the beginning of the previous line.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.PointTrackingMode">
            <summary>
            Determines how <see cref="T:Infragistics.Documents.SnapshotPoint"/>s track between snapshots.
            </summary>
            <seealso cref="M:Infragistics.Documents.SnapshotPoint.TranslateTo(Infragistics.Documents.TextDocumentSnapshot,Infragistics.Documents.PointTrackingMode)"/>
        </member>
        <member name="F:Infragistics.Documents.PointTrackingMode.Positive">
            <summary>
            The point tracks toward the end of the document. An insertion at the current position pushes the point to the end of the inserted text. If a replacement contains the point, it will end up at the end of the replacement text.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.PointTrackingMode.Negative">
            <summary>
            The point tracks toward the beginning of the document. An insertion at the current position leaves the point unchanged. If a replacement contains the point, it will end up at the beginning of the replacement text.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.SpanTrackingMode">
            <summary>
            Determines how <see cref="T:Infragistics.Documents.SnapshotSpan"/>s track between snapshots.
            </summary>
            <seealso cref="M:Infragistics.Documents.SnapshotSpan.TranslateTo(Infragistics.Documents.TextDocumentSnapshot,Infragistics.Documents.SpanTrackingMode)"/>
        </member>
        <member name="F:Infragistics.Documents.SpanTrackingMode.EdgeExclusive">
            <summary>
            The leading edge uses a positive tracking mode and the trailing edge uses a neagtive tracking mode. This causes the span to not expand when text is inserted at either boundary.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.SpanTrackingMode.EdgeInclusive">
            <summary>
            The leading edge uses a negative tracking mode and the trailing edge uses a positive tracking mode. This causes the span to expand when text is inserted at either boundary.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.SpanTrackingMode.EdgePositive">
            <summary>
            Both edges of the span use a positive tracking mode.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.SpanTrackingMode.EdgeNegative">
            <summary>
            Both edges of the span use a negative tracking mode.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.TabEntryBehavior">
            <summary>
            Determines what gets inserted into a <see cref="T:Infragistics.Documents.TextDocument"/> when a tab key is entered.
            </summary>
            <seealso cref="P:Infragistics.Documents.TextDocument.TabEntryBehavior">TextDocument.TabInsertBehavior</seealso>
            <seealso cref="P:Infragistics.Documents.TextDocument.TabExtent">TextDocument.TabExtent</seealso>
        </member>
        <member name="F:Infragistics.Documents.TabEntryBehavior.KeepTabs">
            <summary>
            When a tab character is entered it is inserted into the document 'as is' (i.e. as a tab character).
            </summary>
        </member>
        <member name="F:Infragistics.Documents.TabEntryBehavior.ReplaceTabsWithSpaces">
            <summary>
            When a tab character is entered it is converted to an appropriate number of spaces in the document based upon the <see cref="P:Infragistics.Documents.TextDocument.TabExtent">TextDocument.TabExtent</see> setting.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.TextChangeSource">
            <summary>
            Identifies the source of a text change.
            </summary>
            <seealso cref="T:Infragistics.Documents.TextChangingEventArgs"/>
            <seealso cref="T:Infragistics.Documents.TextChangedEventArgs"/>
            <seealso cref="P:Infragistics.Documents.TextChangingEventArgs.Source"/>
            <seealso cref="P:Infragistics.Documents.TextChangedEventArgs.Source"/>
        </member>
        <member name="F:Infragistics.Documents.TextChangeSource.Change">
            <summary>
            A method was called on <see cref="T:Infragistics.Documents.TextDocument"/>, e.g. <see cref="M:Infragistics.Documents.TextDocument.Insert(System.Int32,System.String)">Insert</see>, <see cref="M:Infragistics.Documents.TextDocument.Delete(System.Int32,System.Int32)">Delete</see>, <see cref="M:Infragistics.Documents.TextDocument.Append(System.String)">Append</see>, <see cref="M:Infragistics.Documents.TextDocument.FindReplace(System.String,Infragistics.Documents.TextSearchCriteria,System.Int32,System.Boolean)">FindReplace</see> etc.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.TextChangeSource.Undo">
            <summary>
            The <see cref="T:Infragistics.Documents.TextDocument"/>'s <see cref="P:Infragistics.Documents.TextDocument.UndoManager">UndoManager</see>.<see cref="M:Infragistics.Undo.UndoManager.Undo(System.Int32)">Undo</see> method was called.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.TextChangeSource.Redo">
            <summary>
            The <see cref="T:Infragistics.Documents.TextDocument"/>'s <see cref="P:Infragistics.Documents.TextDocument.UndoManager">UndoManager</see>.<see cref="M:Infragistics.Undo.UndoManager.Redo(System.Int32)">Redo</see> method was called.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.TokenScanType">
            <summary>
            Determines where to set the <see cref="T:Infragistics.Documents.TextDocumentSnapshotScanner">Scanner</see>'s <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset">CurrentOffset</see> relative to the current token position.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.TokenScanType.CurrentTokenEnd">
            <summary>
            Seek to the end of the current token.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.TokenScanType.CurrentTokenStart">
            <summary>
            Seek to the beginning of the current token.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.TokenScanType.NextTokenEnd">
            <summary>
            Seek to the end of the next token.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.TokenScanType.NextTokenStart">
            <summary>
            Seek to the beginning of the next token.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.TokenScanType.PreviousTokenEnd">
            <summary>
            Seek to the end of the previous token.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.TokenScanType.PreviousTokenStart">
            <summary>
            Seek to the beginning of the previous token.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.WordScanType">
            <summary>
            Determines where to set the <see cref="T:Infragistics.Documents.TextDocumentSnapshotScanner">Scanner</see>'s <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset">CurrentOffset</see> relative to the current word position.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.WordScanType.CurrentWordEnd">
            <summary>
            Seek to the end of the current word.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.WordScanType.CurrentWordStart">
            <summary>
            Seek to the beginning of the current word.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.WordScanType.NextWordEnd">
            <summary>
            Seek to the end of the next word.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.WordScanType.NextWordStart">
            <summary>
            Seek to the beginning of the next word.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.WordScanType.PreviousWordEnd">
            <summary>
            Seek to the end of the previous word.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.WordScanType.PreviousWordStart">
            <summary>
            Seek to the beginning of the previous word.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.TagsChangedEventArgs">
            <summary>
            Class that defines the arguments passed in the TagsChanged event.
            </summary>
            <seealso cref="E:Infragistics.Documents.Tagging.ITagger`1.TagsChanged"/>
        </member>
        <member name="P:Infragistics.Documents.TagsChangedEventArgs.Span">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.SnapshotSpan"/> within which tags have changed.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.TextDocument">
            <summary>
            Represents a single text or code document (if the <see cref="P:Infragistics.Documents.TextDocument.Language"/>. property is set).
            </summary>
            <seealso cref="T:Infragistics.Documents.TextDocumentSnapshot"/>
            <seealso cref="T:Infragistics.Documents.TextDocumentSnapshotScanner"/>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.OnTextChanged(Infragistics.Documents.TextChangedEventArgs)">
            <summary>
            Invokes the
            <see cref="E:Infragistics.Documents.TextDocument.TextChanged">TextChanged</see>
            event.
            </summary>
            <param name="args">
            An instance of the
            <see cref="T:Infragistics.Documents.TextChangedEventArgs">TextChangedEventArgs</see>
            class.
            </param>
            <seealso cref="E:Infragistics.Documents.TextDocument.TextChanged">TextChanged event (TextDocument class)</seealso>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.OnTextChanging(Infragistics.Documents.TextChangingEventArgs)">
            <summary>
            Invokes the
            <see cref="E:Infragistics.Documents.TextDocument.TextChanging">TextChanging</see>
            event.
            </summary>
            <param name="args">
            An instance of the
            <see cref="T:Infragistics.Documents.TextChangingEventArgs">TextChangingEventArgs</see>
            class.
            </param>
            <seealso cref="E:Infragistics.Documents.TextDocument.TextChanging">TextChanging event (TextDocument class)</seealso>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.OnTextLoaded(System.EventArgs)">
            <summary>
            Occurs after either the <see cref="M:Infragistics.Documents.TextDocument.Load(System.IO.Stream)">Load</see> or <see cref="M:Infragistics.Documents.TextDocument.InitializeText(System.String)"/> method is called.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> this event will also occurs if there is existing text and the <see cref="P:Infragistics.Documents.TextDocument.Language"/> property is changed.</para>
            </remarks>
            <seealso cref="E:Infragistics.Documents.TextDocument.TextLoaded">TextLoaded event</seealso>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Documents.TextDocument"/>
            </summary>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Append(System.String)">
            <summary>
            Appends text to the end of the document
            </summary>
            <param name="text">The text to insert</param>
            <returns>True if the operation was successful, otherwise false.</returns>
            <exception cref="T:System.InvalidOperationException">If the <see cref="P:Infragistics.Documents.TextDocument.IsReadOnly"/> property is set to true or if this method is called in the middle of an update operation, e.g. from within a TextChanging event handler.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.ClearUndoRedoHistory(System.Boolean)">
            <summary>
            Removes all the Undo and Redo history that relates to this TextDocument.
            </summary>
            <param name="includeRootTransaction">Indicates whether this method should affect the current open RootTransaction on the <see cref="P:Infragistics.Documents.TextDocument.UndoManager"/> if there is one.</param>
            <remarks>
            <para class="note"><b>Note:</b> this is equivalent to calling the <see cref="P:Infragistics.Documents.TextDocument.UndoManager"/>'s RemoveAll method with a filter that removes only 
            undo units whose Target is this TextDocument. By default that will be all of the history, however, since the <see cref="P:Infragistics.Documents.TextDocument.UndoManager"/> property is settable it is
            possible to share a single instance of an UndoManager with more that one TextDocument so that there histories are mingled.</para>
            </remarks>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.CreateTagAggregator``1">
            <summary>
            Returns a DocumentTagAggregator that can aggregate ITags of type T.
            </summary>
            <typeparam name="T">The type of <see cref="T:Infragistics.Documents.Tagging.ITag"/> to aggregate</typeparam>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Delete">
            <summary>
            Removes all text from this document.
            </summary>
            <returns>True if the operation was successful, otherwise false.</returns>
            <exception cref="T:System.InvalidOperationException">If the <see cref="P:Infragistics.Documents.TextDocument.IsReadOnly"/> property is set to true.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If startOffset is less than 0 or startOffset plus length greater than 1 minus the current length of the document.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Delete(System.Int32)">
            <summary>
            Deletes text from the document, starting at the specified <paramref name="startOffset"/>.
            </summary>
            <param name="startOffset">The zero-based offset from which the deletion begins.</param>
            <returns>True if the operation was successful, otherwise false.</returns>
            <exception cref="T:System.InvalidOperationException">If the <see cref="P:Infragistics.Documents.TextDocument.IsReadOnly"/> property is set to true.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If startOffset is less than 0 or startOffset plus length greater than 1 minus the current length of the document.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Delete(Infragistics.SyntaxParsing.TextSpan)">
            <summary>
            Deletes text from the document 
            </summary>
            <param name="span">The span to delete.</param>
            <returns>True if the operation was successful, otherwise false.</returns>
            <exception cref="T:System.InvalidOperationException">If the <see cref="P:Infragistics.Documents.TextDocument.IsReadOnly"/> property is set to true or if this method is called in the middle of an update operation, e.g. from within a TextChanging event handler.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Delete(System.Int32,System.Int32)">
            <summary>
            Deletes text from the document 
            </summary>
            <param name="startOffset">The zero-based offset where the text to delete start.</param>
            <param name="length">The length of the text to delete.</param>
            <returns>True if the operation was successful, otherwise false.</returns>
            <exception cref="T:System.InvalidOperationException">If the <see cref="P:Infragistics.Documents.TextDocument.IsReadOnly"/> property is set to true or if this method is called in the middle of an update operation, e.g. from within a TextChanging event handler.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If startOffset is less than 0 or startOffset plus length greater than 1 minus the current length of the document.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.FindReplace(System.String,Infragistics.Documents.TextSearchCriteria,System.Int32,System.Boolean)">
            <summary>
            Finds an instance of text in the document that matches the search criteria and replaces it with another string.
            </summary>
            <param name="newText">The new text</param>
            <param name="criteria">The search criteria</param>
            <param name="startOffset">The start offset</param>
            <param name="wrapIfNotFound">if true continue the search by wrapping if the end is reached without a match.</param>
            <returns>A <see cref="T:Infragistics.Documents.TextSearchResultInfo">TextSearchResultInfo</see> object containing the results of the operation.</returns>
            <exception cref="T:System.InvalidOperationException">If the <see cref="P:Infragistics.Documents.TextDocument.IsReadOnly"/> property is set to true or if this method is called in the middle of an update operation, e.g. from within a TextChanging event handler.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If startOffset is less than 0 or startOffset plus length greater than 1 minus the current length of the document.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.FindReplace(System.String,Infragistics.Documents.TextSearchCriteria,Infragistics.SyntaxParsing.TextSpan,System.Int32,System.Boolean)">
            <summary>
            Finds an instance of text in the document that matches the search criteria and replaces it with another string..
            </summary>
            <param name="newText">The new text</param>
            <param name="criteria">The search criteria</param>
            <param name="spanToSearch">The span of text to limit the search to.</param>
            <param name="startOffset">The start offset relative to the beginning of the document.</param>
            <param name="wrapIfNotFound">if true continue the search by wrapping if the end is reached without a match.</param>
            <returns>A <see cref="T:Infragistics.Documents.TextSearchResultInfo">TextSearchResultInfo</see> object containing the results of the operation.</returns>
            <exception cref="T:System.InvalidOperationException">If the <see cref="P:Infragistics.Documents.TextDocument.IsReadOnly"/> property is set to true or if this method is called in the middle of an update operation, e.g. from within a TextChanging event handler.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If startOffset is less than 0 or startOffset plus length greater than 1 minus the current length of the document.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.FindReplaceAll(Infragistics.Documents.TextSearchCriteria,System.String,System.Nullable{Infragistics.SyntaxParsing.TextSpan})">
            <summary>
            Replaces all instances of text in the document that matches the search criteria.
            </summary>
            <param name="criteria">The search criteria</param>
            <param name="replacementText">The new text</param>
            <param name="spanToSearch">An optional span to limit the scope of the find/replace</param>
            <returns>A <see cref="T:Infragistics.Documents.TextSearchResultInfo">TextSearchResultInfo</see> object containing the results of the operation.</returns>
            <exception cref="T:System.InvalidOperationException">If the <see cref="P:Infragistics.Documents.TextDocument.IsReadOnly"/> property is set to true or if this method is called in the middle of an update operation, e.g. from within a TextChanging event handler.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If startOffset is less than 0 or startOffset plus length greater than 1 minus the current length of the document.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.InitializeText(System.String)">
            <summary>
            Initializes all of the text in the document.
            </summary>
            <param name="text">The text to </param>
            <exception cref="T:System.InvalidOperationException">if this method is called in the middle of an update operation, e.g. from within a TextChanging event handler.</exception>
            <remarks>
            <para class="note"><b>Note:</b> this is equivalent to calling one of the <see cref="M:Infragistics.Documents.TextDocument.Load(System.IO.Stream)">Load</see> methods.</para>
            </remarks>
            <seealso cref="M:Infragistics.Documents.TextDocument.Load(System.IO.Stream)">Load</seealso>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.IndentLines(System.Int32,System.Int32)">
            <summary>
            Indents a block of lines (i.e. inserts leading whitepsace).
            </summary>
            <param name="lineIndex">The zero-based index of the first line to indent.</param>
            <param name="lineCount">The total number of lines to indent.</param>
            <returns>True if the operation was successful, otherwise false.</returns>
            <exception cref="T:System.InvalidOperationException">If the <see cref="P:Infragistics.Documents.TextDocument.IsReadOnly"/> property is set to true or if this method is called in the middle of an update operation, e.g. from within a TextChanging event handler.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If lineIndex is less than 0 or lineIndex plus lineCount greater than 1 minus the number of lines in the document..</exception>
            <remarks>
            <para class="note"><b>Note:</b> the amount and type of whitespace inserted is determined by the <see cref="P:Infragistics.Documents.TextDocument.TabExtent"/> and <see cref="P:Infragistics.Documents.TextDocument.TabEntryBehavior">TabEntryBehavior</see> property settings.</para>
            </remarks>
            <seealso cref="M:Infragistics.Documents.TextDocument.OutdentLines(System.Int32,System.Int32)"/>
            <seealso cref="P:Infragistics.Documents.TextDocument.TabExtent"/>
            <seealso cref="P:Infragistics.Documents.TextDocument.TabEntryBehavior">TabEntryBehavior</seealso>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Insert(System.Int32,System.String)">
            <summary>
            Inserts text into the document at a specific offset
            </summary>
            <param name="offset">The zero-based offset where to insert the text.</param>
            <param name="text">The text to insert</param>
            <returns>True if the operation was successful, otherwise false.</returns>
            <exception cref="T:System.InvalidOperationException">If the <see cref="P:Infragistics.Documents.TextDocument.IsReadOnly"/> property is set to true or if this method is called in the middle of an update operation, e.g. from within a TextChanging event handler.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If offset is less than 0 or greater than 1 minus the current length of the document.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Load(System.String)">
            <summary>
            Initializes the document with text from the specified file.
            </summary>
            <param name="filename">The name of the file to load.</param>
            <returns>True if the operation was successful, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">if filename is null or empty.</exception>
            <remarks>
            <para class="note"><b>Note:</b> this is equivalent to calling the <see cref="M:Infragistics.Documents.TextDocument.InitializeText(System.String)"/> method.</para>
            </remarks>
            <seealso cref="M:Infragistics.Documents.TextDocument.InitializeText(System.String)"/>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Load(System.IO.Stream)">
            <summary>
            Initializes the document with text from a stream.
            </summary>
            <param name="stream">The stream that contains the text.</param>
            <returns>True if the operation was successful, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">if stream is null.</exception>
            <exception cref="T:System.InvalidOperationException">if this method is called in the middle of an update operation, e.g. from within a TextChanging event handler.</exception>
            <remarks>
            <para class="note"><b>Note:</b> this is equivalent to calling the <see cref="M:Infragistics.Documents.TextDocument.InitializeText(System.String)"/> method.</para>
            </remarks>
            <seealso cref="M:Infragistics.Documents.TextDocument.InitializeText(System.String)"/>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.OutdentLines(System.Int32,System.Int32)">
            <summary>
            Outdents a block of lines (i.e. removes leading whitepsace).
            </summary>
            <param name="lineIndex">The zero-based index of the first line to outdent.</param>
            <param name="lineCount">The total number of lines to outdent.</param>
            <returns>True if the operation was successful, otherwise false.</returns>
            <exception cref="T:System.InvalidOperationException">If the <see cref="P:Infragistics.Documents.TextDocument.IsReadOnly"/> property is set to true or if this method is called in the middle of an update operation, e.g. from within a TextChanging event handler.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If lineIndex is less than 0 or lineIndex plus lineCount greater than 1 minus the number of lines in the document.</exception>
            <remarks>
            <para class="note"><b>Note:</b> the amount and type of whitespace removed is determined by the <see cref="P:Infragistics.Documents.TextDocument.TabExtent"/> property setting.</para>
            </remarks>
            <seealso cref="M:Infragistics.Documents.TextDocument.IndentLines(System.Int32,System.Int32)"/>
            <seealso cref="P:Infragistics.Documents.TextDocument.TabExtent"/>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Parse">
            <summary>
            Parses the document synchronously.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> just before the method returns the <see cref="E:Infragistics.Documents.TextDocument.PropertyChanged"/> event will be raised and the <see cref="P:Infragistics.Documents.TextDocument.SyntaxTree"/> property will return the new tree.</para>
            </remarks>
            <seealso cref="P:Infragistics.Documents.TextDocument.SyntaxTree"/>		
        </member>
        <member name="M:Infragistics.Documents.TextDocument.ParseAsync">
            <summary>
            Parses the document on a background thread.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> when the parse operation is complete the <see cref="E:Infragistics.Documents.TextDocument.PropertyChanged"/> event will be raised and the <see cref="P:Infragistics.Documents.TextDocument.SyntaxTree"/> property will return the new tree.</para>
            </remarks>
            <seealso cref="P:Infragistics.Documents.TextDocument.SyntaxTree"/>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Replace(System.String,Infragistics.SyntaxParsing.TextSpan)">
            <summary>
            Replaces a range of text in the document with a new string.
            </summary>
            <param name="newText">The new text</param>
            <param name="spanToReplace">The span of the text to replace.</param>
            <returns>True if successful.</returns>
            <exception cref="T:System.InvalidOperationException">If the <see cref="P:Infragistics.Documents.TextDocument.IsReadOnly"/> property is set to true or if this method is called in the middle of an update operation, e.g. from within a TextChanging event handler.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the replacementSpan. is not valid.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Replace(System.String,System.Int32,System.Int32)">
            <summary>
            Replaces a range of text in the document with a new string.
            </summary>
            <param name="newText">The new text</param>
            <param name="startOffset">The zero-based offset where the text to replace starts.</param>
            <param name="lengthOfTextToReplace">The length of the text to delete.</param>
            <returns>True if successful.</returns>
            <exception cref="T:System.InvalidOperationException">If the <see cref="P:Infragistics.Documents.TextDocument.IsReadOnly"/> property is set to true or if this method is called in the middle of an update operation, e.g. from within a TextChanging event handler.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If startOffset is less than 0 or greater than 1 minus the current length of the document.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Save">
            <summary>
            Saves the document to the file specified via a previous call to the <see cref="M:Infragistics.Documents.TextDocument.Load(System.String)"/> method.
            </summary>
            <returns>True if the operation was successful, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Save(Infragistics.SyntaxParsing.NewLineSequence)">
            <summary>
            Saves the document to the file specified via a previous call to the <see cref="M:Infragistics.Documents.TextDocument.Load(System.String)"/> method.
            </summary>
            <param name="newLineSequence">The sequence of characters to delimit each line in the output.</param>
            <returns>True if the operation was successful, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Save(System.String)">
            <summary>
            Saves the document to the specified file.
            </summary>
            <param name="filename">The name of the file to write to.</param>
            <returns>True if the operation was successful, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Save(System.String,Infragistics.SyntaxParsing.NewLineSequence)">
            <summary>
            Saves the document to the specified file.
            </summary>
            <param name="filename">The name of the file to write to.</param>
            <param name="newLineSequence">The sequence of characters to delimit each line in the output.</param>
            <returns>True if the operation was successful, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Save(System.IO.Stream)">
            <summary>
            Saves the document to a stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <returns>True if the operation was successful, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Save(System.IO.Stream,Infragistics.SyntaxParsing.NewLineSequence)">
            <summary>
            Saves the document to a stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="newLineSequence">The sequence of characters to delimit each line in the output.</param>
            <returns>True if the operation was successful, otherwise false.</returns>
        </member>
        <member name="E:Infragistics.Documents.TextDocument.TextChanged">
            <summary>
            Occurs after changes have been made to the document's text.
            </summary>
            <seealso cref="T:Infragistics.Documents.TextChangedEventArgs">TextChangedEventArgs class</seealso>
        </member>
        <member name="E:Infragistics.Documents.TextDocument.TextChanging">
            <summary>
            Occurs before changes are made to the document's text.
            </summary>
            <seealso cref="T:Infragistics.Documents.TextChangingEventArgs">TextChangingEventArgs class</seealso>
        </member>
        <member name="E:Infragistics.Documents.TextDocument.TextLoaded">
            <summary>
            Occurs after either the <see cref="M:Infragistics.Documents.TextDocument.Load(System.IO.Stream)">Load</see> or the <see cref="M:Infragistics.Documents.TextDocument.InitializeText(System.String)"/> method is called.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> this event will also occurs if there is existing text and the <see cref="P:Infragistics.Documents.TextDocument.Language"/> property is changed.</para>
            </remarks>
        </member>
        <member name="P:Infragistics.Documents.TextDocument.CurrentSnapshot">
            <summary>
            Returns a <see cref="T:Infragistics.Documents.TextDocumentSnapshot">snapshot</see> representing the current version of the document (read-only).
            </summary>
            <value>A thread-safe immutable snapshot of the current version of the document</value>
            <remarks>
            <para class="note"><b>Note:</b> Every time a change is made to the document a new snapshot is created. Each snapshot is thread-safe and immutable.</para>
            </remarks>
        </member>
        <member name="P:Infragistics.Documents.TextDocument.FileName">
            <summary>
            Returns the name of the file passed into the <see cref="M:Infragistics.Documents.TextDocument.Load(System.String)"/> method (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextDocument.Language">
            <summary>
            Returns/sets the associated language
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> if this property is not set then the document will be treated as plain text with no syntax rules. In this case an instance of the <see cref="T:Infragistics.Documents.PlainTextLanguage">PlainTextLanguage</see> will be returned.</para>
            </remarks>
        </member>
        <member name="P:Infragistics.Documents.TextDocument.IsReadOnly">
            <summary>
            Returns/sets whether or not the text in the document can be changed.
            </summary>
            <value>False if the text can be edited, otherwise true.</value>
        </member>
        <member name="P:Infragistics.Documents.TextDocument.NewLineSequence">
            <summary>
            Returns/sets the sequence of characters used to delimit lines in the document.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextDocument.SyntaxTree">
            <summary>
            Returns the syntax parse tree (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextDocument.TabExtent">
            <summary>
            Returns/sets the number of spaces a tab character represents.
            </summary>
            <seealso cref="P:Infragistics.Documents.TextDocument.TabEntryBehavior">TabEntryBehavior</seealso>
        </member>
        <member name="P:Infragistics.Documents.TextDocument.TabEntryBehavior">
            <summary>
            Returns/sets what gets inserted into a document when a tab key is entered..
            </summary>
            <value>The default value is 'KeepTabs'.</value>
            <seealso cref="P:Infragistics.Documents.TextDocument.TabExtent"/>
        </member>
        <member name="P:Infragistics.Documents.TextDocument.UndoManager">
            <summary>
            Returns/sets the object that manages the undo/redo stacks
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> by default each instance of a TextDocument will instanitate its own <see cref="T:Infragistics.Undo.UndoManager"/>. However, since this property is settable it is possible to have some or all TextDocuments share a single UndoManager.</para>
            </remarks>
        </member>
        <member name="E:Infragistics.Documents.TextDocument.PropertyChanged">
            <summary>
            Ocuurs after a property value has changed
            </summary>
        </member>
        <member name="T:Infragistics.Documents.TextChangingEventArgs">
            <summary>
            Provides information about a change to text in a
            <see cref="T:Infragistics.Documents.TextDocument">TextDocument</see>
            </summary>
            <seealso cref="E:Infragistics.Documents.TextDocument.TextChanging">TextChanging Event</seealso>
        </member>
        <member name="P:Infragistics.Documents.TextChangingEventArgs.After">
            <summary>
            Returns the new 
            <see cref="T:Infragistics.Documents.TextDocumentSnapshot">snapshot</see> 
            which reflects the
            <see cref="T:Infragistics.Documents.TextChange">changes</see>
            which triggered this event are applied.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextChangingEventArgs.Before">
            <summary>
            Returns the current 
            <see cref="T:Infragistics.Documents.TextDocumentSnapshot">snapshot</see> 
            which reflects the state of the document before the  <see cref="T:Infragistics.Documents.TextChange">changes</see> which triggered this event are applied.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextChangingEventArgs.CanCancel">
            <summary>
            Determines if this action can be canceled (read-only).
            </summary>
            <value>true to allow cancellation of the action, otherwise false.</value>
            <remarks>
            <para class="note"><b>Note:</b> if the <see cref="P:Infragistics.Documents.TextChangingEventArgs.Source"/> property returns 'Undo' or 'Redo' CanCancel will return false."/&gt;</para>
            </remarks>
        </member>
        <member name="P:Infragistics.Documents.TextChangingEventArgs.Changes">
            <summary>
            Returns a read-only list containing all 
            <see cref="T:Infragistics.Documents.TextChange">changes</see>
            that triggered this event.
            </summary>
            <seealso cref="T:Infragistics.Documents.TextChange"/>
        </member>
        <member name="P:Infragistics.Documents.TextChangingEventArgs.Source">
            <summary>
            Identifies the source of the change (read-only).
            </summary>
        </member>
        <member name="T:Infragistics.Documents.TextChangedEventArgs">
            <summary>
            Provides information about a change to text in a
            <see cref="T:Infragistics.Documents.TextDocument">TextDocument</see>
            </summary>
            <seealso cref="E:Infragistics.Documents.TextDocument.TextChanged">TextChanged Event</seealso>
        </member>
        <member name="P:Infragistics.Documents.TextChangedEventArgs.After">
            <summary>
            Returns the current
            <see cref="T:Infragistics.Documents.TextDocumentSnapshot">snapshot</see>,
            which reflects the
            <see cref="T:Infragistics.Documents.TextChange">changes</see>
            which triggered this event.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextChangedEventArgs.Before">
            <summary>
            Returns the old 
            <see cref="T:Infragistics.Documents.TextDocumentSnapshot">snapshot</see>,
            which reflects the state of the document before the 
            <see cref="T:Infragistics.Documents.TextChange">changes</see>
            which triggered this event.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextChangedEventArgs.Changes">
            <summary>
            Returns a read-only list containing all 
            <see cref="T:Infragistics.Documents.TextChange">changes</see>
            that triggered this event.
            </summary>
            <seealso cref="T:Infragistics.Documents.TextChange"/>
        </member>
        <member name="P:Infragistics.Documents.TextChangedEventArgs.Source">
            <summary>
            Identifies the source of the change (read-only).
            </summary>
        </member>
        <member name="T:Infragistics.ISupportPositioning">
            <summary>
            An interface implemented by objects that need to be sorted based on a list of before and after relationships.
            </summary>
        </member>
        <member name="P:Infragistics.ISupportPositioning.Before">
            <summary>
            An array of string keys that represent the items before which the current item should be sorted.
            </summary>
        </member>
        <member name="P:Infragistics.ISupportPositioning.After">
            <summary>
            An array of string keys that represent the items after which the current item should be sorted.
            </summary>
        </member>
        <member name="P:Infragistics.ISupportPositioning.Key">
            <summary>
            The string key of the current item.  This key will be referenced in the <see cref="P:Infragistics.ISupportPositioning.Before"/> and <see cref="P:Infragistics.ISupportPositioning.After"/> lists of other items.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.CoreServiceTypes">
            <summary>
            A class that exposes static Type properties for each of the core services.
            </summary>
            <remarks>
            <para class="body">Only one instance of a specific core service type can be registered.  Core service types
            are used to provide essential services.</para>
            </remarks>
        </member>
        <member name="F:Infragistics.Documents.CoreServiceTypes.IndentServiceProviderType">
            <summary>
            Returns a type that is used to register the <see cref="T:Infragistics.Documents.IIndentServiceProvider"/> core service type.
            </summary>
            <seealso cref="P:Infragistics.SyntaxParsing.LanguageBase.ServicesManager">LanguageBase.ServicesManager</seealso>
            <seealso cref="M:Infragistics.SyntaxParsing.ServicesManager.RegisterService(System.Type,System.Object)">ServicesManager.RegisterService</seealso>
        </member>
        <member name="F:Infragistics.Documents.CoreServiceTypes.SyntaxErrorTaggerProviderType">
            <summary>
            Returns a type that is used to register the <see cref="T:Infragistics.Documents.Tagging.SyntaxErrorTaggerProvider"/> core service type.
            </summary>
            <seealso cref="P:Infragistics.SyntaxParsing.LanguageBase.ServicesManager">LanguageBase.ServicesManager</seealso>
            <seealso cref="M:Infragistics.SyntaxParsing.ServicesManager.RegisterService(System.Type,System.Object)">ServicesManager.RegisterService</seealso>
        </member>
        <member name="T:Infragistics.Documents.IIndentServiceProvider">
            <summary>
            The interface used by an object that provides the indenting service for lines in a document.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.IIndentServiceProvider.CalculateLineIndent(Infragistics.Documents.TextDocument,System.Int32)">
            <summary>
            Returns the number of columns to indent a line.
            </summary>
            <param name="document">The document being edited.</param>
            <param name="lineIndex">The zero-based line index of the line being indented</param>
            <returns>The number of columns to indent the line (i.e. the amount of whitespace before the first non-tab or space character).</returns>
            <remarks>
            <para class="note"><b>Note:</b> use the <see cref="M:Infragistics.Documents.TextDocumentSnapshot.LineFromIndex(System.Int32)">LineFromIndex</see> and/or <see cref="M:Infragistics.Documents.TextDocumentSnapshot.GetLines(System.Int32,System.Boolean)">GetLines</see> methods off the document's <see cref="P:Infragistics.Documents.TextDocument.CurrentSnapshot">CurrentSnapshot</see> to analyze the line. Also, the document's <see cref="P:Infragistics.Documents.TextDocument.TabExtent">TabExtent</see> provides the number of characters that determine tab locations within a line.</para>
            </remarks>
            <seealso cref="M:Infragistics.Documents.TextDocumentSnapshot.LineFromIndex(System.Int32)">LineFromIndex</seealso>
            <seealso cref="M:Infragistics.Documents.SnapshotLineInfo.GetIndent">SnapshotLineInfo.CalculateIndent"</seealso>
        </member>
        <member name="T:Infragistics.Documents.SnapshotLineInfo">
            <summary>
            An object that represents a line within a specific <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/>
            </summary>
        </member>
        <member name="M:Infragistics.Documents.SnapshotLineInfo.Equals(System.Object)">
            <summary>
            Compares the specified object to this object to see if they are equivalent.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotLineInfo.GetHashCode">
            <summary>
            Returns the hash code of the object.
            </summary>
            <returns>A hash code for this instance</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotLineInfo.op_Equality(Infragistics.Documents.SnapshotLineInfo,Infragistics.Documents.SnapshotLineInfo)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Documents.SnapshotLineInfo"/> structures for equality
            </summary>
            <param name="line1">The first structure</param>
            <param name="line2">The other structure</param>
            <returns>true if the two instances are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotLineInfo.op_Inequality(Infragistics.Documents.SnapshotLineInfo,Infragistics.Documents.SnapshotLineInfo)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Documents.SnapshotLineInfo"/> structures for inequality
            </summary>
            <param name="line1">The first structure</param>
            <param name="line2">The other structure</param>
            <returns>true if the two instances are not equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotLineInfo.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>A string that represents this <see cref="T:Infragistics.Documents.SnapshotLineInfo"/></returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotLineInfo.Contains(Infragistics.SyntaxParsing.Token)">
            <summary>
            Returns true if the <see cref="T:Infragistics.SyntaxParsing.Token">token</see> is contained in this line.
            </summary>
            <param name="token">The token to test.</param>
            <returns>true if the line contains the token, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotLineInfo.GetCharacter(System.Int32)">
            <summary>
            Returns the character at a specific offset in the line.
            </summary>
            <param name="charOffset">The zero-based offset of the character from the beginning of the line.</param>
            <returns>The character in question.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If charOffset is less than 0 or greater than or equal to <see cref="P:Infragistics.Documents.SnapshotLineInfo.Length"/>.</exception>
        </member>
        <member name="M:Infragistics.Documents.SnapshotLineInfo.GetIndent">
            <summary>
            Returns the line indent.
            </summary>
            <returns>The number of columns that the line is indented by (i.e. the amount of whitespace before the first non-tab or space character).</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotLineInfo.GetText(System.Boolean)">
            <summary>
            Returns the concatenated text from all the <see cref="T:Infragistics.SyntaxParsing.Token">Token</see>s that make up the line
            </summary>
            <param name="includeLineFeed">If true the returned string will include any carriage return/line feed characters at the end of the line.</param>
            <returns>A string representing the complete text of the line.</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotLineInfo.GetTokenAtIndex(System.Int32)">
            <summary>
            Returns the <see cref="T:Infragistics.SyntaxParsing.Token">token</see> at a specific index.
            </summary>
            <param name="tokenIndex">The zero-based index of the token.</param>
            <returns>The token in question.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If tokenIndex is less than 0 or greater than or equal to <see cref="P:Infragistics.Documents.SnapshotLineInfo.TokenCount"/>.</exception>
        </member>
        <member name="M:Infragistics.Documents.SnapshotLineInfo.GetTokenAtOffset(System.Int32,System.Boolean)">
            <summary>
            Returns the <see cref="T:Infragistics.SyntaxParsing.Token">token</see> that contains a specific character.
            </summary>
            <param name="charOffset">The zero-based offset of the character from the beginning of the line.</param>
            <param name="includeZeroLengthTokens">If true will return the first at the offset even if it has no length.</param>
            <returns>The token in question.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If charOffset is less than 0 or greater than or equal to <see cref="P:Infragistics.Documents.SnapshotLineInfo.Length"/>.</exception>
        </member>
        <member name="M:Infragistics.Documents.SnapshotLineInfo.IndexOf(Infragistics.SyntaxParsing.Token)">
            <summary>
            Returns the zero-based index of a <see cref="T:Infragistics.SyntaxParsing.Token">token</see>.
            </summary>
            <param name="token">The token to test.</param>
            <returns>The zero-based index or -1 if the token is not in the line.</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotLineInfo.IsSameAs(Infragistics.Documents.SnapshotLineInfo)">
            <summary>
            Returns true if the specified <see cref="T:Infragistics.Documents.SnapshotLineInfo"/> represents the same line content.
            </summary>
            <param name="snapshotLineInfo">The <see cref="T:Infragistics.Documents.SnapshotLineInfo"/> to check.</param>
            <returns>True if the specified <see cref="T:Infragistics.Documents.SnapshotLineInfo"/> represents the same line content, otherwise false.</returns>
            <remarks>
            <para class="note"><b>Note:</b> this method will return true if the line content is the same even though the <see cref="P:Infragistics.Documents.SnapshotLineInfo.Snapshot"/> may be different.</para>
            </remarks>
        </member>
        <member name="P:Infragistics.Documents.SnapshotLineInfo.Length">
            <summary>
            Returns the length of all the text in the line including carriage return and line feed characters. (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.SnapshotLineInfo.LineIndex">
            <summary>
            Returns the zero-based index of the line (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.SnapshotLineInfo.LineNumber">
            <summary>
            Returns the 1-based line number (read-only).
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> this is one more than the <see cref="P:Infragistics.Documents.SnapshotLineInfo.LineIndex"/> value.</para>
            </remarks>
        </member>
        <member name="P:Infragistics.Documents.SnapshotLineInfo.OverallOffset">
            <summary>
            Returns the zero-based offset of this line from the beginning of the document (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.SnapshotLineInfo.Snapshot">
            <summary>
            Returns the associated <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/> (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.SnapshotLineInfo.TextLength">
            <summary>
            Returns the length of all the text in the line excluding carriage return and line feed characters. (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.SnapshotLineInfo.TokenCount">
            <summary>
            Returns the total number of <see cref="T:Infragistics.SyntaxParsing.Token">tokens</see> in the line including the line terminator token (read-only).
            </summary>
        </member>
        <member name="T:Infragistics.Documents.SnapshotPoint">
            <summary>
            Represents a point (i.e. offset) within a specific <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/>
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> to translate a point between 2 related <see cref="T:Infragistics.Documents.TextDocumentSnapshot">Snapshot</see>s use the <see cref="M:Infragistics.Documents.SnapshotPoint.TranslateTo(Infragistics.Documents.TextDocumentSnapshot,Infragistics.Documents.PointTrackingMode)"/> method.</para>
            </remarks>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.#ctor(Infragistics.Documents.TextDocumentSnapshot,System.Int32)">
            <summary>
            Instantiates a new <see cref="T:Infragistics.Documents.SnapshotPoint"/>
            </summary>
            <param name="snapshot">The associated TextDocumentSnapshot</param>
            <param name="position">The position within the snapshot</param>
            <exception cref="T:System.ArgumentNullException">If the snapshot is null.</exception>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.GetHashCode">
            <summary>
            Returns the hash code of the structure.
            </summary>
            <returns>A hash code for this instance</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.Equals(System.Object)">
            <summary>
            Compares the specified object to this object to see if they are equivalent.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.op_Implicit(Infragistics.Documents.SnapshotPoint)~System.Int32">
            <summary>
            Implicitly converts the SnapshotPoint to an int representing its position.
            </summary>
            <param name="point">The point</param>
            <returns>The point's position</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.op_Addition(Infragistics.Documents.SnapshotPoint,System.Int32)">
            <summary>
            Adds an offset to a position.
            </summary>
            <param name="point">The starting point</param>
            <param name="offset">The amount to increment</param>
            <returns>A new SnapshotPoint with the resulting position</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.op_Subtraction(Infragistics.Documents.SnapshotPoint,System.Int32)">
            <summary>
            Subtracts an offset from a position.
            </summary>
            <param name="point">The starting point</param>
            <param name="offset">The amount to decrement</param>
            <returns>A new SnapshotPoint with the resulting position</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.op_Subtraction(Infragistics.Documents.SnapshotPoint,Infragistics.Documents.SnapshotPoint)">
            <summary>
            Comuotes the difference (delta) between two <see cref="T:Infragistics.Documents.SnapshotPoint"/> structures.
            </summary>
            <param name="point">The first structure</param>
            <param name="other">The other structure</param>
            <returns>The difference between the 2 points.</returns>
            <exception cref="T:System.ArgumentException">If the snapshots don't match.</exception>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.op_GreaterThan(Infragistics.Documents.SnapshotPoint,Infragistics.Documents.SnapshotPoint)">
            <summary>
            Compares the relative values of two <see cref="T:Infragistics.Documents.SnapshotPoint"/> structures 
            </summary>
            <param name="point">The first structure</param>
            <param name="other">The other structure</param>
            <returns>true if the point is greater than other</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.op_LessThan(Infragistics.Documents.SnapshotPoint,Infragistics.Documents.SnapshotPoint)">
            <summary>
            Compares the relative values of two <see cref="T:Infragistics.Documents.SnapshotPoint"/> structures 
            </summary>
            <param name="point">The first structure</param>
            <param name="other">The other structure</param>
            <returns>true if the point is less than other</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.op_Equality(Infragistics.Documents.SnapshotPoint,Infragistics.Documents.SnapshotPoint)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Documents.SnapshotPoint"/> structures for equality
            </summary>
            <param name="point1">The first structure</param>
            <param name="point2">The other structure</param>
            <returns>true if the two instances are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.op_Inequality(Infragistics.Documents.SnapshotPoint,Infragistics.Documents.SnapshotPoint)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Documents.SnapshotPoint"/> structures for inequality
            </summary>
            <param name="point1">The first structure</param>
            <param name="point2">The other structure</param>
            <returns>true if the two instances are not equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.Add(System.Int32)">
            <summary>
            Returns a new SnapshotPoint with its position incremented by an offset.
            </summary>
            <param name="offset">The amount to add to the position</param>
            <returns>A new SnapshotPoint with its position incremented by the offset.</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.Difference(Infragistics.Documents.SnapshotPoint)">
            <summary>
            Returns the position difference between this point and another.
            </summary>
            <param name="other">The other point</param>
            <returns>the difference between the 2 points.</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.FromTextLocation(Infragistics.SyntaxParsing.TextLocation,Infragistics.Documents.TextDocumentSnapshot)">
            <summary>
            Returns a <see cref="T:Infragistics.Documents.SnapshotPoint"/> that represents the specified <see cref="T:Infragistics.SyntaxParsing.TextLocation"/> in the specified <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/>
            </summary>
            <param name="textLocation">The <see cref="T:Infragistics.SyntaxParsing.TextLocation"/>.</param>
            <param name="associatedSnapshot">The <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/> associated with the specified textLocation</param>
            <returns>A <see cref="T:Infragistics.Documents.SnapshotPoint"/> that represents the specified <see cref="T:Infragistics.SyntaxParsing.TextLocation"/> in the specified <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/></returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.GetChar">
            <summary>
            Returns the character at this position
            </summary>
            <returns>The char</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.GetContainingLine">
            <summary>
            Returns the line containing this point
            </summary>
            <returns>The line containing the point.</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.GetTextLocation">
            <summary>
            Returns a <see cref="T:Infragistics.SyntaxParsing.TextLocation"/> that corresponds to the SnapshotPoint's <see cref="P:Infragistics.Documents.SnapshotPoint.Position"/> within the current <see cref="P:Infragistics.Documents.SnapshotPoint.Snapshot"/>.
            </summary>
            <returns>A <see cref="T:Infragistics.SyntaxParsing.TextLocation"/> that corresponds to the SnapshotPoint's <see cref="P:Infragistics.Documents.SnapshotPoint.Position"/> within the current <see cref="P:Infragistics.Documents.SnapshotPoint.Snapshot"/>.</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.Subtract(System.Int32)">
            <summary>
            Returns a new SnapshotPoint with its position decremented by an offset.
            </summary>
            <param name="offset">The amount to subtract from the position</param>
            <returns>A new SnapshotPoint with its position decremented by the offset.</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.TranslateTo(Infragistics.Documents.TextDocumentSnapshot,Infragistics.Documents.PointTrackingMode)">
            <summary>
            Translates the point from one snapshot to another.
            </summary>
            <param name="target">The target snapshot.</param>
            <param name="mode">The tracking mode to use.</param>
            <returns>A new <see cref="T:Infragistics.Documents.SnapshotPoint"/> with the adjusted position for the target snapshot.</returns>
            <exception cref="T:System.ArgumentNullException">If the target snapshot is null.</exception>
            <exception cref="T:System.ArgumentException">If the target snapshot is not either a predecessor or successor of this snapshot (i.e. they weren't created from the same root document).</exception>
            <seealso cref="M:Infragistics.Documents.TextDocumentSnapshot.IsCompatibleWith(Infragistics.Documents.TextDocumentSnapshot)">TextDocumentSnapshot.IsCompatibleWith</seealso>
        </member>
        <member name="P:Infragistics.Documents.SnapshotPoint.Position">
            <summary>
            Returns the normalized zero-based end offset from the beginning of the <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/> (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.SnapshotPoint.Snapshot">
            <summary>
            Returns the associated <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/> (read-only).
            </summary>
        </member>
        <member name="T:Infragistics.Documents.SnapshotSpan">
            <summary>
            Represents the span of text within a specific <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/> based on an offset and length
            </summary>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.#ctor(Infragistics.Documents.TextDocumentSnapshot,System.Int32,System.Int32)">
            <summary>
            Instantiates a new <see cref="T:Infragistics.Documents.SnapshotSpan"/>
            </summary>
            <param name="snapshot">The associated TextDocumentSnapshot</param>
            <param name="offset">The zero-based offset into the document</param>
            <param name="length">The number of characters in the span (can be zero or negative)</param>
            <exception cref="T:System.ArgumentNullException">If snapshot is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If offset is less than 0 or the offset + length is less than 0.</exception>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.#ctor(Infragistics.Documents.TextDocumentSnapshot,Infragistics.SyntaxParsing.TextSpan)">
            <summary>
            Instantiates a new <see cref="T:Infragistics.Documents.SnapshotSpan"/>
            </summary>
            <param name="snapshot">The associated TextDocumentSnapshot</param>
            <param name="span">The span in the snapshot</param>
            <exception cref="T:System.ArgumentNullException">If snapshot is null.</exception>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.GetHashCode">
            <summary>
            Returns the hash code of the structure.
            </summary>
            <returns>A hash code for this instance</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.Equals(System.Object)">
            <summary>
            Compares the specified object to this object to see if they are equivalent.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.op_Implicit(Infragistics.Documents.SnapshotSpan)~Infragistics.SyntaxParsing.TextSpan">
            <summary>
            Implicitly converts the SnapshotSpan to a TextSpan.
            </summary>
            <param name="span">The SnapshotSpan</param>
            <returns>The TextSpan</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.op_Equality(Infragistics.Documents.SnapshotSpan,Infragistics.Documents.SnapshotSpan)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Documents.SnapshotSpan"/> structures for equality
            </summary>
            <param name="span1">The first structure</param>
            <param name="span2">The other structure</param>
            <returns>true if the two instances are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.op_Inequality(Infragistics.Documents.SnapshotSpan,Infragistics.Documents.SnapshotSpan)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Documents.SnapshotSpan"/> structures for inequality
            </summary>
            <param name="span1">The first structure</param>
            <param name="span2">The other structure</param>
            <returns>true if the two instances are not equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.GetText">
            <summary>
            Returns the associated text.
            </summary>
            <returns>The associated text.</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.Intersection(Infragistics.Documents.SnapshotSpan)">
            <summary>
            Returns a span that contains just the intersection between this span and another.
            </summary>
            <param name="span">The span to intersect.</param>
            <returns>A new SnapshotSpan with the intersect or null if the spans don't intersect</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.Intersection(Infragistics.SyntaxParsing.TextSpan)">
            <summary>
            Returns a span that contains just the intersection between this span and another.
            </summary>
            <param name="span">The span to intersect.</param>
            <returns>A new SnapshotSpan with the intersect or null if the spans don't intersect</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.IntersectsWith(Infragistics.Documents.SnapshotSpan)">
            <summary>
            Returns true is the span intersects with this span.
            </summary>
            <param name="span">The span to test.</param>
            <returns>true if the spans intersect, otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.IntersectsWith(Infragistics.SyntaxParsing.TextSpan)">
            <summary>
            Returns true is the span intersects with this span.
            </summary>
            <param name="span">The span to test.</param>
            <returns>true if the spans intersect, otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.Overlap(Infragistics.Documents.SnapshotSpan)">
            <summary>
            Returns a span that contains just the overlap between this span and another.
            </summary>
            <param name="span">The span to overlap.</param>
            <returns>A new SnapshotSpan with the overlap or null if the spans don't overlap</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.Overlap(Infragistics.SyntaxParsing.TextSpan)">
            <summary>
            Returns a span that contains just the overlap between this span and another.
            </summary>
            <param name="span">The span to overlap.</param>
            <returns>A new SnapshotSpan with the overlap or null if the spans don't overlap</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.OverlapsWith(Infragistics.Documents.SnapshotSpan)">
            <summary>
            Returns true is the span overlaps with this span.
            </summary>
            <param name="span">The span to test.</param>
            <returns>true if the spans overlap, otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.OverlapsWith(Infragistics.SyntaxParsing.TextSpan)">
            <summary>
            Returns true is the span overlaps with this span.
            </summary>
            <param name="span">The span to test.</param>
            <returns>true if the spans overlap, otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.TranslateTo(Infragistics.Documents.TextDocumentSnapshot,Infragistics.Documents.SpanTrackingMode)">
            <summary>
            Translates the span from one snapshot to another
            </summary>
            <param name="target">The target snapshot</param>
            <param name="mode">The tracking mode to use.</param>
            <returns>A new <see cref="T:Infragistics.Documents.SnapshotSpan"/> with the adjusted values for the target snapshot.</returns>
            <exception cref="T:System.ArgumentNullException">If the target snapshot is null.</exception>
            <exception cref="T:System.ArgumentException">If the target snapshot is not either a predecessor or successor of this snapshot (i.e. they weren't created from the same root document).</exception>
            <seealso cref="M:Infragistics.Documents.TextDocumentSnapshot.IsCompatibleWith(Infragistics.Documents.TextDocumentSnapshot)">TextDocumentSnapshot.IsCompatibleWith</seealso>
        </member>
        <member name="P:Infragistics.Documents.SnapshotSpan.End">
            <summary>
            Returns the end point from the beginning of the <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/> (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.SnapshotSpan.EndLocation">
            <summary>
            Returns the end point within the <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/> (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.SnapshotSpan.IsEmpty">
            <summary>
            Returns true if the length of the span is 0 (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.SnapshotSpan.Length">
            <summary>
            Returns the length of the text span (read-only).
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> if the length is negative that means the <see cref="P:Infragistics.Documents.SnapshotSpan.Start"/> of the span is before the <see cref="P:Infragistics.Documents.SnapshotSpan.Offset"/></para>
            </remarks>
        </member>
        <member name="P:Infragistics.Documents.SnapshotSpan.Offset">
            <summary>
            Returns the zero-based offset from the beginning of the <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/> (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.SnapshotSpan.Start">
            <summary>
            Returns the start point within the <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/> (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.SnapshotSpan.StartLocation">
            <summary>
            Returns the normalized start location within the <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/> (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.SnapshotSpan.Snapshot">
            <summary>
            Returns the associated <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/> (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.SnapshotSpan.TextSpan">
            <summary>
            Returns the <see cref="P:Infragistics.Documents.SnapshotSpan.TextSpan"/> structure (read-only).
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Word">
            <summary>
            Represents the word of text within a specific <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Word.GetHashCode">
            <summary>
            Returns the hash code of the structure.
            </summary>
            <returns>A hash code for this instance</returns>
        </member>
        <member name="M:Infragistics.Documents.Word.Equals(System.Object)">
            <summary>
            Compares the specified object to this object to see if they are equivalent.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.Word.op_Equality(Infragistics.Documents.Word,Infragistics.Documents.Word)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Documents.Word"/> structures for equality
            </summary>
            <param name="word1">The first structure</param>
            <param name="word2">The other structure</param>
            <returns>true if the two instances are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.Word.op_Inequality(Infragistics.Documents.Word,Infragistics.Documents.Word)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Documents.Word"/> structures for inequality
            </summary>
            <param name="word1">The first structure</param>
            <param name="word2">The other structure</param>
            <returns>true if the two instances are not equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.Word.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>The text of the <see cref="T:Infragistics.Documents.Word"/></returns>
        </member>
        <member name="P:Infragistics.Documents.Word.Span">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.SnapshotSpan">span</see> of the text (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Word.Text">
            <summary>
            Returns the text of the word (read-only).
            </summary>
        </member>
        <member name="T:Infragistics.SyntaxParsing.SyntaxTree">
            <summary>
            Represents the parsed syntax tree for a specific <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/>.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.SyntaxTree.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Infragistics.SyntaxParsing.SyntaxTree.RootNode">
            <summary>
            Returns the root node of the tree (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.SyntaxParsing.SyntaxTree.Snapshot">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/> that was parsed (read-only).
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Tagging.ClassificationTag">
            <summary>
            Basic implementation of <see cref="T:Infragistics.Documents.Tagging.IClassificationTag"/>.
            </summary>
            <seealso cref="P:Infragistics.Documents.Tagging.ClassificationTag.ClassificationType"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITag"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ClassificationTagger"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ClassificationTaggerProvider"/>
        </member>
        <member name="T:Infragistics.Documents.Tagging.IClassificationTag">
            <summary>
            The interface definition for all objects that represent a classification tag.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Tagging.ITag">
            <summary>
            The base interface for all tag types.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Tagging.IClassificationTag.ClassificationType">
            <summary>
            The <see cref="P:Infragistics.Documents.Tagging.IClassificationTag.ClassificationType"/> associated with this tag.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Tagging.ClassificationTag.#ctor(Infragistics.Documents.ClassificationType)">
            <summary>
            Constructor
            </summary>
            <param name="classificationType">The <see cref="P:Infragistics.Documents.Tagging.ClassificationTag.ClassificationType"/> associated with this <see cref="T:Infragistics.Documents.Tagging.ClassificationTag"/></param>
        </member>
        <member name="P:Infragistics.Documents.Tagging.ClassificationTag.ClassificationType">
            <summary>
            Returns the <see cref="P:Infragistics.Documents.Tagging.ClassificationTag.ClassificationType"/> associated with this <see cref="T:Infragistics.Documents.Tagging.ClassificationTag"/> (read only).
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Tagging.ClassificationTagger">
            <summary>
            An <see cref="T:Infragistics.Documents.Tagging.ITagger`1"/> implementation that tags document text with <see cref="T:Infragistics.Documents.Tagging.IClassificationTag"/>s.
            </summary>
            <seealso cref="T:Infragistics.Documents.Tagging.TaggerBase`1"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITagger`1"/>
            <seealso cref="T:Infragistics.Documents.ClassificationType"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ClassificationTag"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITag"/>
        </member>
        <member name="T:Infragistics.Documents.Tagging.TaggerBase`1">
            <summary>
            An abstract base class for taggers (i.e., objects that implement <see cref="T:Infragistics.Documents.Tagging.ITagger`1"/>)
            </summary>
            <typeparam name="T">The <see cref="T:Infragistics.Documents.Tagging.ITag"/> derived type that the tagger should create</typeparam>
            <seealso cref="T:Infragistics.Documents.Tagging.ITagger`1"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITag"/>
            <seealso cref="T:Infragistics.Documents.TextDocument"/>
        </member>
        <member name="T:Infragistics.Documents.Tagging.ITagger`1">
            <summary>
            The interface definition for all objects that provide <see cref="T:Infragistics.Documents.Tagging.ITag"/>s from text.
            </summary>
            <typeparam name="T">The type of <see cref="T:Infragistics.Documents.Tagging.ITag"/>s to provide.</typeparam>
            <seealso cref="T:Infragistics.Documents.Tagging.ITag"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITaggerProvider"/>
        </member>
        <member name="M:Infragistics.Documents.Tagging.ITagger`1.GetTags(Infragistics.Documents.NormalizedSnapshotSpanCollection)">
            <summary>
            Returns all the tags that intersect the specified spans.
            </summary>
            <param name="spans">A collection of spans over which the tagger looks for overlapping or contained tags</param>
            <returns><see cref="T:Infragistics.Documents.Tagging.ITagSpan`1"/>s for all tags that are contained by or overlap the spans.</returns>
        </member>
        <member name="E:Infragistics.Documents.Tagging.ITagger`1.TagsChanged">
            <summary>
            Raised when tags of type T are added or removed.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Tagging.TaggerBase`1.#ctor(Infragistics.Documents.TextDocument)">
            <summary>
            Constructor
            </summary>
            <param name="document">The <see cref="T:Infragistics.Documents.TextDocument"/> containing the text to be tagged.</param>
        </member>
        <member name="M:Infragistics.Documents.Tagging.TaggerBase`1.OnTagsChanged(Infragistics.Documents.TagsChangedEventArgs)">
            <summary>
            Used to invoke the <see cref="E:Infragistics.Documents.Tagging.TaggerBase`1.TagsChanged"/> event.
            </summary>
            <param name="args">The argumants associated with the event.</param>
            <seealso cref="E:Infragistics.Documents.Tagging.TaggerBase`1.TagsChanged"/>
            <seealso cref="T:Infragistics.Documents.TagsChangedEventArgs"/>
        </member>
        <member name="M:Infragistics.Documents.Tagging.TaggerBase`1.GetTags(Infragistics.Documents.NormalizedSnapshotSpanCollection)">
            <summary>
            Returns all the <see cref="T:Infragistics.Documents.Tagging.ITag"/>s that intersect the specified spans.
            </summary>
            <param name="spans">A collection of spans whose text is examined and tagged with <see cref="T:Infragistics.Documents.Tagging.ITag"/> derived tags.</param>
            <returns><see cref="T:Infragistics.Documents.Tagging.ITagSpan`1"/>s for all <see cref="T:Infragistics.Documents.Tagging.ITokenTag"/>s that are contained by or overlap the spans.</returns>
        </member>
        <member name="P:Infragistics.Documents.Tagging.TaggerBase`1.Document">
            <summary>
            Returns the document associated with this <see cref="T:Infragistics.Documents.Tagging.ITagger`1"/> (read only)
            </summary>
        </member>
        <member name="E:Infragistics.Documents.Tagging.TaggerBase`1.TagsChanged">
            <summary>
            Raised when tags are added or removed.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Tagging.ClassificationTagger.#ctor(Infragistics.Documents.TextDocument)">
            <summary>
            Constructor
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:Infragistics.Documents.Tagging.ClassificationTagger.GetTags(Infragistics.Documents.NormalizedSnapshotSpanCollection)">
            <summary>
            Returns all the <see cref="T:Infragistics.Documents.Tagging.IClassificationTag"/>s that intersect the specified spans.
            </summary>
            <param name="spans">A collection of spans whose text is examined and tagged with <see cref="T:Infragistics.Documents.Tagging.IClassificationTag"/>s.</param>
            <returns><see cref="T:Infragistics.Documents.Tagging.ITagSpan`1"/>s for all <see cref="T:Infragistics.Documents.Tagging.IClassificationTag"/>s that are contained by or overlap the spans.</returns>
        </member>
        <member name="T:Infragistics.Documents.Tagging.ClassificationTaggerProvider">
            <summary>
            Provides a Classification tagger.
            </summary>
            <seealso cref="T:Infragistics.Documents.Tagging.ITag"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITagger`1"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITaggerProvider"/>
        </member>
        <member name="T:Infragistics.Documents.Tagging.ITaggerProvider">
            <summary>
            The interface definition for objects create Taggers.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Tagging.ITaggerProvider.CreateTagger``1(Infragistics.Documents.TextDocument)">
            <summary>
            Returns a Tagger that can tag the specified document with tags of type T.
            </summary>
            <param name="document">The document that contains the text to be tagged.</param>
            <returns>A Tagger that can tag the specified document with tags of type T.</returns>
        </member>
        <member name="P:Infragistics.Documents.Tagging.ITaggerProvider.SupportedTagType">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.Tagging.ITag"/> derived type supported by the taggers created by this tagger provider.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Tagging.ClassificationTaggerProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Tagging.ClassificationTaggerProvider.CreateTagger``1(Infragistics.Documents.TextDocument)">
            <summary>
            Returns a Tagger that can tag the specified document with <see cref="T:Infragistics.Documents.Tagging.IClassificationTag"/>s.
            </summary>
            <param name="document">The document that contains the text to be tagged.</param>
            <returns>A Tagger that can tag the specified document with <see cref="T:Infragistics.Documents.Tagging.IClassificationTag"/>s.</returns>
            <seealso cref="T:Infragistics.Documents.Tagging.ITag"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITagger`1"/>
        </member>
        <member name="P:Infragistics.Documents.Tagging.ClassificationTaggerProvider.SupportedTagType">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.Tagging.ITag"/> derived type supported by the taggers created by this tagger provider.
            </summary>
            <seealso cref="T:Infragistics.Documents.Tagging.ITag"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITagger`1"/>
        </member>
        <member name="T:Infragistics.Documents.Tagging.DocumentTagAggregator`1">
            <summary>
            An implementation of ITagAggregator for use with <see cref="T:Infragistics.Documents.TextDocument"/>s.
            </summary>
            <typeparam name="T">The type of <see cref="T:Infragistics.Documents.Tagging.ITag"/> to aggregate</typeparam>
            <seealso cref="T:Infragistics.Documents.Tagging.ITagAggregator`1"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITag"/>
            <seealso cref="T:Infragistics.Documents.TextDocument"/>
        </member>
        <member name="T:Infragistics.Documents.Tagging.ITagAggregator`1">
            <summary>
            The interface definition for objects that process all providers which generate tags of a specific type that fall within a specified list of spans. 
            </summary>
            <typeparam name="T">The type of <see cref="T:Infragistics.Documents.Tagging.ITag"/> to aggregate.</typeparam>
        </member>
        <member name="M:Infragistics.Documents.Tagging.ITagAggregator`1.GetTags(Infragistics.Documents.NormalizedSnapshotSpanCollection)">
            <summary>
            Returns all tags of type T from all providers that overlap or are contained by the specified snapshotSpans collection.
            </summary>
            <param name="spans">A collection of spans over which the aggregator looks for overlapping or contained tags from all providers.</param>
            <returns>ITagSpans for all tags from all providers that are contained by or overlap the spans.</returns>
        </member>
        <member name="E:Infragistics.Documents.Tagging.ITagAggregator`1.TagsChanged">
            <summary>
            Raised when tags of type T are added or removed from all providers.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Tagging.DocumentTagAggregator`1.OnTagsChanged(Infragistics.Documents.TagsChangedEventArgs)">
            <summary>
            Used to invoke the <see cref="E:Infragistics.Documents.Tagging.DocumentTagAggregator`1.TagsChanged"/> event.
            </summary>
            <param name="args">The argumants associated with the event.</param>
            <seealso cref="E:Infragistics.Documents.Tagging.DocumentTagAggregator`1.TagsChanged"/>
            <seealso cref="T:Infragistics.Documents.TagsChangedEventArgs"/>
        </member>
        <member name="M:Infragistics.Documents.Tagging.DocumentTagAggregator`1.GetTags(Infragistics.Documents.NormalizedSnapshotSpanCollection)">
            <summary>
            Returns all tags of type T from all providers that overlap or are contained by the specified snapshotSpans collection.
            </summary>
            <param name="spans">A collection of spans over which the aggregator looks for overlapping or contained tags from all providers.</param>
            <returns><see cref="T:Infragistics.Documents.Tagging.ITagSpan`1"/>s for all tags from all providers that are contained by or overlap the spans.</returns>
        </member>
        <member name="E:Infragistics.Documents.Tagging.DocumentTagAggregator`1.TagsChanged">
            <summary>
            Raised when tags of type T are added or removed from all providers.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Tagging.ISyntaxErrorTag">
            <summary>
            The interface for all tags that represent syntax errors generated by the <see cref="T:Infragistics.Documents.TextDocument"/> parser.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Tagging.ISyntaxErrorTag.SyntaxError">
            <summary>
            Returns the <see cref="P:Infragistics.Documents.Tagging.ISyntaxErrorTag.SyntaxError"/> associated with this <see cref="T:Infragistics.Documents.Tagging.ISyntaxErrorTag"/>.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Tagging.ITagSpan`1">
            <summary>
            The interface definition for all objects that associate an <see cref="T:Infragistics.Documents.Tagging.ITag"/> with a <see cref="T:Infragistics.Documents.SnapshotSpan"/>
            </summary>
            <typeparam name="T">The type of <see cref="T:Infragistics.Documents.Tagging.ITag"/> associated with the span.</typeparam>
            <seealso cref="T:Infragistics.Documents.Tagging.ITag"/>
            <seealso cref="T:Infragistics.Documents.SnapshotSpan"/>
        </member>
        <member name="P:Infragistics.Documents.Tagging.ITagSpan`1.Span">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.SnapshotSpan"/> associated with the <see cref="T:Infragistics.Documents.Tagging.ITag"/>.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Tagging.ITagSpan`1.Tag">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.Tagging.ITag"/> contained in the associated <see cref="T:Infragistics.Documents.SnapshotSpan"/>.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Tagging.ITokenTag">
            <summary>
            The interface for all tags that represent tagged <see cref="P:Infragistics.Documents.Tagging.ITokenTag.Token"/>s.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Tagging.ITokenTag.Token">
            <summary>
            Returns the <see cref="P:Infragistics.Documents.Tagging.ITokenTag.Token"/> associated with this <see cref="T:Infragistics.Documents.Tagging.ITokenTag"/>.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Tagging.SyntaxErrorTag">
            <summary>
            Basic implementation of <see cref="T:Infragistics.Documents.Tagging.ISyntaxErrorTag"/>.
            </summary>
            <seealso cref="P:Infragistics.Documents.Tagging.SyntaxErrorTag.SyntaxError"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ISyntaxErrorTag"/>
            <seealso cref="T:Infragistics.Documents.Tagging.SyntaxErrorTagger"/>
            <seealso cref="T:Infragistics.Documents.Tagging.SyntaxErrorTaggerProvider"/>
        </member>
        <member name="M:Infragistics.Documents.Tagging.SyntaxErrorTag.#ctor(Infragistics.SyntaxParsing.SyntaxError)">
            <summary>
            Constructor
            </summary>
            <param name="syntaxError">The <see cref="P:Infragistics.Documents.Tagging.SyntaxErrorTag.SyntaxError"/> associated with this <see cref="T:Infragistics.Documents.Tagging.SyntaxErrorTag"/></param>
        </member>
        <member name="P:Infragistics.Documents.Tagging.SyntaxErrorTag.SyntaxError">
            <summary>
            Returns the <see cref="P:Infragistics.Documents.Tagging.SyntaxErrorTag.SyntaxError"/> associated with this <see cref="T:Infragistics.Documents.Tagging.SyntaxErrorTag"/> (read only).
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Tagging.SyntaxErrorTagger">
            <summary>
            An <see cref="T:Infragistics.Documents.Tagging.ITagger`1"/> implementation that tags document text with <see cref="T:Infragistics.Documents.Tagging.ISyntaxErrorTag"/>s.
            </summary>
            <seealso cref="T:Infragistics.Documents.Tagging.TaggerBase`1"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITagger`1"/>
            <seealso cref="T:Infragistics.SyntaxParsing.SyntaxError"/>
            <seealso cref="T:Infragistics.Documents.Tagging.SyntaxErrorTag"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ISyntaxErrorTag"/>
        </member>
        <member name="M:Infragistics.Documents.Tagging.SyntaxErrorTagger.#ctor(Infragistics.Documents.TextDocument)">
            <summary>
            Constructor
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:Infragistics.Documents.Tagging.SyntaxErrorTagger.GetTags(Infragistics.Documents.NormalizedSnapshotSpanCollection)">
            <summary>
            Returns all the <see cref="T:Infragistics.Documents.Tagging.ISyntaxErrorTag"/>s that intersect the specified spans.
            </summary>
            <param name="spans">A collection of spans whose text is examined and tagged with <see cref="T:Infragistics.Documents.Tagging.ISyntaxErrorTag"/>s.</param>
            <returns><see cref="T:Infragistics.Documents.Tagging.ITagSpan`1"/>s for all <see cref="T:Infragistics.Documents.Tagging.ISyntaxErrorTag"/>s that are contained by or overlap the spans.</returns>
        </member>
        <member name="T:Infragistics.Documents.Tagging.SyntaxErrorTaggerProvider">
            <summary>
            Provides a SyntaxError tagger.
            </summary>
            <seealso cref="T:Infragistics.Documents.Tagging.ISyntaxErrorTag"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITagger`1"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITaggerProvider"/>
            <seealso cref="T:Infragistics.SyntaxParsing.SyntaxError"/>
            <seealso cref="T:Infragistics.Documents.Tagging.SyntaxErrorTagger"/>
        </member>
        <member name="M:Infragistics.Documents.Tagging.SyntaxErrorTaggerProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Tagging.SyntaxErrorTaggerProvider.CreateTagger``1(Infragistics.Documents.TextDocument)">
            <summary>
            Returns a Tagger that can tag the specified document with <see cref="T:Infragistics.Documents.Tagging.ISyntaxErrorTag"/>s.
            </summary>
            <param name="document">The document that contains the text to be tagged.</param>
            <returns>A Tagger that can tag the specified document with <see cref="T:Infragistics.Documents.Tagging.ISyntaxErrorTag"/>s.</returns>
            <seealso cref="T:Infragistics.Documents.Tagging.ITag"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITagger`1"/>
        </member>
        <member name="P:Infragistics.Documents.Tagging.SyntaxErrorTaggerProvider.SupportedTagType">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.Tagging.ITag"/> derived type supported by the taggers created by this tagger provider.
            </summary>
            <seealso cref="T:Infragistics.Documents.Tagging.ITag"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITagger`1"/>
        </member>
        <member name="T:Infragistics.Documents.Tagging.TagSpan`1">
            <summary>
            Basic implementation of ITagSpan.
            </summary>
            <typeparam name="T">The <see cref="T:Infragistics.Documents.Tagging.ITag"/> derived type associated with the <see cref="T:Infragistics.Documents.Tagging.TagSpan`1"/></typeparam>
        </member>
        <member name="M:Infragistics.Documents.Tagging.TagSpan`1.#ctor(Infragistics.Documents.SnapshotSpan,`0)">
            <summary>
            Constructor
            </summary>
            <param name="span">The <see cref="T:Infragistics.Documents.SnapshotSpan"/> associated with this <see cref="T:Infragistics.Documents.Tagging.TagSpan`1"/></param>
            <param name="tag">The <see cref="T:Infragistics.Documents.Tagging.ITag"/> derived type associated with this <see cref="T:Infragistics.Documents.Tagging.TagSpan`1"/></param>
        </member>
        <member name="P:Infragistics.Documents.Tagging.TagSpan`1.Span">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.SnapshotSpan"/> associated with this <see cref="T:Infragistics.Documents.Tagging.TagSpan`1"/>.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Tagging.TagSpan`1.Tag">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.Tagging.ITag"/> associated with this <see cref="T:Infragistics.Documents.Tagging.TagSpan`1"/>.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Tagging.TokenTag">
            <summary>
            Basic implementation of <see cref="T:Infragistics.Documents.Tagging.ITokenTag"/>.
            </summary>
            <seealso cref="P:Infragistics.Documents.Tagging.TokenTag.Token"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITokenTag"/>
            <seealso cref="T:Infragistics.Documents.Tagging.TokenTagger"/>
            <seealso cref="T:Infragistics.Documents.Tagging.TokenTaggerProvider"/>
        </member>
        <member name="M:Infragistics.Documents.Tagging.TokenTag.#ctor(Infragistics.SyntaxParsing.Token)">
            <summary>
            Constructor
            </summary>
            <param name="token">The <see cref="P:Infragistics.Documents.Tagging.TokenTag.Token"/> associated with this <see cref="T:Infragistics.Documents.Tagging.TokenTag"/></param>
        </member>
        <member name="P:Infragistics.Documents.Tagging.TokenTag.Token">
            <summary>
            Returns the <see cref="P:Infragistics.Documents.Tagging.TokenTag.Token"/> associated with this <see cref="T:Infragistics.Documents.Tagging.TokenTag"/>.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Tagging.TokenTagger">
            <summary>
            An <see cref="T:Infragistics.Documents.Tagging.ITagger`1"/> implementation that tags document text with <see cref="T:Infragistics.Documents.Tagging.ITokenTag"/>s.
            </summary>
            <seealso cref="T:Infragistics.Documents.Tagging.ITagger`1"/>
            <seealso cref="T:Infragistics.Documents.Tagging.TaggerBase`1"/>
            <seealso cref="T:Infragistics.SyntaxParsing.Token"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITokenTag"/>
            <seealso cref="T:Infragistics.Documents.Tagging.TokenTag"/>
        </member>
        <member name="M:Infragistics.Documents.Tagging.TokenTagger.#ctor(Infragistics.Documents.TextDocument)">
            <summary>
            Constructor
            </summary>
            <param name="document">The <see cref="T:Infragistics.Documents.TextDocument"/> containing the text to be tagged.</param>
        </member>
        <member name="M:Infragistics.Documents.Tagging.TokenTagger.GetTags(Infragistics.Documents.NormalizedSnapshotSpanCollection)">
            <summary>
            Returns all the <see cref="T:Infragistics.Documents.Tagging.ITokenTag"/>s that intersect the specified spans.
            </summary>
            <param name="spans">A collection of spans whose text is examined and tagged with <see cref="T:Infragistics.Documents.Tagging.ITokenTag"/>s.</param>
            <returns><see cref="T:Infragistics.Documents.Tagging.ITagSpan`1"/>s for all <see cref="T:Infragistics.Documents.Tagging.ITokenTag"/>s that are contained by or overlap the spans.</returns>
        </member>
        <member name="T:Infragistics.Documents.Tagging.TokenTaggerProvider">
            <summary>
            Provides a token tagger.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Tagging.TokenTaggerProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Tagging.TokenTaggerProvider.CreateTagger``1(Infragistics.Documents.TextDocument)">
            <summary>
            Returns a Tagger that can tag the specified document with <see cref="T:Infragistics.Documents.Tagging.ITokenTag"/>s.
            </summary>
            <param name="document">The document that contains the text to be tagged.</param>
            <returns>A Tagger that can tag the specified document with <see cref="T:Infragistics.Documents.Tagging.ITokenTag"/>s.</returns>
        </member>
        <member name="P:Infragistics.Documents.Tagging.TokenTaggerProvider.SupportedTagType">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.Tagging.ITag"/> derived type supported by the taggers created by this tagger provider.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.TextChange">
            <summary>
            Describes a single contiguous text change operation on a
            <see cref="T:Infragistics.Documents.TextDocument">TextDocument</see>.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.TextChange.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextChange.LengthDelta">
            <summary>
            Returns the difference in the length between the
            <see cref="T:Infragistics.Documents.TextDocumentSnapshot">TextDocumentSnapshot</see>
            which was the current snapshot immediately before this change and the new snapshot.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextChange.LineCountDelta">
            <summary>
            Returns the difference in the number of lines in the snapshot
            resulting from this change.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextChange.NewLength">
            <summary>
            Returns the length of the document after the change was applied.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextChange.NewText">
            <summary>
            Returns the text that replaced the
            <see cref="P:Infragistics.Documents.TextChange.OldText">OldText</see>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextChange.NewSpan">
            <summary>
            Returns the span of the text change in the snapshot
            immediately after the change.
            </summary>
            <remarks>
            <p class="body">
            This span is empty for a pure deletion. Its start position differs from that of the
            <see cref="P:Infragistics.Documents.TextChange.OldSpan">NewSpan</see>
            only when there is more than one TextChange included in moving from one
            snapshot to the next.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Documents.TextChange.OldLength">
            <summary>
            Returns the length of the document before the change was applied.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextChange.OldText">
            <summary>
            Returns the text that was replaced.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextChange.OldSpan">
            <summary>
            Returns the span of the text change in the snapshot
            immediately before the change.
            </summary>
            <remarks>
            <p class="body">
            This span is empty for a pure insertion. Its start position differs from that of the
            <see cref="P:Infragistics.Documents.TextChange.NewSpan">NewSpan</see>
            only when there is more than one TextChange included in moving from one
            snapshot to the next.
            </p>
            </remarks>
        </member>
        <member name="T:Infragistics.Documents.TextDocumentSnapshot">
            <summary>
            Represents the entire state (i.e. version) of a <see cref="T:Infragistics.Documents.TextDocument"/>.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> Every time a change is made to the document a new snapshot is created. Each snapshot is thread-safe and immutable.</para>
            </remarks>
            <seealso cref="T:Infragistics.Documents.TextDocument"/>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.CreateScanner">
            <summary>
            Creates a new instance of a <see cref="T:Infragistics.Documents.TextDocumentSnapshotScanner"/>
            </summary>
            <returns>The new instance of the scanner for this snapshot.</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.Find(Infragistics.Documents.TextSearchCriteria,System.Int32,System.Boolean,System.Nullable{Infragistics.SyntaxParsing.TextSpan})">
            <summary>
            Finds an instance of text in the span that matches the search criteria.
            </summary>
            <param name="criteria">The search criteria</param>
            <param name="startOffset">The start offset relative to the beginning of the document.</param>
            <param name="wrapIfNotFound">if true continue the search by wrapping if the end is reached without a match.</param>
            <param name="spanToSearch">An optional span to limit the search to.</param>
            <returns>A <see cref="T:Infragistics.Documents.TextSearchResultInfo">TextSearchResultInfo</see> object containing the results of the operation.</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.FindAll(Infragistics.Documents.TextSearchCriteria,System.Nullable{Infragistics.SyntaxParsing.TextSpan})">
            <summary>
            Finds all instances of text in the text span that matches the search criteria.
            </summary>
            <param name="criteria">The search criteria</param>
            <param name="spanToSearch">On optional span to limit the search to.</param>
            <returns>A <see cref="T:Infragistics.Documents.TextSearchResultInfo">TextSearchResultInfo</see> object containing the results of the operation.</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.GetLines(System.Int32,System.Boolean)">
            <summary>
            Returns a object that can enumerate <see cref="T:Infragistics.Documents.SnapshotLineInfo"/>s.
            </summary>
            <param name="startLineIndex">The zero-based line offset.</param>
            <param name="enumerateBackwards">True to enumerate backwards from the startLineIndex.</param>
            <returns>A forward or backward enumerator</returns>
            <remarks>
            <para class="note"><b>Note:</b> even though the snapshot is thread-safe, the enumerator is not. Therefore this method should be called on the same thread that is using it (i.e. each thread accessing an enumerator should create its own). Trying to access the properties and methods of an enumerator created on another thread will raise an InvalidOperationException.</para>
            </remarks>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.GetText">
            <summary>
            Returns the string representation of this snapshot.
            </summary>
            <returns>The string representation of this snapshot.</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.GetText(System.Int32)">
            <summary>
            Returns the specified substring.
            </summary>
            <param name="start">The zero-based position of the first character in the string to be returned.</param>
            <returns>The specified substring.</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.GetText(System.Int32,System.Int32)">
            <summary>
            Returns the specified substring.
            </summary>
            <param name="start">The zero-based position of the first character in the string to be returned.</param>
            <param name="length">The length of the string to be returned.</param>
            <returns>The specified substring.</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.GetText(Infragistics.SyntaxParsing.TextSpan)">
            <summary>
            Returns the specified substring.
            </summary>
            <param name="span">The span of the text.</param>
            <returns>The specified substring.</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.GetTokens(Infragistics.SyntaxParsing.TextSpan,System.Func{Infragistics.SyntaxParsing.Token,System.Boolean},System.Boolean)">
            <summary>
            Returns a object that can enumerate <see cref="T:Infragistics.SyntaxParsing.Token"/>s.
            </summary>
            <param name="span">The span of text to restrict the token enumeration.</param>
            <param name="filter">A function that can dcide which tokens get returned from the enumerator.</param>
            <param name="enumerateBackwards">True to enumerate backwards from the end of the span to the beginning of the span.</param>
            <returns>A forward or backward enumerator of Tokens</returns>
            <remarks>
            <para class="note"><b>Note:</b> even though the snapshot is thread-safe, the enumerator is not. Therefore this method should be called on the same thread that is using it (i.e. each thread accessing an enumerator should create its own). Trying to access the properties and methods of an enumerator created on another thread will raise an InvalidOperationException.</para>
            </remarks>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.GetTokens(Infragistics.Documents.SnapshotSpan,System.Func{Infragistics.SyntaxParsing.Token,System.Boolean},System.Boolean)">
            <summary>
            Returns a object that can enumerate <see cref="T:Infragistics.SyntaxParsing.Token"/>s.
            </summary>
            <param name="span">The span of text to restrict the token enumeration.</param>
            <param name="filter">A function that can dcide which tokens get returned from the enumerator.</param>
            <param name="enumerateBackwards">True to enumerate backwards from the end of the span to the beginning of the span.</param>
            <returns>A forward or backward enumerator of Tokens</returns>
            <remarks>
            <para class="note"><b>Note:</b> even though the snapshot is thread-safe, the enumerator is not. Therefore this method should be called on the same thread that is using it (i.e. each thread accessing an enumerator should create its own). Trying to access the properties and methods of an enumerator created on another thread will raise an InvalidOperationException.</para>
            </remarks>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.GetTokens(System.Int32,System.Func{Infragistics.SyntaxParsing.Token,System.Boolean},System.Boolean)">
            <summary>
            Returns a object that can enumerate <see cref="T:Infragistics.SyntaxParsing.Token"/>s.
            </summary>
            <param name="startOffset">The offset at which to start the token enumeration.</param>
            <param name="filter">A function that can dcide which tokens get returned from the enumerator.</param>
            <param name="enumerateBackwards">True to enumerate backwards from the end of the span to the beginning of the span.</param>
            <returns>A forward or backward enumerator of Tokens</returns>
            <remarks>
            <para class="note"><b>Note:</b> even though the snapshot is thread-safe, the enumerator is not. Therefore this method should be called on the same thread that is using it (i.e. each thread accessing an enumerator should create its own). Trying to access the properties and methods of an enumerator created on another thread will raise an InvalidOperationException.</para>
            </remarks>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.IsCompatibleWith(Infragistics.Documents.TextDocumentSnapshot)">
            <summary>
            Determines if 2 snapshots are compatible (i.e. have the same root buffer)
            </summary>
            <param name="other">The snapshot to compare.</param>
            <remarks>
            <para class="note"><b>Note:</b> if snapshots are not compatible then <see cref="T:Infragistics.Documents.SnapshotPoint">SnapshotPoints</see> and <see cref="T:Infragistics.Documents.SnapshotSpan">SnapshotSpans</see> can not be translated between them. 
            Calling either <see cref="M:Infragistics.Documents.SnapshotPoint.TranslateTo(Infragistics.Documents.TextDocumentSnapshot,Infragistics.Documents.PointTrackingMode)">SnapshotPoint.TranslateTo</see> or <see cref="M:Infragistics.Documents.SnapshotSpan.TranslateTo(Infragistics.Documents.TextDocumentSnapshot,Infragistics.Documents.SpanTrackingMode)">SnapshotSpan.TranslateTo</see> with an incompatible snapshot will raise an exception.</para>
            </remarks>
            <returns>true if both snapshots have the same root buffer, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.LineFromIndex(System.Int32)">
            <summary>
            Returns the corresponding <see cref="T:Infragistics.Documents.SnapshotLineInfo"/> from a zero-based index.
            </summary>
            <param name="index">The zero-based index of the line..</param>
            <returns>The corresponding <see cref="T:Infragistics.Documents.SnapshotLineInfo"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If index is less than zero or greater than or equal to the <see cref="P:Infragistics.Documents.TextDocumentSnapshot.LineCount"/>.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.LineFromOffset(System.Int32)">
            <summary>
            Returns the corresponding <see cref="T:Infragistics.Documents.SnapshotLineInfo"/> from a zero-based offset value.
            </summary>
            <param name="offset">The zero-based offset relative to the beginning of the document for this snapshot.</param>
            <returns>The corresponding <see cref="T:Infragistics.Documents.SnapshotLineInfo"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If offset is less than zero or greater than the document's overall length - 1.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.LineIndexFromOffset(System.Int32)">
            <summary>
            Returns the corresponding zero-based line index from a zero-based offset value.
            </summary>
            <param name="offset">The zero-based offset relative to the beginning of the document for this snapshot.</param>
            <returns>The corresponding zero based line index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If offset is less than zero or greater than the document's overall length.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.LocationFromOffset(System.Int32)">
            <summary>
            Returns the corresponding line and character location from a zero-based offset value.
            </summary>
            <param name="offset">The zero-based offset relative to the beginning of the document for this snapshot.</param>
            <returns>The corresponding TextLocation struct.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If offset is less than zero or greater than the document's overall length - 1.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.OffsetFromLocation(Infragistics.SyntaxParsing.TextLocation)">
            <summary>
            Returns the corresponding overall zero-based offset from a line and character location.
            </summary>
            <param name="location">The zero-based line and character numbers for a character location in this snapshot.</param>
            <returns>The corresponding overall zero-based offset from the beginning of the document..</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If resulting offset is less than zero or greater than the document's overall length - 1.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.TokenFromOffset(System.Int32)">
            <summary>
            Returns the corresponding <see cref="T:Infragistics.SyntaxParsing.Token"/> from a zero-based offset value.
            </summary>
            <param name="offset">The zero-based offset relative to the beginning of the document for this token.</param>
            <returns>The corresponding <see cref="T:Infragistics.SyntaxParsing.Token"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If offset is less than zero or greater than the document's overall length.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.WordFromOffset(System.Int32)">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.Word"/> from a zero-based offset value.
            </summary>
            <param name="offset">The zero-based offset relative to the beginning of the document for this snapshot.</param>
            <returns>The corresponding <see cref="T:Infragistics.Documents.Word"/> or null if the offset is not within a word.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If offset is less than zero or greater than the document's overall length - 1.</exception>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentSnapshot.Document">
            <summary>
            Returns the associated <see cref="T:Infragistics.Documents.TextDocument"/> (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentSnapshot.Item(System.Int32)">
            <summary>
            Returns the character at the specified position(read-only).
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentSnapshot.Length">
            <summary>
            Returns the length of the snapshot in characters (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentSnapshot.LineCount">
            <summary>
            Returns the number of <see cref="T:Infragistics.Documents.SnapshotLineInfo">lines</see>  in the shapshot (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentSnapshot.TokenCount">
            <summary>
            Returns the number of <see cref="T:Infragistics.SyntaxParsing.Token">Tokens</see> in the shapshot (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentSnapshot.Version">
            <summary>
            Returns the version of the document that this snapshot represents (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Documents.TextDocumentSnapshotScanner">
            <summary>
            Exposes methods for scanning through a <see cref="T:Infragistics.Documents.TextDocumentSnapshot">snapshot</see> of a <see cref="T:Infragistics.Documents.TextDocument"/> 
            </summary>
            <remarks>
            <para class="body">This class targets a specific instance of a <see cref="T:Infragistics.Documents.TextDocumentSnapshot">snapshot</see> and is created via the snapshot’s <see cref="M:Infragistics.Documents.TextDocumentSnapshot.CreateScanner">CreateScanner</see> method. It is used for efficiently scanning thru the snapshot’s lines, tokens and words.</para>
            <para class="body">The <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/> property is used to scan thru the snapshot. It can either be set explicitly (it defaults to zero) or via the <see cref="M:Infragistics.Documents.TextDocumentSnapshotScanner.SeekToStart"/>, <see cref="M:Infragistics.Documents.TextDocumentSnapshotScanner.SeekToEnd"/>, <see cref="M:Infragistics.Documents.TextDocumentSnapshotScanner.SeekToLine(Infragistics.Documents.LineScanType)"/>, <see cref="M:Infragistics.Documents.TextDocumentSnapshotScanner.SeekToToken(Infragistics.Documents.TokenScanType,System.Func{Infragistics.SyntaxParsing.Token,System.Boolean})"/> or <see cref="M:Infragistics.Documents.TextDocumentSnapshotScanner.SeekToWord(Infragistics.Documents.WordScanType)"/> methods. Once set, the <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentLine"/>, <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentToken"/>, <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentWord"/> and <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentCharacter"/> read-only properties can be used to query what is at the CurrentOffset. In addition, there are 'Peek' next/previous token and word methods to look ahead or behind without changing the CurrentOffset.</para>
            <para clas="note"><b>Note:</b> even though the <see cref="T:Infragistics.Documents.TextDocumentSnapshot">snapshot</see> that it targets is thread-safe, the scanner is not. Therefore it should be created on the same thread that it is used on (i.e. each thread accessing a scanner should create its own). Trying to access the properties and methods of a scanner created on another thread will raise an InvalidOperationException.</para>
            </remarks>
            <seealso cref="T:Infragistics.Documents.TextDocument"/>
            <seealso cref="T:Infragistics.Documents.TextDocumentSnapshot"/>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshotScanner.PeekNextToken(System.Func{Infragistics.SyntaxParsing.Token,System.Boolean})">
            <summary>
            Peeks ahead and returns the next token without changing the <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/>.
            </summary>
            <param name="filter">An optional filter function to bypass certain tokens.</param>
            <returns>The next token if successful, otherwise null</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshotScanner.PeekNextWord">
            <summary>
            Peeks ahead and returns the next word without changing the <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/>.
            </summary>
            <returns>The next word if successful, otherwise null</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshotScanner.PeekPreviousToken(System.Func{Infragistics.SyntaxParsing.Token,System.Boolean})">
            <summary>
            Peeks backward and returns the previous token without changing the <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/>.
            </summary>
            <param name="filter">An optional filter function to bypass certain tokens.</param>
            <returns>The previou token if successful, otherwise null</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshotScanner.PeekPreviousWord">
            <summary>
            Peeks backward and returns the previous word without changing the <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/>.
            </summary>
            <returns>The previou word if successful, otherwise null</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshotScanner.SeekToEnd">
            <summary>
            Sets the <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/> to the length minus one.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshotScanner.SeekToLine(System.Int32)">
            <summary>
            Sets the <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/> to the beginning of a line.
            </summary>
            <param name="lineIndex">The zero-based index of the line.</param>
            <returns>True if successful, otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshotScanner.SeekToLine(Infragistics.Documents.LineScanType)">
            <summary>
            Sets the <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/> to the beginning or end of a line.
            </summary>
            <param name="scanType">The relative line position.</param>
            <returns>True if successful, otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshotScanner.SeekToStart">
            <summary>
            Sets the <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/> to the zero.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshotScanner.SeekToToken(Infragistics.Documents.TokenScanType,System.Func{Infragistics.SyntaxParsing.Token,System.Boolean})">
            <summary>
            Sets the <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/> to the beginning or end of a <see cref="T:Infragistics.SyntaxParsing.Token">Token</see>.
            </summary>
            <param name="scanType">The relative token position.</param>
            <param name="filter">An optional filter function to bypass certain tokens.</param>
            <returns>True if successful, otherwise false</returns>
            <exception cref="T:System.InvalidOperationException">if a filter is suppled and scanType is either 'CurrentTokenStart' or 'CurrentTokenEnd'.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshotScanner.SeekToWord(Infragistics.Documents.WordScanType)">
            <summary>
            Sets the <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/> to the beginning or end of a <see cref="T:Infragistics.Documents.Word">Word</see> within a <see cref="T:Infragistics.SyntaxParsing.Token">Token</see>.
            </summary>
            <param name="scanType">The relative word position.</param>
            <returns>True if successful, otherwise false</returns>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentCharacter">
            <summary>
            Returns the character at the <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/> (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentLine">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.SnapshotLineInfo">Line</see> containing the <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/> (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset">
            <summary>
            Returns/sets the zero-based character offset.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentToken">
            <summary>
            Returns the <see cref="T:Infragistics.SyntaxParsing.Token">Token</see> at the <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/> (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentWord">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.Word">Word</see> at the <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/> (read-only).
            </summary>
            <value>The word at the current offset or null if <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/> is not within a word.</value>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentSnapshotScanner.Snapshot">
            <summary>
            Returns the snapshot that this scanner was created for (read-only)
            </summary>
            <seealso cref="M:Infragistics.Documents.TextDocumentSnapshot.CreateScanner"/>
        </member>
        <member name="T:Infragistics.Documents.TextDocumentVersion">
            <summary>
            An object that identifies a specific version of a <see cref="T:Infragistics.Documents.TextDocument"/> including a list of the changes that were made to create the next version.
            </summary>
            <seealso cref="P:Infragistics.Documents.TextDocumentSnapshot.Version"/>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentVersion.Changes">
            <summary>
            Returns a read-only collection of the <see cref="T:Infragistics.Documents.TextChange">changes</see> that were applied to get to the next version.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> for the <see cref="P:Infragistics.Documents.TextDocument.CurrentSnapshot"/> this property will return null.</para>
            </remarks>
            <seealso cref="P:Infragistics.Documents.TextDocumentVersion.ChangeSource"/>
            <seealso cref="T:Infragistics.Documents.TextChange"/>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentVersion.ChangeSource">
            <summary>
            Returns the source of the changes that were applied to get to the next version (read-only).
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> for the <see cref="P:Infragistics.Documents.TextDocument.CurrentSnapshot"/> this property will return null.</para>
            </remarks>
            <seealso cref="P:Infragistics.Documents.TextDocumentVersion.Changes"/>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentVersion.Length">
            <summary>
            Returns the overall length of this version of the document (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentVersion.NextVersion">
            <summary>
            Returns the next version of this document (read-only)
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> for the <see cref="P:Infragistics.Documents.TextDocument.CurrentSnapshot"/> this property will return null.</para>
            </remarks>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentVersion.VersionNumber">
            <summary>
            Returns the version number for this version (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Documents.TextSearchCriteria">
            <summary>
            Defines the criteria to use when performing a find operation on text within a <see cref="T:Infragistics.Documents.TextDocument"/>
            </summary>
            <seealso cref="M:Infragistics.Documents.TextDocument.FindReplace(System.String,Infragistics.Documents.TextSearchCriteria,System.Int32,System.Boolean)">FindReplace</seealso>
            <seealso cref="M:Infragistics.Documents.TextDocument.FindReplaceAll(Infragistics.Documents.TextSearchCriteria,System.String,System.Nullable{Infragistics.SyntaxParsing.TextSpan})"/>
            <seealso cref="M:Infragistics.Documents.TextDocumentSnapshot.Find(Infragistics.Documents.TextSearchCriteria,System.Int32,System.Boolean,System.Nullable{Infragistics.SyntaxParsing.TextSpan})"/>
            <seealso cref="M:Infragistics.Documents.TextDocumentSnapshot.FindAll(Infragistics.Documents.TextSearchCriteria,System.Nullable{Infragistics.SyntaxParsing.TextSpan})"/>
        </member>
        <member name="M:Infragistics.Documents.TextSearchCriteria.#ctor(System.Boolean,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Documents.TextSearchCriteria"/>
            </summary>
            <param name="wholeWordOnly">If true bypass partial word matches.</param>
            <param name="regexPattern">The regular expression pattern to use.</param>
            <param name="regexOptions">the regular expression options to use..</param>
        </member>
        <member name="M:Infragistics.Documents.TextSearchCriteria.#ctor(System.Boolean,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Documents.TextSearchCriteria"/>
            </summary>
            <param name="wholeWordOnly">If true bypass partial word matches.</param>
            <param name="regexPattern">The regular expression pattern to use.</param>
            <param name="isCaseSensitive">If true will match only if the case matches.</param>
            <param name="searchBackwards">If true will serach up in the document.</param>
        </member>
        <member name="M:Infragistics.Documents.TextSearchCriteria.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Documents.TextSearchCriteria"/>
            </summary>
            <param name="textToFind">The text to search for.</param>
            <param name="wholeWordOnly">If true bypass partial word matches.</param>
            <param name="isCaseSensitive">If true will match only if the case matches.</param>
            <param name="searchBackwards">If true will serach up in the document.</param>
        </member>
        <member name="P:Infragistics.Documents.TextSearchCriteria.IsCaseSensitive">
            <summary>
            Returns whether the find operation is case sensitive (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextSearchCriteria.RegexOptions">
            <summary>
            Returns the regex options to use for the search (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextSearchCriteria.RegexPattern">
            <summary>
            Returns the regex pattern to use for the search (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextSearchCriteria.SearchBackwards">
            <summary>
            Returns the search direction (.i.e. whether the search should look forwards or backwards in the text) (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextSearchCriteria.TextToFind">
            <summary>
            Returns the text to search for (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextSearchCriteria.WholeWordOnly">
            <summary>
            Returns whether to ignore partial matches within words (read-only).
            </summary>
        </member>
        <member name="T:Infragistics.Documents.TextSearchResult">
            <summary>
            Represents a single match in a find or replace operation on text within a <see cref="T:Infragistics.Documents.TextDocument"/>
            </summary>
            <seealso cref="M:Infragistics.Documents.TextDocument.FindReplace(System.String,Infragistics.Documents.TextSearchCriteria,System.Int32,System.Boolean)">FindReplace</seealso>
            <seealso cref="M:Infragistics.Documents.TextDocument.FindReplaceAll(Infragistics.Documents.TextSearchCriteria,System.String,System.Nullable{Infragistics.SyntaxParsing.TextSpan})"/>
            <seealso cref="M:Infragistics.Documents.TextDocumentSnapshot.Find(Infragistics.Documents.TextSearchCriteria,System.Int32,System.Boolean,System.Nullable{Infragistics.SyntaxParsing.TextSpan})"/>
            <seealso cref="M:Infragistics.Documents.TextDocumentSnapshot.FindAll(Infragistics.Documents.TextSearchCriteria,System.Nullable{Infragistics.SyntaxParsing.TextSpan})"/>
        </member>
        <member name="M:Infragistics.Documents.TextSearchResult.Equals(System.Object)">
            <summary>
            Compares the specified object to this object to see if they are equivalent.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.TextSearchResult.GetHashCode">
            <summary>
            Returns the hash code of the object.
            </summary>
            <returns>A hash code for this instance</returns>
        </member>
        <member name="M:Infragistics.Documents.TextSearchResult.op_Equality(Infragistics.Documents.TextSearchResult,Infragistics.Documents.TextSearchResult)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Documents.TextSearchResult"/> structures for equality
            </summary>
            <param name="result1">The first structure</param>
            <param name="result2">The other structure</param>
            <returns>true if the two instances are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.TextSearchResult.op_Inequality(Infragistics.Documents.TextSearchResult,Infragistics.Documents.TextSearchResult)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Documents.TextSearchResult"/> structures for inequality
            </summary>
            <param name="result1">The first structure</param>
            <param name="result2">The other structure</param>
            <returns>true if the two instances are not equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.TextSearchResult.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>A string that represents this <see cref="T:Infragistics.Documents.TextSearchResult"/></returns>
        </member>
        <member name="P:Infragistics.Documents.TextSearchResult.SpanFound">
            <summary>
            Returns the span of the text that was found (read-only)
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> in the case of a replace operation, the snapshot of <b>SpanFound</b> will reference the snapshot before the change was applied while the snapshot of <b>SpanReplaced</b> will reference the snapshot after the change was applied.</para>
            </remarks>
            <seealso cref="P:Infragistics.Documents.TextSearchResult.SpanReplaced"/>
            <seealso cref="P:Infragistics.Documents.TextSearchResultInfo.Results"/>
            <seealso cref="M:Infragistics.Documents.TextDocument.FindReplace(System.String,Infragistics.Documents.TextSearchCriteria,System.Int32,System.Boolean)"/>
            <seealso cref="M:Infragistics.Documents.TextDocument.FindReplaceAll(Infragistics.Documents.TextSearchCriteria,System.String,System.Nullable{Infragistics.SyntaxParsing.TextSpan})"/>
            <seealso cref="M:Infragistics.Documents.TextDocumentSnapshot.Find(Infragistics.Documents.TextSearchCriteria,System.Int32,System.Boolean,System.Nullable{Infragistics.SyntaxParsing.TextSpan})"/>
            <seealso cref="M:Infragistics.Documents.TextDocumentSnapshot.FindAll(Infragistics.Documents.TextSearchCriteria,System.Nullable{Infragistics.SyntaxParsing.TextSpan})"/>
        </member>
        <member name="P:Infragistics.Documents.TextSearchResult.SpanReplaced">
            <summary>
            Returns the span of the text that was replaced or null if no text was replaced (read-only)
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> in the case of a replace operation, the snapshot of <b>SpanFound</b> will reference the snapshot before the change was applied while the snapshot of <b>SpanReplaced</b> will reference the snapshot after the change was applied.</para>
            </remarks>
            <seealso cref="P:Infragistics.Documents.TextSearchResult.SpanFound"/>
            <seealso cref="P:Infragistics.Documents.TextSearchResultInfo.Results"/>
            <seealso cref="M:Infragistics.Documents.TextDocument.FindReplace(System.String,Infragistics.Documents.TextSearchCriteria,System.Int32,System.Boolean)"/>
            <seealso cref="M:Infragistics.Documents.TextDocument.FindReplaceAll(Infragistics.Documents.TextSearchCriteria,System.String,System.Nullable{Infragistics.SyntaxParsing.TextSpan})"/>
            <seealso cref="M:Infragistics.Documents.TextDocumentSnapshot.Find(Infragistics.Documents.TextSearchCriteria,System.Int32,System.Boolean,System.Nullable{Infragistics.SyntaxParsing.TextSpan})"/>
            <seealso cref="M:Infragistics.Documents.TextDocumentSnapshot.FindAll(Infragistics.Documents.TextSearchCriteria,System.Nullable{Infragistics.SyntaxParsing.TextSpan})"/>
        </member>
        <member name="T:Infragistics.Documents.TextSearchResultInfo">
            <summary>
            Represents the results of a find or replace operation on text within a <see cref="T:Infragistics.Documents.TextDocument"/>
            </summary>
            <seealso cref="M:Infragistics.Documents.TextDocument.FindReplace(System.String,Infragistics.Documents.TextSearchCriteria,System.Int32,System.Boolean)">FindReplace</seealso>
            <seealso cref="M:Infragistics.Documents.TextDocument.FindReplaceAll(Infragistics.Documents.TextSearchCriteria,System.String,System.Nullable{Infragistics.SyntaxParsing.TextSpan})"/>
            <seealso cref="M:Infragistics.Documents.TextDocumentSnapshot.Find(Infragistics.Documents.TextSearchCriteria,System.Int32,System.Boolean,System.Nullable{Infragistics.SyntaxParsing.TextSpan})"/>
            <seealso cref="M:Infragistics.Documents.TextDocumentSnapshot.FindAll(Infragistics.Documents.TextSearchCriteria,System.Nullable{Infragistics.SyntaxParsing.TextSpan})"/>
        </member>
        <member name="P:Infragistics.Documents.TextSearchResultInfo.Criteria">
            <summary>
            Returns the criteria use for the search operation (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextSearchResultInfo.Results">
            <summary>
            Returns a read-only collection of the TextSearchResult instances.
            </summary>
            <seealso cref="T:Infragistics.Documents.TextSearchResult"/>
        </member>
        <member name="T:Infragistics.Documents.IndentOutdentUndoUnit">
            <summary>
            Class for an undo/redo of an indent or outdent operation on a TextDocument.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.IndentOutdentUndoUnit.Execute(Infragistics.Undo.UndoExecuteContext)">
            <summary>
            Used to perform the associated action.
            </summary>
            <param name="executeInfo">Provides information about the undo/redo operation being executed.</param>
            <returns>Returns true if some action was taken. Otherwise false is returned. In either case the object was removed from the undo stack.</returns>
        </member>
        <member name="M:Infragistics.Documents.IndentOutdentUndoUnit.GetDescription(Infragistics.Undo.UndoHistoryItemType,System.Boolean)">
            <summary>
            Returns a string representation of the action based on whether this is for an undo or redo operation.
            </summary>
            <param name="itemType">The type of history for which the description is being requested.</param>
            <param name="detailed">A boolean indicating if a detailed description should be returned. For example, when false one may return "Typing" but for verbose one may return "Typing 'qwerty'".</param>
        </member>
        <member name="M:Infragistics.Documents.IndentOutdentUndoUnit.Merge(Infragistics.Undo.UndoMergeContext)">
            <summary>
            Used to allow multiple consecutive undo units to be merged into a single operation.
            </summary>
            <param name="mergeInfo">Provides information about the unit to evaluate for a merge operation</param>
            <returns>Returns an enumeration used to provide identify how the unit was merged.</returns>
        </member>
        <member name="P:Infragistics.Documents.IndentOutdentUndoUnit.Target">
            <summary>
            Returns the target object that will be affected by the <see cref="T:Infragistics.Undo.UndoUnit"/>
            </summary>
        </member>
        <member name="T:Infragistics.Documents.ReplaceAllUndoUnit">
            <summary>
            Class for an undo/redo replace all operation on a TextDocument.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.ReplaceAllUndoUnit.Execute(Infragistics.Undo.UndoExecuteContext)">
            <summary>
            Used to perform the associated action.
            </summary>
            <param name="executeInfo">Provides information about the undo/redo operation being executed.</param>
            <returns>Returns true if some action was taken. Otherwise false is returned. In either case the object was removed from the undo stack.</returns>
        </member>
        <member name="M:Infragistics.Documents.ReplaceAllUndoUnit.GetDescription(Infragistics.Undo.UndoHistoryItemType,System.Boolean)">
            <summary>
            Returns a string representation of the action based on whether this is for an undo or redo operation.
            </summary>
            <param name="itemType">The type of history for which the description is being requested.</param>
            <param name="detailed">A boolean indicating if a detailed description should be returned. For example, when false one may return "Typing" but for verbose one may return "Typing 'qwerty'".</param>
        </member>
        <member name="M:Infragistics.Documents.ReplaceAllUndoUnit.Merge(Infragistics.Undo.UndoMergeContext)">
            <summary>
            Used to allow multiple consecutive undo units to be merged into a single operation.
            </summary>
            <param name="mergeInfo">Provides information about the unit to evaluate for a merge operation</param>
            <returns>Returns an enumeration used to provide identify how the unit was merged.</returns>
        </member>
        <member name="P:Infragistics.Documents.ReplaceAllUndoUnit.Target">
            <summary>
            Returns the target object that will be affected by the <see cref="T:Infragistics.Undo.UndoUnit"/>
            </summary>
        </member>
        <member name="M:Infragistics.Documents.ReplaceAllUndoUnit.TextFound.GetHashCode">
            <summary>
            Returns the hash code of the structure.
            </summary>
            <returns>A hash code for this instance</returns>
        </member>
        <member name="M:Infragistics.Documents.ReplaceAllUndoUnit.TextFound.Equals(System.Object)">
            <summary>
            Compares the specified object to this object to see if they are equivalent.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.ReplaceAllUndoUnit.TextFound.op_GreaterThan(Infragistics.Documents.ReplaceAllUndoUnit.TextFound,Infragistics.Documents.ReplaceAllUndoUnit.TextFound)">
            <summary>
            Compares the relative values of two <see cref="T:Infragistics.Documents.ReplaceAllUndoUnit.TextFound"/> structures 
            </summary>
            <param name="span">The first structure</param>
            <param name="other">The other structure</param>
            <returns>true if the span is greater than other</returns>
        </member>
        <member name="M:Infragistics.Documents.ReplaceAllUndoUnit.TextFound.op_LessThan(Infragistics.Documents.ReplaceAllUndoUnit.TextFound,Infragistics.Documents.ReplaceAllUndoUnit.TextFound)">
            <summary>
            Compares the relative values of two <see cref="T:Infragistics.Documents.ReplaceAllUndoUnit.TextFound"/> structures 
            </summary>
            <param name="span">The first structure</param>
            <param name="other">The other structure</param>
            <returns>true if the span is less than other</returns>
        </member>
        <member name="M:Infragistics.Documents.ReplaceAllUndoUnit.TextFound.op_Equality(Infragistics.Documents.ReplaceAllUndoUnit.TextFound,Infragistics.Documents.ReplaceAllUndoUnit.TextFound)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Documents.ReplaceAllUndoUnit.TextFound"/> structures for equality
            </summary>
            <param name="span1">The first structure</param>
            <param name="span2">The other structure</param>
            <returns>true if the two instances are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.ReplaceAllUndoUnit.TextFound.op_Inequality(Infragistics.Documents.ReplaceAllUndoUnit.TextFound,Infragistics.Documents.ReplaceAllUndoUnit.TextFound)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Documents.ReplaceAllUndoUnit.TextFound"/> structures for inequality
            </summary>
            <param name="span1">The first structure</param>
            <param name="span2">The other structure</param>
            <returns>true if the two instances are not equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.ReplaceAllUndoUnit.TextFound.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Documents.TextDocumentUndoUnit">
            <summary>
            Class for an undo/redo operation on a TextDocument.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentUndoUnit.Execute(Infragistics.Undo.UndoExecuteContext)">
            <summary>
            Used to perform the associated action.
            </summary>
            <param name="executeInfo">Provides information about the undo/redo operation being executed.</param>
            <returns>Returns true if some action was taken. Otherwise false is returned. In either case the object was removed from the undo stack.</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentUndoUnit.GetDescription(Infragistics.Undo.UndoHistoryItemType,System.Boolean)">
            <summary>
            Returns a string representation of the action based on whether this is for an undo or redo operation.
            </summary>
            <param name="itemType">The type of history for which the description is being requested.</param>
            <param name="detailed">A boolean indicating if a detailed description should be returned. For example, when false one may return "Typing" but for verbose one may return "Typing 'qwerty'".</param>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentUndoUnit.Merge(Infragistics.Undo.UndoMergeContext)">
            <summary>
            Used to allow multiple consecutive undo units to be merged into a single operation.
            </summary>
            <param name="mergeInfo">Provides information about the unit to evaluate for a merge operation</param>
            <returns>Returns an enumeration used to provide identify how the unit was merged.</returns>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentUndoUnit.Target">
            <summary>
            Returns the target object that will be affected by the <see cref="T:Infragistics.Undo.UndoUnit"/>
            </summary>
        </member>
        <member name="M:Infragistics.Documents.WeakList`1.Add(`0)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Documents.WeakList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds specified items to the list.
            </summary>
            <param name="items">Items to add to the list.</param>
        </member>
        <member name="M:Infragistics.Documents.WeakList`1.Clear">
            <summary>
            Clears the list.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.WeakList`1.Compact">
            <summary>
            Removes entries from the list that are no longer alive. Note that entries can
            get garbase collected during the process of compacting and therefore it's not
            guarrenteed that all the items will remain alive after this method returns.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.WeakList`1.Contains(`0)">
            <summary>
            Returns true if the specified item is contained within this list.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Documents.WeakList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies items from the list to the specified array starting at index location in the specified array.
            </summary>
            <param name="array">The array to which to copy items.</param>
            <param name="index">The location in the array at which to start copying.</param>
        </member>
        <member name="M:Infragistics.Documents.WeakList`1.GetEnumerator">
            <summary>
            Returns an enumerator for iterating the live items.
            </summary>
            <returns>An enumerator for the <see cref="T:Infragistics.Documents.WeakList`1"/></returns>
        </member>
        <member name="M:Infragistics.Documents.WeakList`1.IndexOf(`0)">
            <summary>
            Returns the index of the specified item. If the item doesn't exist then returns -1.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Documents.WeakList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the specified item at the specified location in the list.
            </summary>
            <param name="index">The location at which to insert the item.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Infragistics.Documents.WeakList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of the specified item from the list. If the item doesn't 
            exist in the list then this method does nothing.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:Infragistics.Documents.WeakList`1.RemoveAt(System.Int32)">
            <summary>
            Removes item at specified index.
            </summary>
            <param name="index">Index of the item to remove.</param>
        </member>
        <member name="M:Infragistics.Documents.WeakList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a contiguous block of items from the collection.
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove</param>
        </member>
        <member name="M:Infragistics.Documents.WeakList`1.RemoveAll``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            Removes all occurrences of itemToRemove from list.
            </summary>
            <param name="list">List whose items should be removed</param>
            <param name="itemToRemove">The value of the items that should be removed</param>
        </member>
        <member name="M:Infragistics.Documents.WeakList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator for enumerating this list.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Documents.WeakList`1.Count">
            <summary>
            Returns the number of items in the list.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.WeakList`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified location.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Documents.WeakList`1.SyncRoot">
            <summary>
            Returns the object with which to syncrhonize.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.WeakList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Returns true if the list is read-only.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.WeakList`1.System#Collections#IList#IsFixedSize">
            <summary>
            Returns true if the list is fixed size.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.WeakList`1.System#Collections#IList#IsReadOnly">
            <summary>
            Returns true if the list is read-only.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.WeakList`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Returns true if this list is syncrhonized.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.WeakList`1.Enumerator.#ctor(Infragistics.Documents.WeakList{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="list">List to enumerate.</param>
        </member>
        <member name="M:Infragistics.Documents.WeakList`1.Enumerator.MoveNext">
            <summary>
            Moves to next item.
            </summary>
            <returns>Returns false if the enumerator is exhausted.</returns>
        </member>
        <member name="P:Infragistics.Documents.WeakList`1.Enumerator.Current">
            <summary>
            Returns the current item.
            </summary>
        </member>
        <member name="M:Infragistics.SyntaxParsing.Utilities.Equals(System.Byte[],System.Byte[])">
            <summary>
            Returns a boolean value indicating whether the two specified
            byte arrays are logically equivalent, i.e., produce the same
            string. Note that if both are null this method returns true.
            </summary>
        </member>
        <member name="T:Infragistics.CoreUtilities">
            <summary>
            Contains static helper methods.
            </summary>
        </member>
        <member name="M:Infragistics.CoreUtilities.GetUnderlyingType(System.Type)">
            <summary>
            Takes a Type and returns the underlying (non-nullable) type, if the Type is nullable. If the specified type is not nullable, then the passed-in type is returned. 
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.CoreUtilities.GetWeakReferenceTargetSafe(System.WeakReference)">
            <summary>
            Wraps the 'get' of the Target property in a try/catch to prevent unhandled exceptions
            </summary>
            <param name="weakReference">The WeakRefernce holding the target.</param>
            <returns>The Target or null if an exception was thrown.</returns>
        </member>
        <member name="T:Infragistics.Collections.WeakDictionary`2">
            <summary>
            IDictionary implementation that manages keys and/or values as weak references so they can be
            garbage collected.
            </summary>
            <typeparam name="TKey">Type of keys</typeparam>
            <typeparam name="TValue">Type of values</typeparam>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Collections.WeakDictionary`2"/>.
            </summary>
            <param name="manageKeysAsWeakReferences">Specifies whether to manage keys as weak references.</param>
            <param name="manageValuesAsWeakReferences">Specifies whether to manage keys as weak references.</param>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.#ctor(System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Collections.WeakDictionary`2"/>.
            </summary>
            <param name="manageKeysAsWeakReferences">Specifies whether to manage keys as weak references.</param>
            <param name="manageValuesAsWeakReferences">Specifies whether to manage keys as weak references.</param>
            <param name="initialCapacity">Initial capacity.</param>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.#ctor(System.Boolean,System.Boolean,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Collections.WeakDictionary`2"/>.
            </summary>
            <param name="manageKeysAsWeakReferences">Specifies whether to manage keys as weak references.</param>
            <param name="manageValuesAsWeakReferences">Specifies whether to manage keys as weak references.</param>
            <param name="keyComparer">Comparer for compring keys.</param>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.#ctor(System.Boolean,System.Boolean,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Collections.WeakDictionary`2"/>.
            </summary>
            <param name="manageKeysAsWeakReferences">Specifies whether to manage keys as weak references.</param>
            <param name="manageValuesAsWeakReferences">Specifies whether to manage keys as weak references.</param>
            <param name="initialCapacity">Initial capacity.</param>
            <param name="keyComparer">Comparer for compring keys.</param>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.#ctor(System.Boolean,System.Boolean,System.Int32,System.Single,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Collections.WeakDictionary`2"/>.
            </summary>
            <param name="manageKeysAsWeakReferences">Specifies whether to manage keys as weak references.</param>
            <param name="manageValuesAsWeakReferences">Specifies whether to manage keys as weak references.</param>
            <param name="initialCapacity">Initial capacity.</param>
            <param name="loadFactor">Specifies load factor. Must be greater than 0 and less than or equal to 1.</param>
            <param name="keyComparer">Comparer for compring keys.</param>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.CreateKeyWeakReference(`0)">
            <summary>
            Creates a weak reference for the key.
            </summary>
            <param name="key">Key object.</param>
            <returns>Weak reference to the key.</returns>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.CreateValueWeakReference(`1)">
            <summary>
            Creates a weak reference for the key.
            </summary>
            <param name="value">Value object.</param>
            <returns>Weak reference to the value.</returns>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.ExpandCollapseHelper(System.Boolean)">
            <summary>
            Expands or contracts the size of storage based on the new count after an operation,
            like add, remove or clear, is performed.
            </summary>
            <param name="expandOnly">Specifies that the storage should only be expanded, and not contracted.</param>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.Add(`0,`1)">
            <summary>
            Adds an entry to the dictionary. If an entry with the specified key already exists, 
            this method throws an exception.
            </summary>
            <param name="key">Key of the entry to add.</param>
            <param name="value">Value to associate with the key.</param>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.Clear">
            <summary>
            Removes all entries from the dictionary.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.Compact(System.Boolean)">
            <summary>
            Removes entries from the dictionary where keys are no longer alive (have been garbage 
            collected). Note that keys can get garbage collected during the process of compacting 
            and therefore it's not guarrenteed that all the entries in the dictionary will be 
            with live keys after this operation is completed.
            </summary>
            <param name="removeEntriesWithNullValues">Whether to also remove entries where
            value is null or has been garbage collected.</param>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.ContainsKey(`0)">
            <summary>
            Returns true if an entry with the specified key exists in the dictionary.
            </summary>
            <param name="key">Key to check for existence.</param>
            <returns>Returns true if an entry with the specified key exists in the dictionary.</returns>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.Remove(`0)">
            <summary>
            Removes the entry with the specified key. Does nothing if the specified key doesn't exist.
            </summary>
            <param name="key">Key of the entry to remove.</param>
            <returns>True if an entry was removed. False if entry with the specified key was not found.</returns>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key. If the entry doesn't exist, returns false.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Collections.WeakDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key. Set will add an entry for the key 
            if it doesn't already exist.
            </summary>
            <param name="key">Value associated with this key will be returned.</param>
            <returns>Value associated with the specified key.</returns>
        </member>
        <member name="P:Infragistics.Collections.WeakDictionary`2.Count">
            <summary>
            Returns the number of entries in the dictionary. Note that this will not take into account 
            any garbage collected items - they will be included in the count.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.WeakDictionary`2.Keys">
            <summary>
            Returns the keys in the dictionary. Only keys with non-null values are returned.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.WeakDictionary`2.Values">
            <summary>
            Returns the values in the dictionary. Only values with non-null keys are returned.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.WeakDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
            <summary>
            Returns the keys in the dictionary.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.WeakDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
            <summary>
            Returns the values in the dictionary.
            </summary>
        </member>
        <member name="T:Infragistics.WeakEventHandler`3">
            <summary>
            Helper class for weak event handling.
            </summary>
            <typeparam name="TInstance"></typeparam>
            <typeparam name="TEventSource"></typeparam>
            <typeparam name="TEventArgs"></typeparam>
            <example>
            <code>
            <![CDATA[
            using System;
            using System.Collections;
            using System.Collections.Specialized;
            using System.ComponentModel;
            using Infragistics;
            
            namespace TestApp
            {
                public class TestClass
                {
                    private IEnumerable _itemsSource;
                    private WeakCollectionChangedHandler<TestClass> _weakCollectionChanged;
                    private WeakEventHandler<TestClass, ICollectionView, EventArgs> _weakCollectionViewCurrentChanged;
            
                    public IEnumerable ItemsSource
                    {
                        get { return _itemsSource; }
                        set { this.SetItemsSource(value); }
                    }
            
                    private void SetItemsSource(IEnumerable value)
                    {
                        if (this._itemsSource == value)
                        {
                            return;
                        }
            
                        if (this._weakCollectionChanged != null)
                        {
                            this._weakCollectionChanged.Detach();
                            this._weakCollectionChanged = null;
                        }
            
                        if (this._weakCollectionViewCurrentChanged != null)
                        {
                            this._weakCollectionViewCurrentChanged.Detach();
                            this._weakCollectionViewCurrentChanged = null;
                        }
            
                        this._itemsSource = value;
            
                        INotifyCollectionChanged notifyCollectionChanged = value as INotifyCollectionChanged;
                        if (notifyCollectionChanged != null)
                        {
                            this._weakCollectionChanged =
                                new WeakCollectionChangedHandler<TestClass>
                                    (
                                        this,
                                        notifyCollectionChanged,
                                        (instance, s, e) => instance.ItemsSource_CollectionChanged(s, e)
                                    );
            
                            notifyCollectionChanged.CollectionChanged += this._weakCollectionChanged.OnEvent;
                        }
            
                        ICollectionView collectionView = value as ICollectionView;
                        if (collectionView != null)
                        {
                            this._weakCollectionViewCurrentChanged =
                                new WeakEventHandler<TestClass, ICollectionView, EventArgs>
                                    (
                                        this,
                                        collectionView,
                                        (instance, s, e) => instance.ItemsSource_CurrentChanged(s, e),
                                        (weakHandler, eventSource) => eventSource.CurrentChanged -= weakHandler.OnEvent
                                    );
            
                            collectionView.CurrentChanged += this._weakCollectionViewCurrentChanged.OnEvent;
                        }
                    }
            
                    private void ItemsSource_CurrentChanged(object sender, EventArgs e)
                    {
                        // ...
                    }
            
                    private void ItemsSource_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
                    {
                        // ...
                    }
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Infragistics.WeakEventHandler`3.#ctor(`0,`1,System.Action{`0,System.Object,`2},System.Action{Infragistics.WeakEventHandler{`0,`1,`2},`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.WeakEventHandler`3"/> class.
            </summary>
            <param name="instance">The short living object that wants to recieve events from the long living <paramref name="eventSource"/> object.</param>
            <param name="eventSource">The long living object that raises the event.</param>
            <param name="onEventAction">The delegate that will be invoked when the event is raised.</param>
            <param name="onDetachAction">The delegate that will be invoked when the event should be detached</param>
            <remarks>
            The delegates <paramref name="onEventAction"/> and <paramref name="onDetachAction"/> must not refer to instance methods.
            </remarks>
        </member>
        <member name="M:Infragistics.WeakEventHandler`3.OnEvent(System.Object,`2)">
            <summary>
            Handler for the event raised by the long living object.
            </summary>
            <param name="source">The source of the event.</param>
            <param name="eventArgs">The <b>TEventArgs</b> instance containing the event data.</param>
        </member>
        <member name="M:Infragistics.WeakEventHandler`3.Detach">
            <summary>
            Invokes <see cref="P:Infragistics.WeakEventHandler`3.OnDetachAction"/> that handles the detaching of <see cref="M:Infragistics.WeakEventHandler`3.OnEvent(System.Object,`2)"/> from the event.
            </summary>
        </member>
        <member name="P:Infragistics.WeakEventHandler`3.OnEventAction">
            <summary>
            Gets or sets the delegate that will be invoked when the event is raised.
            </summary>
            <remarks>
            The delegate must not refer to an instance method.
            </remarks>
        </member>
        <member name="P:Infragistics.WeakEventHandler`3.OnDetachAction">
            <summary>
            Gets or sets the delegate that will be invoked when the event should be detached.
            </summary>
            <remarks>
            The delegate must not refer to an instance method.
            </remarks>
        </member>
        <member name="T:Infragistics.WeakCollectionChangedHandler`1">
            <summary>
            Helper class for weak handling of <c>System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged</c>.
            </summary>
            <typeparam name="TInstance">The type of the instance that will recieve the events.</typeparam>
            <remarks>
            See <see cref="T:Infragistics.WeakEventHandler`3"/> for a sample.
            </remarks>
        </member>
        <member name="M:Infragistics.WeakCollectionChangedHandler`1.#ctor(`0,System.Collections.Specialized.INotifyCollectionChanged,System.Action{`0,System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs})">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.WeakCollectionChangedHandler`1"/> class.
            </summary>
            <param name="instance">The short living object that wants to recieve events from the long living <paramref name="eventSource"/> object.</param>
            <param name="eventSource">The long living object that raises the event.</param>
            <param name="onEventAction">The delegate that will be invoked when the event is raised.</param>
        </member>
        <member name="T:Infragistics.WeakPropertyChangedHandler`1">
            <summary>
            Helper class for weak handling of <c>System.ComponentModel.INotifyPropertyChanged.PropertyChanged</c>.
            </summary>
            <typeparam name="TInstance">The type of the instance that will recieve the events.</typeparam>
            <remarks>
            See <see cref="T:Infragistics.WeakEventHandler`3"/> for a sample.
            </remarks>
        </member>
        <member name="M:Infragistics.WeakPropertyChangedHandler`1.#ctor(`0,System.ComponentModel.INotifyPropertyChanged,System.Action{`0,System.Object,System.ComponentModel.PropertyChangedEventArgs})">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.WeakPropertyChangedHandler`1"/> class.
            </summary>
            <param name="instance">The short living object that wants to recieve events from the long living <paramref name="eventSource"/> object.</param>
            <param name="eventSource">The long living object that raises the event.</param>
            <param name="onEventAction">The delegate that will be invoked when the event is raised.</param>
        </member>
        <member name="T:Infragistics.Shared.AssemblyVersion">
            <summary>
            Contains version information for the Infragistics assemblies.
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.MajorMinor">
            <summary>
            Major.Minor number portion of the assembly version
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.Build">
            <summary>
            Build number portion of the assembly version
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.Revision">
            <summary>
            Revision number portion of the assembly version
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.Version">
            <summary>
            Assembly version number
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.ToolBoxBitmapFolder">
            <summary>
            Location of the resources for toolbox bitmaps. 
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.CompanyName">
            <summary>
            Assembly company name
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.EndCopyrightYear">
            <summary>
            End year of assembly copyright
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.SatelliteContractVersion">
            <summary>
            The assembly version number for the satellite assemblies.
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.Configuration">
            <summary>
            The current build configuration for the assembly.
            </summary>
        </member>
    </members>
</doc>
